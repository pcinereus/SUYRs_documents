{
  "hash": "d275f00a0e9424baea846e15c10d4ecb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Code editors \nauthor: \"Murray Logan\"\ndate: \"16 July, 2024\"\nformat: \n  html:\n    toc: true\n    toc-float: true\n    page-layout: full\n    number-sections: true\n    number-depth: 3\n    embed-resources: true\n    code-fold: false\n    code-tools: true\n    code-summary: \"Show the code\"\n    code-line-numbers: true\n    code-block-border-left: \"#ccc\"\n    code-copy: true\n    highlight-style: atom-one\n    theme: [default, ../resources/tut-style.scss]\n    css: ../resources/tut-style.css\ncrossref:\n  fig-title: '**Figure**'\n  fig-labels: arabic\n  tbl-title: '**Table**'\n  tbl-labels: arabic\nengine: knitr\nbibliography: ../resources/references.bib\noutput_dir: \"docs\"\n---\n\n\n\n# Introduction\n\nIn the [previous tutorial](01_introduction_to_r.html), we installed R\nand began exploring the language. If this was your very first time\nusing R and perhaps your first exposure to any programming language,\nit is likely that you worked through the tutorial using either the R\nGui (if on windows) or the terminal application in MacOSX or Linux.\n\nWhilst these tools to provide direct interaction with the R engine,\nthey do little to support your efforts to develop code, documentation\nand sophisticated analysis outputs.  This is where code editors come in.\n\nCode editors are a specialized software tools designed for creating\nand modifying source code of computer programs. They provide essential\nfeatures such as syntax highlighting, code completion, and error\nchecking, enhancing the efficiency and accuracy of programming tasks.\nCode editors are essential for developers, offering a streamlined\nenvironment for writing, editing, and organizing code, facilitating\nthe software development process.\n\nChoosing an appropriate code editor is crucial for efficient R\ndevelopment. Each editor offers unique features and interfaces,\ncatering to different preferences and workflows. This guide will walk\nyou through some of the popular choices, including RStudio, Visual\nStudio Code, Emacs, Neovim, and Sublime Text, helping you make an\ninformed decision.\n\nOf these, particular emphasis will be placed on RStudio. This is\nprimarily because it is specifically designed to be an Intergrated\nDevelopment Environment (IDE) for R. It is developed by active members\nof the R community for the R community. Furthermore, because it is a\ndedicated R IDE, it works straight out of the box with little to no\nconfiguration necessary. By contrast, the other editors are general\ncode editors and thus must be specifically configured to provide R\nbased functionality.\n\n# Editors\n\n::: panel-tabset\n\n## RStudio\n\n### Overview\n\nRStudio stands out as a widely used and dedicated Integrated\nDevelopment Environment (IDE) designed for R development. Its\nuser-friendly interface and comprehensive features make it a popular\nchoice among R users.\n\n### Installation\n\n:::: panel-tabset\n\n#### Installing RStudio on Windows:\n\n1. **Download R:** \n    - RStudio requires R to be installed. If you have not already done\n      so, download and install R from the official CRAN website.\n\n2. **Download RStudio:** \n    - Visit the [RStudio Download\n    page](https://www.rstudio.com/products/rstudio/download/) and\n    select the \"RStudio Desktop\" version compatible with your Windows\n    operating system.\n\n3. **Install RStudio:** \n    - Run the downloaded RStudio installer and follow the installation\n      wizard. \n    - Accept the default settings unless you have specific\n      preferences. \n\n4. **Launch RStudio:**\n    - After installation, launch RStudio from the Start menu or\n      desktop shortcut.\n\n#### Installing RStudio on macOS:\n\n1. **Download R:**\n    - If you have not already done so, download and install R on macOS\n      from the official CRAN website.\n\n2. **Download RStudio:**\n    - Navigate to the [RStudio Download\n      page](https://www.rstudio.com/products/rstudio/download/) and\n      choose the \"RStudio Desktop\" version for macOS.\n\n3. **Install RStudio:**\n    - Run the downloaded RStudio package, and macOS will guide you\n      through the installation process.\n\n4. **Launch RStudio:**\n    - Open RStudio from the Applications folder or use Spotlight to\n      search for it.\n      \n#### Installing RStudio on Linux:\n\n1. **Download R:**\n    - If you have not already done so, install R on your Linux\n      distribution using the package manager. For example, on Ubuntu,\n      run:\n\n\n\n::: {.cell .bash}\n\n```{.bash .cell-code}\nsudo apt-get install r-base\n```\n:::\n\n\n\n2. **Download RStudio:**\n    - Visit the RStudio Download page and choose the appropriate\n      RStudio Desktop version for your Linux distribution.\n\n3. **Install RStudio:**\n    - Run the downloaded RStudio package, and follow any additional instructions based on your Linux distribution.\n\n4. **Launch RStudio:**\n    - Open a terminal and type rstudio to launch RStudio.\n\n::::\n\n### Key Features\n\nRStudio offers an integrated scripting and console environment, extensive support for RMarkdown, and streamlined package management capabilities.\n\nI strongly encourage you to look over the [RStudio user\nguide](https://docs.posit.co/ide/user/) - particularly the Getting\nStarted section.\n\n\n\n## Visual Studio Code\n\n### Overview\n\nVisual Studio Code (VSCode) is a versatile and extensible code editor\nknown for its speed and efficiency. While not exclusively designed for\nR, it offers excellent support for the language through extensions.\n\n### Installation\n\n1. Download Visual Studio Code:\n    - Visit the Visual Studio Code Download page and choose the\n      version suitable for your operating system (Windows, macOS, or\n      Linux).\n    - Follow the installation instructions for your specific operating\n      system.\n\n2. Install Visual Studio Code:\n    - Run the downloaded installer and follow the installation wizard.\n    - Accept the default settings unless you have specific preferences.\n\n3. Launch Visual Studio Code:\n    - After installation, launch VSCode from the Start menu or applications folder.\n\n\n### Setting Up R Support in Visual Studio Code:\n\n1. Install R Extension:\n    - Open VSCode and go to the Extensions view by clicking on the\n      square icon on the sidebar or using the shortcut Ctrl+Shift+X.\n    - Search for \"R\" in the Extensions view search box.\n    - Install the \"R Language\" extension provided by Yuki Ueda.\n\n2. Configure R Path (Optional):\n    - Open the VSCode settings by pressing Ctrl+, or navigating to\n      File > Preferences > Settings.\n    - Click on the \"Open Settings (JSON)\" icon in the upper-right\n      corner of the Settings tab.\n    - Add the following JSON configuration to set the path to your R\n      executable:\n\n\n\n::: {.cell .bash}\n\n```{.bash .cell-code}\n\"r.rpath.windows\": \"C:\\\\Program Files\\\\R\\\\R-4.x.x\\\\bin\\\\x64\\\\R.exe\",  // Replace with your R path\n```\n:::\n\n\n\n3. Select R Interpreter:\n    - Create or open an R script in VSCode.\n    - Look for the \"Select an R interpreter\" notification at the\n      bottom-right corner.\n    - Click on \"Select R Interpreter\" and choose the R version you\n      installed.\n\n4. Install Required R Packages:\n    - Open the integrated terminal in VSCode using Ctrl+` .\n    - Install the necessary R packages (e.g., languageserver and\n      formatR) by running the following commands:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"languageserver\")\ninstall.packages(\"formatR\")\n```\n:::\n\n\n\n5. Reload Window:\n    - After configuring R support, it's recommended to reload the\n      VSCode window to apply the changes.\n\n6. Verify R Support:\n    - Open R Script:\n      - Create or open an R script (.R file) in VSCode.\n    - Check R Features:\n      - Verify that R features such as syntax highlighting, code\n        completion, and linting are functioning correctly.\n    - Run R Script:\n      - Run parts of your R script or the entire script to ensure that\n        the R interpreter is correctly executing code.\n\n\n### Key Features\n\nVSCode is lightweight, supports the R Language Server, and can be\nenhanced with various extensions to meet specific development needs.\n\n\n## Emacs\n\n### Overview\n\nEmacs is a highly customizable and extensible text editor renowned for\nits versatility. It may have a steeper learning curve, but its power\nlies in its ability to adapt to individual preferences.\n\n### Installation\n\n1. Download and Install Emacs:\n    - Visit the [GNU Emacs Download page](\n      https://www.gnu.org/software/emacs/download.htm) and select the\n      appropriate version for your operating system (Windows, macOS,\n      or Linux).\n    - Follow the installation instructions provided on the download\n      page.\n\n2. Launch Emacs:\n    - After installation, launch Emacs. On Windows, you can find it in\n      the Start menu. On macOS and Linux, open a terminal and type\n      emacs.\n    - Configuring Emacs for R Support:\n\n3. Install ESS (Emacs Speaks Statistics):\n    - ESS is a package for Emacs that provides support for various\n      statistical languages, including R.\n    - Open Emacs and add the following to your Emacs configuration\n      file (usually `~/.emacs` or `~/.emacs.d/init.el`):\n\n\n\n::: {.cell}\n\n```{.elisp .cell-code}\n;; Add MELPA repository for package installation\n(require 'package)\n(add-to-list 'package-archives '(\"melpa\" . \"https://melpa.org/packages/\") t)\n(package-initialize)\n\n;; Install ESS package\n(unless (package-installed-p 'ess)\n  (package-refresh-contents)\n  (package-install 'ess))\n```\n:::\n\n\n\n4. Configure ESS:\n    - Customize your Emacs configuration to set up ESS for R. Add the\n      following lines to your configuration file:\n\n\n\n::: {.cell}\n\n```{.elisp .cell-code}\n;; Configure ESS for R\n(require 'ess-site)\n```\n:::\n\n\n\n5. Select R Interpreter:\n    - Open an R script in Emacs. ESS should automatically detect your R installation.\n    - If needed, customize the R interpreter by adding the following line to your configuration file:\n\n\n\n::: {.cell}\n\n```{.elisp .cell-code}\n(setq inferior-R-program-name \"/path/to/R\")\n```\n:::\n\n\n\n6. Useful Keybindings (Optional):\n    - Add keybindings for common ESS commands. For example:\n\n\n\n::: {.cell}\n\n```{.elisp .cell-code}\n(global-set-key (kbd \"C-c C-k\") 'ess-eval-buffer)\n(global-set-key (kbd \"C-c C-r\") 'ess-eval-region)\n```\n:::\n\n\n\n7. ESS Documentation (Optional):\n    - Access ESS documentation by typing C-h i to open the Info\n      viewer, then select \"ESS\" from the menu.\n\n8. Reload Configuration:\n    - After making changes to your Emacs configuration, restart Emacs\n      or use M-x load-file to reload the configuration.\n\n9. Verify R Support:\n    - Open R Script:\n      - Create or open an R script (.R file) in Emacs.\n    - Check ESS Features:\n      - Verify that ESS features such as syntax highlighting, code\n        evaluation, and interaction with R are functioning correctly.\n    - Run R Script:\n      - Evaluate parts of your R script or the entire script to ensure\n        that the R interpreter is correctly executing code.\n\n\n### Key Features\n\nEmacs supports extensive extensibility through packages, boasts ESS\n(Emacs Speaks Statistics) for R integration, and offers Org Mode for\nliterate programming.\n\n\n## NeoVim\n\n### Overview\n\nNeovim is a modern and extensible text editor that builds on the\nfoundation of Vim. It combines the efficiency of Vim with additional\nfeatures for a more contemporary editing experience.\n\n\n### Installation\n\n1. Download and Install Neovim:\n    - Visit the [Neovim GitHub Releases\n      page](https://github.com/neovim/neovim/releases) and download\n      the installer appropriate for your operating system (Windows,\n      macOS, or Linux).\n    - Follow the installation instructions provided on the GitHub\n      page.\n\n2. Launch Neovim:\n    - After installation, launch Neovim. On Windows, you can find it\n      in the Start menu or use the executable. On macOS and Linux,\n      open a terminal and type nvim.\n\n3. Configuring Neovim for R Support:\n    - Install a Plugin Manager (Optional):\n      - While optional, using a plugin manager makes it easier to\n        manage Neovim plugins. Popular choices include vim-plug and\n        dein.vim.\n      - Follow the installation instructions provided by the chosen\n        plugin manager.\n\n4. Install Nvim-R Plugin:\n    - Nvim-R is a plugin that enhances Neovim for R development.\n    - Add the following lines to your Neovim configuration file\n      (usually `~/.config/nvim/init.vim` or `~/.vimrc`):\n\n\n\n::: {.cell}\n\n```{.lua .cell-code}\n-- For vim-plug\nPlug 'jalvesaq/Nvim-R'\n\n-- For dein.vim\ncall dein#add('jalvesaq/Nvim-R')\n```\n:::\n\n\n\n5. Configure Nvim-R:\n    - Customize your Neovim configuration to set up Nvim-R for R. Add\n      the following lines to your configuration file:\n\n\n\n::: {.cell}\n\n```{.lua .cell-code}\n-- Set the path to your R executable (replace with your actual path)\nlet g:vimrplugin_Rexecutable = '/path/to/R'\n\n-- Enable filetype plugin and indentation\nfiletype plugin indent on\n\n-- Set R as the default file type for .R files\nau BufNewFile,BufRead *.R set filetype=r\n```\n:::\n\n\n\n6. Install Plugins:\n    - Open Neovim and run the command to install the configured\n      plugins:\n      - For vim-plug: :PlugInstall\n      - For dein.vim: :call dein#install()\n\n7. Reload Configuration:\n     - After adding the configuration, restart Neovim or use :source %\n       to reload the configuration.\n\n8. Verify R Support:\n    - Open R Script:\n      - Create or open an R script (.R file) in Neovim.\n    - Check Nvim-R Features:\n      - Verify that Nvim-R features, such as syntax highlighting, code\n        evaluation, and interaction with R, are functioning correctly.\n    - Run R Script:\n      - Evaluate parts of your R script or the entire script to ensure\n        that the R interpreter is correctly executing code.\n      \n### Key Features\n\nNeovim maintains Vim compatibility, supports plugins for extended\nfunctionality, and emphasizes efficient text editing.\n\n\n## Sublime Text\n\n### Overview\n\nSublime Text is a lightweight yet feature-rich text editor appreciated\nfor its speed and simplicity. While not R-specific, it offers a\ncustomizable environment suitable for various programming languages.\n\n### Installation\n\n1. Download and Install Sublime Text:\n    - Visit the [Sublime Text Download\n      page](https://www.sublimetext.com/download) and download the\n      installer for your operating system (Windows, macOS, or Linux).\n    - Follow the installation instructions provided on the website.\n    \n2. Launch Sublime Text:\n    - After installation, launch Sublime Text. You can find it in the Start menu on Windows, in the Applications folder on macOS, or by using the terminal on Linux.\n\n3. Configuring Sublime Text for R Support:\n    - Install Package Control:\n      - Package Control is a package manager for Sublime Text. Follow\n        the installation instructions on the [Package Control\n        website](https://packagecontrol.io/installation).\n\n    - Install Terminus Package:\n      - Open Sublime Text and press Ctrl+Shift+P (Windows/Linux) or Cmd+Shift+P (macOS) to open the command palette.\n      - Type \"Install Package\" and select \"Package Control: Install Package.\"\n      - Search for \"Terminus\" and install the package.\n\n    - Install R:\n      - Make sure you have R installed on your system. You can download it from the official R website.\n    - Configure Terminus for R:\n      - Open Sublime Text and create or open an R script (.R file).\n      - Press Ctrl+ (Windows/Linux) or Cmd+ (macOS) to open the Terminus console.\n      - In the Terminus console, type the following command to start an R session:\n\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nR\n```\n:::\n\n\n    - Terminus will open a new terminal at the bottom of Sublime Text,\n      providing an interactive R session.\n    - Create Build System (Optional):\n      - You can create a custom build system for R scripts to simplify\n        execution.\n        - Open a new file in Sublime Text and paste the following JSON\n          configuration:\n\n\n\n::: {.cell}\n\n```{.json .cell-code}\n{\n    \"cmd\": [\"R\", \"--slave\", \"--vanilla\", \"-f\", \"$file\"],\n    \"file_regex\": \"^(?:(...*?):([0-9]+):([0-9]+)|(...*?))$\",\n    \"selector\": \"source.R\"\n}\n```\n:::\n\n\n        - Save the file with the extension .sublime-build in the\n          \"User\" directory of your Sublime Text \"Packages\" folder. You\n          can find this folder by selecting \"Preferences\" > \"Browse\n          Packages...\" in Sublime Text.\n      - Run R Script:\n        - Open an R script in Sublime Text.\n        - Use the Terminus console to interact with the R session and\n          execute commands.\n\n### Key Features\n\nSublime Text boasts multiple cursors, supports extensions through\nPackage Control, and provides ample customization options.\n\n\n:::\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}