{
  "hash": "8c40ea534e2f415c09d2e15b7bc024ed",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Grammar of graphics (ggplot2 and friends)\nauthor: \"Murray Logan\"\ndate: \"16 July, 2024\"\nformat: \n  html:\n    toc: true\n    toc-float: true\n    page-layout: full\n    number-sections: true\n    number-depth: 3\n    embed-resources: true\n    code-fold: false\n    code-tools: true\n    code-summary: \"Show the code\"\n    code-line-numbers: true\n    code-block-border-left: \"#ccc\"\n    code-copy: true\n    highlight-style: atom-one\n    theme: [default, ../resources/tut-style.scss]\n    css: ../resources/tut-style.css\ncrossref:\n  fig-title: '**Figure**'\n  fig-labels: arabic\n  tbl-title: '**Table**'\n  tbl-labels: arabic\nengine: knitr\nbibliography: ../resources/references.bib\noutput_dir: \"docs\"\n---\n\n\n\n::: {.cell}\n\n:::\n\n\n \nThis Tutorial has been thrown together a little hastily and is\ntherefore not very well organised - sorry!  Graphical features are\ndemonstrated either via tables of properties or as clickable graphics\nthat reveal the required R code.  Click on a graphic to reveal/toggle\nthe source code or to navigate to an expanded section.\n\n\nThis tutorial is intended to be viewed sequentially. It begins with\nthe basic ggplot framework and then progressively builds up more and\nmore features as default elements are gradually replaced to yeild more\ncustomized graphics.\n\t\t  \n\t\t  \nHaving said that, I am going to start with a sort of _showcase_ of\ngraphics which should act as quick navigation to entire sections\ndevoted to the broad series of graphs related to each of the featured\ngraphics.  I have intentionally titled each graph according to the\nmain feature it encapsulates rather than any specific functions that\nare used to produce the features as often a single graphic requires a\ncombination of features and thus functions.  Furthermore, the grammar\nof graphics specifications are sufficiently unfamiliar to many that\nthe relationships between the types of graphical features a researcher\nwishes to produce and the specific syntax required to achieve the\ndesired result can be difficult to recognise.\n\t\t  \nEach graphic is intended to encapsulate a broad series of related\ngraph types.\n\n::: {.panel-tabset .tabset-faded}\n\n## Primatives\n\n<div class = \"gallery\">\n\n[Blank\n![](05_grammar_of_graphics_files/figure-html/ggplotBlank-1.png){class=\"thumb\"}\n](#Gblank)\n\n[Points\n![](05_grammar_of_graphics_files/figure-html/ggplotPoint-1.png){class=\"thumb\"}\n](#Gpoints) \n\n[Text\n![](05_grammar_of_graphics_files/figure-html/ggplotText-1.png){class=\"thumb\"}\n](#Gtext)\n\n[Paths\n![](05_grammar_of_graphics_files/figure-html/ggplotPath-1.png){class=\"thumb\"}\n](#Gpaths)\n\n[Polygons\n![](05_grammar_of_graphics_files/figure-html/ggplotPolygon-1.png){class=\"thumb\"}\n](#Gpolygons)\n\n[Area\n![](05_grammar_of_graphics_files/figure-html/ggplotArea-1.png){class=\"thumb\"}\n](#Gareas)\n\n[Ribbons\n![](05_grammar_of_graphics_files/figure-html/ggplotRibbons-1.png){class=\"thumb\"}\n](#Gribbons)\n\n</div>\n\n## Visualising distributions\n<div class = \"gallery\">\n[Boxplots\n![](05_grammar_of_graphics_files/figure-html/ggplotBoxplot-1.png){class=\"thumb\"}\n](#Gboxplots)\n\n[Boxplots\n![](05_grammar_of_graphics_files/figure-html/ggplotBoxplotP-1.png){class=\"thumb\"}\n](#Gboxplots)\n\n[Histograms\n![](05_grammar_of_graphics_files/figure-html/ggplotHistogram-1.png){class=\"thumb\"}\n](#Ghistograms)\n\n[Histograms\n![](05_grammar_of_graphics_files/figure-html/ggplotHistogramP-1.png){class=\"thumb\"}\n](#Ghistograms)\n\n[Density plots\n![](05_grammar_of_graphics_files/figure-html/ggplotDensity-1.png){class=\"thumb\"}\n](#Gdensity-plots)\n\n[Density plots\n![](05_grammar_of_graphics_files/figure-html/ggplotDensityP-1.png){class=\"thumb\"}\n](#Gdensity-plots)\n\n[Violin plots\n![](05_grammar_of_graphics_files/figure-html/ggplotViolin-1.png){class=\"thumb\"}\n](#Gviolin-plots)\n\n[Violin plots\n![](05_grammar_of_graphics_files/figure-html/ggplotViolinP-1.png){class=\"thumb\"}\n](#Gviolin-plots)\n\n[QQ plots\n![](05_grammar_of_graphics_files/figure-html/ggplotQQ-1.png){class=\"thumb\"}\n](#Gqq-plots)\n\n[QQ plots\n![](05_grammar_of_graphics_files/figure-html/ggplotQQP-1.png){class=\"thumb\"}\n](#Gqq-plots)\n\n[Bar plots\n![](05_grammar_of_graphics_files/figure-html/ggplotBar-1.png){class=\"thumb\"}\n](#Gbar-plots)\n\n[Bar plots\n![](05_grammar_of_graphics_files/figure-html/ggplotBarS-1.png){class=\"thumb\"}\n](#Gbar-plots)\n\n[Dotplots\n![](05_grammar_of_graphics_files/figure-html/ggplotDot-1.png){class=\"thumb\"}\n](#Gdot-plots)\n\n[Dotplots\n![](05_grammar_of_graphics_files/figure-html/ggplotDotP-1.png){class=\"thumb\"}\n](#Gdot-plots)\n\n[SPLOM\n![](05_grammar_of_graphics_files/figure-html/ggplotScatterplotMatrix-1.png){class=\"thumb\"}\n](#Gscatterplot-matrix)\n\n</div>\n\n## Visualising trends\n<div class = \"gallery\">\n[Scatterplots\n![](05_grammar_of_graphics_files/figure-html/ggplotScatterplot-1.png){class=\"thumb\"}\n](#Gscatterplots)\n\n[Line plots\n![](05_grammar_of_graphics_files/figure-html/ggplotLine-1.png){class=\"thumb\"}\n](#Gline-plots)\n\n[Smoothers\n![](05_grammar_of_graphics_files/figure-html/ggplotSmooth-1.png){class=\"thumb\"}\n](#Gsmoother-plots)\n\n[Tiles\n![](05_grammar_of_graphics_files/figure-html/ggplotTile-1.png){class=\"thumb\"}\n](#Gtiles)\n\n[Rasters\n![](05_grammar_of_graphics_files/figure-html/ggplotRaster-1.png){class=\"thumb\"}\n](#Grasters)\n\n[Contours\n![](05_grammar_of_graphics_files/figure-html/ggplotContour-1.png){class=\"thumb\"}\n](#Gcontours)\n\n[Filled contour\n![](05_grammar_of_graphics_files/figure-html/ggplotFilledContour-1.png){class=\"thumb\"}\n](#Gfilled-contour)\n\n</div>\n\n## Uncertainty\n<div class = \"gallery\">\n[Error bars\n![](05_grammar_of_graphics_files/figure-html/ggplotErrorbar-1.png){class=\"thumb\"}\n](#Gerror-bars)\n\n[Lineranges\n![](05_grammar_of_graphics_files/figure-html/ggplotLinerange-1.png){class=\"thumb\"}\n](#Gline-ranges)\n\n[Pointranges\n![](05_grammar_of_graphics_files/figure-html/ggplotPointrange-1.png){class=\"thumb\"}\n](#Gpoint-ranges)\n\n[Ribbons\n![](05_grammar_of_graphics_files/figure-html/ggplotRibbon-1.png){class=\"thumb\"}\n](#Gribbons)\n\n</div>\n\n## Other features\n<div class = \"gallery\">\n[Straight lines\n![](05_grammar_of_graphics_files/figure-html/ggplotVline-1.png){class=\"thumb\"}\n](#Gstraight-lines)\n\n[Segments\n![](05_grammar_of_graphics_files/figure-html/ggplotSegment-1.png){class=\"thumb\"}\n](#Gsegments)\n\n[Text\n![](05_grammar_of_graphics_files/figure-html/ggplotText-1.png){class=\"thumb\"}\n](#Gtext)\n\n</div>\n:::\n \n\n# The Grammar of Graphics \n\nThe Grammar of Graphics was first introduced/presented by Wilkinson\nand Wills (2006) as a new graphics philosophy that laid down a series\nof rules to govern the production of quantitative graphics.\nEssentially the proposed graphics infrastructure considers a graphic\nas comprising a plot (defined by a <a href =\n\"#coordinate-system\">coordinate system</a>, <a>scales</a> and\n<a>panelling</a>) over which one or more data <a\nhref=\"#layers-geoms-and-stats\">layers</a> are applied.\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell class='tikz'}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/tikz_basics-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +                          # required\n    geom_*(                         # required\n        data = <DATA>,              # required - <DATA> is a data frame\n        mapping = aes(<MAPPING>),   # required - map variables to scales\n        stat = <STAT>,              # optional - map variables to geoms\n        position = <POSITION>) +    # optional - adjustments to overlapping geoms\n    coord_*() +                     # optional - specify coordinate system\n    scale_*() +                     # optional - visual appearence of scales\n    facet_*() +                     # optional - subplots\n    theme_*()                       # optional - overal appearence\n```\n:::\n\n\n\n\nEach layer is defined as: \n\n- the data - a data frame\n- <a>mapping</a> specifications that establish the visual aesthetics\n  (colour, line type and thickness, shapes etc) of each variable\n- statistical methods that determine how the data rows should be\n  summarised (<a>stat</a>)\n- geometric instructions (<a>geom</a>) on how each summary should be\n  represented (bar, line, point etc)\n- positional mechanism for dealing with overlapping data\n  (<a>position</a>)\n\nThe visual aspects of all the graphical features are then governed by\n<a>themes</a>.\n\nFollowing a very short example, the next section will largely\nconcentrate on describing each of the above graphical components.\nHaving then established the workings of these components, we can then\nput them together to yield specific graphics.\n\nHadley Wickham's interpretation of these principals in an R context is\nimplimented via the `ggplot2` _package_.  In addition the\nfollowing packages are also commonly used alongside _ggplot_ so as to\nexpand on the flexibility etc.\n\n- `grid`\n- `gridExtra`\n- `scales`\n- `patchwork`\n- `tidyverse` - which is actually a collection of packages that make\n  up the _tidyverse_ ecosystem.\n\t\t\n\n\n::: {.cell}\n\n:::\n\n\n\nTo help illustrate graphical routines and techniques, this tutorial\nwill make use of a number of data sets - most of which are distributed\nwith base R or else one of the `tidyverse` _packages.  The first of\nthese motivating datasets is a built in data set (`BOD`) that records\ntemporal changes (days) in biochemical oxygen demand (mg/l).\n\n::: {.panel-tabset}\n\n## BOD\n\nThe biochemical oxygen demand (BOD) data set comprises of just two\nvariables (`demand`: a numeric vector representing biochemical oxygen\ndemand (mg/l) and `Time`: a numeric vector representing the time\nassociated with the demand measurement).  It was originally published\nin a master thesis in the late 1960's and has since become a standard\nexample data set on which to demonstrate various statistical\ntechniques.\n\n:::: {style='display:flex; place-content:\nspace-between;'}\n\n::: {style='width:49%;'}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(BOD)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Time demand\n1    1    8.3\n2    2   10.3\n3    3   19.0\n4    4   16.0\n5    5   15.6\n6    7   19.8\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {style='width:49%;'}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(BOD)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 6\nColumns: 2\n$ Time   <dbl> 1, 2, 3, 4, 5, 7\n$ demand <dbl> 8.3, 10.3, 19.0, 16.0, 15.6, 19.8\n```\n\n\n:::\n:::\n\n\n:::\n\n::::\n\n## CO2\n\nThe CO2 data set represents the CO₂ uptake (`uptake`: μmol/m²) of\ntwelve individual _Echinochloa crus-galli_ plants (`Plant`) from two\nlocations (`Type`) and two temperature treatments (`Treatment`) in\nresponse to a range of ambient carbon dioxide concentration (`conc`:\nml/l).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(CO2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Plant   Type  Treatment conc uptake\n1   Qn1 Quebec nonchilled   95   16.0\n2   Qn1 Quebec nonchilled  175   30.4\n3   Qn1 Quebec nonchilled  250   34.8\n4   Qn1 Quebec nonchilled  350   37.2\n5   Qn1 Quebec nonchilled  500   35.3\n6   Qn1 Quebec nonchilled  675   39.2\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(CO2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 84\nColumns: 5\n$ Plant     <ord> Qn1, Qn1, Qn1, Qn1, Qn1, Qn1, Qn1, Qn2, Qn2, Qn2, Qn2, Qn2, …\n$ Type      <fct> Quebec, Quebec, Quebec, Quebec, Quebec, Quebec, Quebec, Queb…\n$ Treatment <fct> nonchilled, nonchilled, nonchilled, nonchilled, nonchilled, …\n$ conc      <dbl> 95, 175, 250, 350, 500, 675, 1000, 95, 175, 250, 350, 500, 6…\n$ uptake    <dbl> 16.0, 30.4, 34.8, 37.2, 35.3, 39.2, 39.7, 13.6, 27.3, 37.1, …\n```\n\n\n:::\n:::\n\n\n\n## Diamonds\n\nThe diamonds data set comprises a set of attributes from a large\nnumber (~54,000) of diamonds.  The most relevant attributes are:\n\n- `carat` - weight of the diamond\n- `cut` - quality of the cut\n- `clarity` - standard measurement of how clear the diamond is (on a\n  clarity scale)\n- `price` - price in $US\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(diamonds)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 10\n  carat cut       color clarity depth table price     x     y     z\n  <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(diamonds)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 53,940\nColumns: 10\n$ carat   <dbl> 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22, 0.23, 0.…\n$ cut     <ord> Ideal, Premium, Good, Premium, Good, Very Good, Very Good, Ver…\n$ color   <ord> E, E, E, I, J, J, I, H, E, H, J, J, F, J, E, E, I, J, J, J, I,…\n$ clarity <ord> SI2, SI1, VS1, VS2, SI2, VVS2, VVS1, SI1, VS2, VS1, SI1, VS1, …\n$ depth   <dbl> 61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1, 59.4, 64…\n$ table   <dbl> 55, 61, 65, 58, 58, 57, 57, 55, 61, 61, 55, 56, 61, 54, 62, 58…\n$ price   <int> 326, 326, 327, 334, 335, 336, 336, 337, 337, 338, 339, 340, 34…\n$ x       <dbl> 3.95, 3.89, 4.05, 4.20, 4.34, 3.94, 3.95, 4.07, 3.87, 4.00, 4.…\n$ y       <dbl> 3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78, 4.05, 4.…\n$ z       <dbl> 2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49, 2.39, 2.…\n```\n\n\n:::\n:::\n\n\n\n## df\n\nThis is a purely ficticious and fabricated example that is intended to\nprovide a very small example data set.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(x = c(3, 1, 5), y = c(2, 4, 6), z = c('a', 'b', 'c'))\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class='paperTable'>\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> x </th>\n   <th style=\"text-align:right;\"> y </th>\n   <th style=\"text-align:left;\"> z </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 3 </td>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:left;\"> a </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 4 </td>\n   <td style=\"text-align:left;\"> b </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:right;\"> 6 </td>\n   <td style=\"text-align:left;\"> c </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n## Iris\n\nThe iris data set is a famous example data set that comprises the\nmeasurements (cm) of sepal and petal dimensions for three species of\niris (_Iris setosa_, _versicolor_, and _virginica_).\n\n- `Sepal.Length` - length (cm) of sepals\n- `Sepal.Width` - width (cm) of sepals\n- `Petal.Length` - length (cm) of petals\n- `Petal.Width` - width (cm) of petals\n- `Species` - iris species\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 150\nColumns: 5\n$ Sepal.Length <dbl> 5.1, 4.9, 4.7, 4.6, 5.0, 5.4, 4.6, 5.0, 4.4, 4.9, 5.4, 4.…\n$ Sepal.Width  <dbl> 3.5, 3.0, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.…\n$ Petal.Length <dbl> 1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.…\n$ Petal.Width  <dbl> 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.…\n$ Species      <fct> setosa, setosa, setosa, setosa, setosa, setosa, setosa, s…\n```\n\n\n:::\n:::\n\n\n\n## Faithfuld\n\n2d density estimate of Old Faithful data\n\n- `eruptions` - eruption time (mins)\n- `waiting` - waiting time until next eruption (mins) \n- `density` - 2d density estimate\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(faithfuld)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  eruptions waiting density\n      <dbl>   <dbl>   <dbl>\n1      1.6       43 0.00322\n2      1.65      43 0.00384\n3      1.69      43 0.00444\n4      1.74      43 0.00498\n5      1.79      43 0.00542\n6      1.84      43 0.00574\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(faithfuld)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 5,625\nColumns: 3\n$ eruptions <dbl> 1.600000, 1.647297, 1.694595, 1.741892, 1.789189, 1.836486, …\n$ waiting   <dbl> 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, …\n$ density   <dbl> 0.0032161588, 0.0038353752, 0.0044355478, 0.0049776139, 0.00…\n```\n\n\n:::\n:::\n\n\n\n## Warpbreaks\n\nThe warpbreaks dataset comprises of the number of warp breaks per loom\nfor two different types of wool under three different tensions.\n\n- `breaks` - the number of warp breaks\n- `wool` - the type of wool (A or B) \n- `tension` - the level of tension (L: low, M: medium, H: high)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(warpbreaks)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  breaks wool tension\n1     26    A       L\n2     30    A       L\n3     54    A       L\n4     25    A       L\n5     70    A       L\n6     52    A       L\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(warpbreaks)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 54\nColumns: 3\n$ breaks  <dbl> 26, 30, 54, 25, 70, 52, 51, 26, 67, 18, 21, 29, 17, 12, 18, 35…\n$ wool    <fct> A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,…\n$ tension <fct> L, L, L, L, L, L, L, L, L, M, M, M, M, M, M, M, M, M, H, H, H,…\n```\n\n\n:::\n:::\n\n\n\n:::\n\nThe following very simple graphic will be used to illustrate the\ngeneral ggplot template outlined above by explicitly stating many of\nthe default specifications.  It will use a cartesian coordinate\nsystem, continuous axes scales, a single facet (panel) and then define\na single layer with a dataframe (`BOD`), with red points, identity (no\nsummarising) statistic visualised as a point geometric.\n\n\n:::: {style='display:flex;'}\n\n::: {style='width:72%;'}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot() +                                # initialise ggplot \n    layer(data = BOD,                          # data.frame\n          mapping = aes(y = demand, x = Time), # define x and y variables\n          stat = \"identity\",                   # use raw input data\n          geom = \"point\",                      # plot data as points\n          position = \"identity\",               # how to handle overlap data\n          params = list(na.rm = TRUE),         # additional params for stat\n          show.legend = FALSE                  # whether include a legend\n          )+ \n    layer(data = BOD,                          # data.frame\n          mapping = aes(y = demand, x = Time), # define x and y variables\n          stat = \"identity\",                   # use raw input data\n          geom = \"line\",                       # plot data as a line\n          position = \"identity\",               # how to handle overlap data\n          params = list(na.rm = TRUE),         # additional params for stat\n          show.legend = FALSE                  # whether include a legend\n          ) +\n    coord_cartesian() +                        # cartesian coordinates\n    scale_x_continuous() +                     # continuous x axis\n    scale_y_continuous()                       # continuous y axis\np                                              # print the plot\n```\n:::\n\n\n\n:::\n\n\n::: {style='width:28%;'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/template1-1.png){width=250}\n:::\n:::\n\n\n\n:::\n\n::::\n\nConveniently, much of the default specifications can be omitted.\nHence the above can also be entered as:\n\n:::: {style='display:flex;'}\n\n::: {style='width:72%;'}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(data = BOD,                        # initialise ggplot \n            map = aes(x = Time, y = demand)) + # define x and y variables\n    geom_point() +                             # add points\n    geom_line()                                # add lines\np                                              # print the plot\n```\n:::\n\n\n\n:::\n\n\n::: {style='width:28%;'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/template2-1.png){width=250}\n:::\n:::\n\n\n\n:::\n\n::::\n\n\nNote the following important features of the grammar of graphics as\nimplemented in R:\n\n- the order in which each of the major components in the first code\n  snippet were added is unimportant. They each add additional\n  information to the overall graphical object. The object itself is\n  evaluated as a whole when it is printed.  For example, scales can be\n  defined before layers.\n  <details><summary>Explore</summary>\n  The following both alter the x axis to a log (base 10) scale. Note how\n  both expressions yield the same outcome.\n  \n  :::: {style='display:flex; place-content: space-between;'}\n  \n  ::: {style='width:49%;'}\n\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  p <- ggplot(data = BOD,                      \n              map = aes(x = Time, y = demand)) + \n      geom_point() +                            \n      geom_line() +\n      scale_x_log10()\n  p                                           \n  ```\n  \n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ExOrder1-1.png){width=384}\n  :::\n  :::\n\n\n  \n  :::\n  \n  ::: {style='width:49%;'}\n\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  p <- ggplot(data = BOD,                      \n              map = aes(x = Time, y = demand)) + \n      scale_x_log10() +\n      geom_point() + \n      geom_line() \n  p                                           \n  ```\n  \n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ExOrder2-1.png){width=384}\n  :::\n  :::\n\n\n  \n  :::\n  \n  ::::\n  \n  </details>\n- multiple layers are laid down in the order that they appear in the\n  statement.  In the example above, the lines are drawn over the top\n  of the points.\n  <details><summary>Explore</summary>\n  The following define points and lines in different orders.  Note how\n  the points appear under the line in the left hand figure and over\n  the line in the right hand figure.\n  \n  :::: {style='display:flex; place-content: space-between;'}\n  \n  ::: {style='width:49%;'}\n\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  p <- ggplot(data = BOD,                      \n              map = aes(x = Time, y = demand)) + \n      geom_point(color = 'red', size=5) +                            \n      geom_line()                              \n  p                                           \n  ```\n  \n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ExLayers1-1.png){width=384}\n  :::\n  :::\n\n\n  \n  :::\n  \n  ::: {style='width:49%;'}\n\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  p <- ggplot(data = BOD,                      \n              map = aes(x = Time, y = demand)) + \n      geom_line() +\n      geom_point(color = 'red', size=5) \n  p                                           \n  ```\n  \n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ExLayers2-1.png){width=384}\n  :::\n  :::\n\n\n  \n  :::\n  \n  ::::\n  \n  </details>\n- layers can be defined either with the `layers` _function_, or more\n  conveniently (as illustrated in the shorter, second code snippet),\n  via a `geom_*` function or `stat_*` _function_.\n  <details><summary>Explore</summary> The following both specify a\n  single layer (line).  The left hand figure uses the `geom_line`\n  _function with the `stat = 'identity` _argument_ and the right hand\n  figure uses the `stat_identity` _function_ with the `geom = 'line'`\n  _argument_.  Note, _identity_ just means multiple by 1 (i.e. do\n  nothing).  The default `stat` for `geom_line` is `identity` and\n  therefore it is not necessary to provide this argument - in this\n  case it was purely used for illustrative purposes.\n  \n  :::: {style='display:flex; place-content: space-between;'}\n  \n  ::: {style='width:49%;'}\n\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  p <- ggplot(data = BOD,                      \n              map = aes(x = Time, y = demand)) + \n      geom_line(stat = 'identity')\n  p                                           \n  ```\n  \n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ExLayers3-1.png){width=384}\n  :::\n  :::\n\n\n  \n  :::\n  \n  ::: {style='width:49%;'}\n\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  p <- ggplot(data = BOD,                      \n              map = aes(x = Time, y = demand)) + \n      stat_identity(geom = 'line')\n  p                                           \n  ```\n  \n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ExLayers4-1.png){width=384}\n  :::\n  :::\n\n\n  \n  :::\n  \n  ::::\n  \n  </details>\n- the data and mapping used by `geom_*` and `stats_*` _functions_ can\n  inherit mapping aesthetics from the main `ggplot()` function.\n  <details><summary>Explore</summary> The following figures both\n  generate a plot with both points and a line.  In the left hand side\n  syntax, `geom_point` and `geom_line` inherit the data and aesthetic\n  mappings from the `ggplot` _function_.  In the right hand side\n  syntax, the two _geoms_ specify the data and aesthetic mappings\n  themselves.  Whilst in this case it does lead to code duplication,\n  in other cases, it does permit different sources of data to be\n  integrated together into a single graphic.\n  \n  :::: {style='display:flex; place-content: space-between;'}\n  \n  ::: {style='width:49%;'}\n\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  p <- ggplot(data = BOD,                      \n              map = aes(x = Time, y = demand)) + \n      geom_line() +\n      geom_point()\n  p                                           \n  ```\n  \n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ExStat1-1.png){width=384}\n  :::\n  :::\n\n\n  \n  :::\n  \n  ::: {style='width:49%;'}\n\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  p <- ggplot() +\n      geom_line(data = BOD,                      \n                map = aes(x = Time, y = demand)) +\n      geom_point(data = BOD,\n                 map = aes(x = Time, y = demand))\n  p                                           \n  ```\n  \n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ExStat2-1.png){width=384}\n  :::\n  :::\n\n\n  \n  :::\n  \n  ::::\n  \n  </details>\n- the `ggplot()` _function_ along with the other building _functions_\n  work together to create a set of instructions that determine how a\n  graph is to be constructed.  In the examples above, these\n  instructions are stored in a variable (which we arbitrarily assigned\n  the name `p`).  The graph is not actually generated until the\n  `print` method is called on this object.  Recall that in R, entering\n  the name of an object is the same as running the `print` function on\n  this object.  <details><summary>Explore</summary> In the following\n  figures, the plotting instructions will be built up in multiple\n  stages.  \n  \n  - the first stage of both examples stores the ggplot initialisation\n\t(including specification of the data and aesthetic mapping).\n  - the second stage of the left hand syntax adds instructions for\n\tincluding two data layers (line and points).  Finally, the left\n\thand syntax then uses prints the full set of plotting instructions\n\t(which enacts the generation of the plot).\n  - the second stage of the right hand syntax adds instructions for\n    including a single layer (line) and in the final stage,\n    instructions for including a point layer are added to the\n    instruction set sent to `print`.\n  - note, unlike for the left hand side syntax, the stored set of\n    instructions on the right hand side do not contain the\n    instructions for including the points layer - they are only added\n    at the time of printing\n  \n  :::: {style='display:flex; place-content: space-between;'}\n  \n  ::: {style='width:49%;'}\n\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  p <- ggplot(data = BOD,                      \n              map = aes(x = Time, y = demand))  \n  p <- p + geom_line() +\n      geom_point()\n  p                                           \n  ```\n  \n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ExProgressive1-1.png){width=384}\n  :::\n  :::\n\n\n  \n  :::\n  \n  ::: {style='width:49%;'}\n\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  p <- ggplot(data = BOD,                      \n              map = aes(x = Time, y = demand))  \n  p <- p + geom_line()\n  p + geom_point()                                          \n  ```\n  \n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ExProgressive2-1.png){width=384}\n  :::\n  :::\n\n\n  \n  :::\n  \n  ::::\n  \n  </details>\n  \nIn all of the examples so far, you might have noticed that we stored\nthe plotting instructions in an arbitrary variable (`p`) prior to\nprinting (generating the plot).  Although it is not necessary to store\nthe instructions (we can just accumulate the instructions and print in\na single expression), storing sets of instructions do allow the\ninstruction set to be duplicated or altered.  This is particularly\nuseful when you have a need to produce two similar and complex plots.\n\nSince this is a tutorial, it will endeavour to focus on a very small\nset of concepts at any one time.  To that end, most of the examples in\na section will feature slight variations of a common snippet of code.\nTypically, there will be a single common code block that initialises a\nfairly generic plot followed by a series of modifications/additions\nthat highlight different plotting routines or options.\n  \n\nIn an attempt to illustrate the use of ggplot for elegant graphics, we\nwill drill down into each of the plot and layer specifications.\n\n# Layers (geoms and stats)\n### Overview\nAlthough the geoms and thus layers are amongst the last features to be\nconstructed by the system, the data and aesthetic features of the data\nimpact on how the coordinate system, scales and panelling work.\nTherefore, we will explore the geoms first.\n\n\nGeometric objects (**geoms**) are visual representations of\nobservations.  For example, there is a geom to represent points based\non a set of x,y coordinates.  All graphics need at least one geom and\neach geom is mapped to its own layer.  Multiple geoms can be added to\na graphic and the order that they are added to the expression\ndetermines the order that their respective layer is constructed.\n\nWhen a `ggplot` expression is being evaluated, geoms are coupled\ntogether with a **stat_** function.  This function is responsible for\ngenerating data appropriate for the geom.  For example, the\n`stat_boxplot` is responsible for generating the quantiles, whiskers\nand outliers for the `geom_boxplot` function.\n\nIn addition to certain specific `stat_` functions, all geoms can be\ncoupled to a `stat_identity` function.  In mathematical contexts,\nidentity functions map each element to themselves - this essentially\nmeans that each element passes straight through the identity function\nunaltered.  Coupling a geom to an identity function is useful when the\ncharacteristics of the data that you wish to represent are present in\nthe data frame.  For example, your dataframe may contain the x,y\ncoordinates for a series of points and you wish for them to be used\nunaltered as the x,y coordinates on the graph.  Moreover, your\ndataframe may contain pre-calculated information about the quantiles,\nwhiskers and outliers and you wish these to be used in the\nconstruction of a boxplot (rather than have the internals of ggplot\nperform the calculations on raw data).  \n\nSince `geom_` and `stats_` functions are coupled together, a geometric\nrepresentation can be expressed from either a `geom_` function OR a\n`stats_` function.  That is, you either:\n\t\t\t  \n- specify a `geom_` function that itself calls a `stat_` function to\n  provide the data for the `geom` function.\n \n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  ggplot(CO2)+geom_smooth(aes(x=conc,y=uptake), stat=\"smooth\")\n  ```\n  :::\n\n\n- specify a `stat_` function that itself calls a `geom_` function to\n  visually represent the data..\n\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  ggplot(CO2)+stat_smooth(aes(x=conc,y=uptake), geom=\"smooth\")\n  ```\n  :::\n\n\n\t\t\t\nIt does not really make any difference which way around you do this.\nFor the remainder of this tutorial, we will directly engage the\n`geom_` function for all examples.\n\nThe <samp>geom_</samp> functions all have numerous arguments, many of\nwhich are common to all <samp>geoms_</samp>.\n\n- `data` - the data frame containing the data.  Typically\n  this is inherited from the `ggplot` function.\n- `mapping` - the aesthetic mapping instructions.  Through\n  the aesthetic mapping the aesthetic visual characteristics of the\n  geometric features can be controlled (such as colour, point sizes,\n  shapes etc).  The aesthetic mapping can be inherited from the\n  `ggplot` function.  Common aesthetic features (mapped via\n  a `aes` function) include:\n\t\t\t\t\n  - `alpha` - transparency\n  - `colour` - colour of the geometric features\n  - `fill` - fill colour of geometric features\n  - `linetype` - type of lines used in geometric features (dotted,\n     dashed, etc)\n  - `size` - size of geometric features such as points or text\n  - `shape` - shape of geometric features such as points\n  - `weight` - weightings of values\n- `stat` - the `stat_` function coupled to the `geom_` function\n- `position` - the position adjustment for overlapping objects\n  - `identity` - leave objects were they are:\n  - `dodge` - shift objects to the side to prevent overlapping\n  - `stack` - stack objects on top of each other\n  - `fill` - stack objects on top of each other and standardize each\n    group to equal height\n- `show.legend` - whether a legend should be included\n- `inherit.aes` - whether to override any aesthetics from the `ggplot`\n  _function_\n\nThe above characteristics that can be aesthetically mapped to data\nvariables, can alternatively be set directly.  For example, in the\nleft hand code snippet below, the colour of the points is determined\nby the value of the specified variable.  However, in the right hand\ncode snippet, the colour of the points is set to be red.  Notice, that\nin this later instance, the colour is specified _outside_ of the\naesthetic (`aes`) _function_.\n\n:::: {style='display:flex; place-content: space-between;'}\n  \n::: {style='width:49%;'}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2,                      \n            map = aes(x = conc, y = uptake)) +\n    geom_point(aes(colour = Type))                                  \n```\n\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ExColour1-1.png){width=384}\n:::\n:::\n\n\n  \n:::\n  \n::: {style='width:49%;'}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2,      \n            map = aes(x = conc, y = uptake)) +\n    geom_point(colour = \"red\")                                           \n```\n\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ExColour2-1.png){width=384}\n:::\n:::\n\n\n  \n:::\n  \n::::\n  \nThe above figure (left side) illustrated the use of aesthetics to\nhighlight different groups (or _series_) within the data (`Type` in\nthat case).  For some _geoms_ it is important that they be able to\noperate on a single series of data to avoid strange artefacts.  The\nnext two figures will include a layer of lines.  In the left hand\nfigure, the lines are drawn across a single series (group) yielding a\nnonsense pattern.  This is addressed in the right hand figure which\nspecifies that separate lines should be drawn for each `Plant` (each\nplant is its own series or _group_).\n\n:::: {style='display:flex; place-content: space-between;'}\n  \n::: {style='width:49%;'}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2,                      \n            map = aes(x = conc, y = uptake)) +\n    geom_line()                                  \n```\n\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ExGroup1-1.png){width=384}\n:::\n:::\n\n\n  \n:::\n  \n::: {style='width:49%;'}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2,      \n            map = aes(x = conc, y = uptake)) +\n    geom_line(aes(group = Plant))                                           \n```\n\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ExGroup2-1.png){width=384}\n:::\n:::\n\n\n  \n:::\n  \n::::\n\nIn the above right, the series are defined by the _group_ aesthetic.\nAlternatively, we could have mapped `Plant` to one of the other\naesthetics (such as `colour`, `linetype` etc), in which case, each\nline would have a different visual appearance and a legend would have\nalso been included.\n\nCurrently, there are a large number of available `geoms_` and `stat_`\nfunctions within the ggplot system.  This tutorial is still a work in\nprogress and therefore does not include all of them - I have focused\non the more commonly used ones.\n\n## Primitive geoms \n\nPrimitive _geoms_ are simple plotting shapes that typically represent\ndirect mapping of data variables to the shapes - that is, they do not\nrequire specific _stat_ _functions_.  Hence, all primitive _geoms_ use\n_stat_identity_.  Nevertheless, it is possible to have the shapes\nmapped via alternative _stats_ functions is appropriate ([see\npoints](#Gpoints)).\n\n\n::: {.panel-tabset}\n\n### Blank ![](05_grammar_of_graphics_files/figure-html/ggplotBlank-s-1.png){class=\"thumb-s\" #Gblank} \n\nAlthough this might seem pointless, it can be useful for forcing axes\nscales to conform to a particular format - since axes scales are\ndetermined by the first layer (which can be blank) defined in the\nsequence of expressions.  \n\nTo help illustrate this, I will introduce a fabricated data set\ncomprising the length (mm) of 10 day old frog tadpoles incubated at\nthree different temperatures (Low, Medium, High).\n\n\n\n:::: {style='display:flex; place-content: space-between;'}\n  \n::: {style='width:49%;'}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntadpole <- tribble(\n    ~length, ~temp,\n    2.1,     \"Low\",\n    2.0,     \"Low\",\n    1.8,     \"Low\",\n    2.2,     \"Medium\",\n    2.3,     \"Medium\",\n    2.3,     \"Medium\",\n    2.5,     \"High\",\n    2.7,     \"High\",\n    2.8,     \"High\",\n    ) %>%\n    mutate(temp = factor(temp))\n```\n:::\n\n\n\n:::\n\n::: {style='width:49%;'}\n\nNow imagine you wish to produce a scatterplot (with `length` mapped to\nthe y-axis and `day` mapped to the x-axis) to explore these data.\nSince although `temp` is categorical, it is ordered, we would also\nlike to plot a line representing the overall trend in tadpole length\nin relation to temperature.  Doing so would introduce one of two problems:\n\n- lines can only be plotted when both x and y are mapped to continuous variables\n- in order to plot a line, we would need to convert temperature into a\n  numeric variable in some way, however doing so would mean that the\n  axes labels loose their meaning.\n\n::: \n\n::::\n\nUsing a `geom_blank` allows us to define a line and maintain useful\naxes labels.  The second and third examples below will illustrate the\nproblem and solution respectively.\n\n\n\n\n\n\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>geom</th>\n<th align = 'left'>stat</th>\n<th align = 'left'>position</th>\n<th align = 'left'>Aesthetic parameters / Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>Blank layer</td>\n<td align = 'left'>`_blank`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotBlank-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=tadpole, aes(y = length, x = temp)) +\n    geom_blank()\n```\n:::\n\n\n</td>\n</tr>\n\n<tr class = 'even'>\n<td align = 'left'>Blank layer</td>\n<td align = 'left'>`_blank`</td>\n<td align = 'left'>`_summary`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotBlank1-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=tadpole, aes(y = length, x = as.numeric(temp))) +\n    geom_line(stat = 'summary', fun = mean) \n```\n:::\n\n\n</td>\n</tr>\n\n<tr class = 'odd'>\n<td align = 'left'>Blank layer</td>\n<td align = 'left'>`_blank`</td>\n<td align = 'left'>`_summary`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotBlank2-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=tadpole, aes(y = length, x = temp))+\n    geom_blank() +\n    geom_line(aes(x = as.numeric(temp)),\n                  stat = 'summary', fun = mean) \n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n\n\n### Points ![](05_grammar_of_graphics_files/figure-html/ggplotPoint-s-1.png){class=\"thumb-s\" #Gpoints}\n\n\n\n\n\n\n\n`geom_point` draws points (scatterplot).  Typically the stat used is\n`stat_identity` as we wish to use the values in two continuous vectors\nas the coordinates of each point.\n\nThe following list describes the mapping aesthetic properties\nassociated with `geom_point`. The entries in bold are compulsory.\n<details><summary>Show attributes</summary>\n\n\n| Parameter                                                     | `geom_point` |\n|---------------------------------------------------------------+--------------|\n| _aesthetics_                                                  |              |\n| **`x`** - variable to map to the x-axis                       | ✔            |\n| **`y`** - variable to map to the y-axis                       | ✔            |\n| `group` - plot separate series without aesthetic differences  | ✔            |\n| `alpha` - transparency                                        | ✔            |\n| `colour` - colour of the points/lines                         | ✔            |\n| `fill` - inner colour of points/shapes                        | ✔            |\n| `linetype` - type of lines used to construct points/lines     | ✔            |\n| `size` - thickness of the line                                | ✔            |\n| `shape` - the plotting symbol/character                       | ✔            |\n| `weight` - weightings of values                               | ✔            |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>geom</th>\n<th align = 'left'>stat</th>\n<th align = 'left'>position</th>\n<th align = 'left'>Aesthetic parameters / Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>points layer</td>\n<td align = 'left'>`_point`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br>`geom_point` forms the basis of various plots such as scatterplots, maps and others</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotPoint-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=df, aes(y = y, x = x)) +\n    geom_point()\n```\n:::\n\n\n</td>\n</tr>\n\n<tr class = 'even'>\n<td align = 'left'>means points layer</td>\n<td align = 'left'>`_point`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y,fun<br><br>plots points based on the values provided</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotPoint1-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=CO2, aes(x = conc, y = uptake)) +\n    geom_point()\n```\n:::\n\n\n</td>\n</tr>\n\n<tr class = 'odd'>\n<td align = 'left'>means points layer</td>\n<td align = 'left'>`_point`</td>\n<td align = 'left'>`_summary`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y,fun<br><br>plots the result of the specified summary function</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotPoint2-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=CO2, aes(x = conc, y = uptake)) +\n    geom_point(stat = \"summary\", fun = mean)\n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\nThe plotting symbols are specified by either a number (index of a\nplotting symbol - see below) or a single character (printed\nliterally).\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotPoint3-1.png){width=864}\n:::\n:::\n\n\n\n\n### Text ![](05_grammar_of_graphics_files/figure-html/ggplotText-s-1.png){class=\"thumb-s\" #Gtext} \n\n\n\n\n\n\n\nThe following list describes the mapping aesthetic properties\nassociated with `geom_text`. The entries in bold are compulsory.\n\n<details><summary>Show attributes</summary>\n\n\n| Parameter                                                                            | `geom_text` |\n|--------------------------------------------------------------------------------------|-------------|\n| - **`x`** - variable to map to the x-axis                                            | ✔           |\n| - **`y`** - variable to map to the y-axis                                            | ✔           |\n| - **`label`** - text to use as labels                                                | ✔           |\n| - `group` - plot separate series without aesthetic differences                       | ✔           |\n| - `alpha` - transparency                                                             | ✔           |\n| - `colour` - colour of the points/lines                                              | ✔           |\n| - `fill` - inner colour of points/shapes                                             | ✔           |\n| - `linetype` - type of lines used to construct points/lines                          | ✔           |\n| - `shape` - symbol shape for points                                                  | ✔           |\n| - `size` - size of symbol                                                            | ✔           |\n| - `family` - font family                                                             | ✔           |\n| - `fontface` - bold, italic, normal etc                                              | ✔           |\n| - `hjust` - horizontal justification                                                 | ✔           |\n| - `vjust` - vertical justification                                                   | ✔           |\n|                                                                                      |             |\n| _additional parameters_                                                              |             |\n| - `parse` - whether to parse labels into expressions (to include special characters) | FALSE       |\n| - `nudge_x` - horizontal adjustments to label positions                              | 0           |\n| - `nudge_y` - vertical adjustments to label positions                                | 0           |\n| - `check_overlap` - whether to plot text that overlaps other text in layer           | FALSE       |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>geom</th>\n<th align = 'left'>stat</th>\n<th align = 'left'>position</th>\n<th align = 'left'>Aesthetic parameters / Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>Text layer</td>\n<td align = 'left'>`_text`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y,label<br><br>Text on a plot - useful for depicting the location of observations</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotText-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=df, aes(y = y, x = x)) +\n    geom_text(aes(label = z))\n```\n:::\n\n\n</td>\n</tr>\n\n<tr class = 'odd'>\n<td align = 'left'>Text layer</td>\n<td align = 'left'>`_text`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y,label<br><br>Text on a plot - useful for depicting the location of observations</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotText1-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=CO2, aes(y = uptake, x = conc)) +\n    geom_text(aes(label = Treatment))\n```\n:::\n\n\n</td>\n</tr>\n\n<tr class = 'odd'>\n<td align = 'left'>Text layer</td>\n<td align = 'left'>`_text`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y,label<br><br>Text on a plot - useful for depicting the location of observations</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotText2-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=CO2, aes(y = uptake, x = conc)) +\n    geom_text(aes(label = toupper(substr(Treatment, 1, 1))))\n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\nHorizontal (`hjust`) and vertical (`vjust`) text justification\ncontrols are often a source of confusion and this is further\nexacerbated when combined with `angle` control.  The following\nexcellent demonstration from\n[here](https://stackoverflow.com/questions/7263849/what-do-hjust-and-vjust-do-when-making-a-plot-using-ggplot)\nprovides a visual aid to understanding the use of these controls.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntd <- expand.grid(\n    hjust=c(0, 0.5, 1),\n    vjust=c(0, 0.5, 1),\n    angle=c(0, 45, 90),\n    text=\"text\"\n)\n\nggplot(td, aes(x=hjust, y=vjust)) + \n    geom_point() +\n    geom_text(aes(label=text, angle=angle, hjust=hjust, vjust=vjust)) + \n    facet_grid(~angle) +\n    scale_x_continuous(breaks=c(0, 0.5, 1), expand=c(0, 0.2)) +\n    scale_y_continuous(breaks=c(0, 0.5, 1), expand=c(0, 0.2))\n```\n\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotText3-1.png){width=864}\n:::\n:::\n\n\n        \n\n### Paths ![](05_grammar_of_graphics_files/figure-html/ggplotPath-s-1.png){class=\"thumb-s\" #Gpaths}\n\n\n\n\n\n\n\n`geom_path` draws paths (line plots). Paths order the coordinates\naccording to the order in the data frame (c.f. `geom_line` and\n`geom_step`)\n\n<details><summary>Show attributes</summary>\n\n\n| Parameter                                                      | `geom_path` |\n|----------------------------------------------------------------|-------------|\n| - **`x`** - variable to map to the x-axis                      | ✔           |\n| - **`y`** - variable to map to the y-axis                      | ✔           |\n| - `group` - plot separate series without aesthetic differences | ✔           |\n| - `alpha` - transparency                                       | ✔           |\n| - `colour` - colour of the points/lines                        | ✔           |\n| - `fill` - inner colour of points/shapes                       | ✔           |\n| - `linetype` - type of lines used to construct points/lines    | ✔           |\n| - `shape` - symbol shape for points                            | ✔           |\n| - `size` - size of symbol                                      | ✔           |\n|                                                                |             |\n| _additional parameters_                                        |             |\n| - `lineend` - line end style (round, butt, squate)             | 'butt'      |\n| - `linejoin` - line join style (round, mitre, bevel)           | 'round'     |\n| - `linemitre` - line mitre limit                               | 10          |\n| - `arrow` - arrow specification (`grid::arrow()`)              | NULL        |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>geom</th>\n<th align = 'left'>stat</th>\n<th align = 'left'>position</th>\n<th align = 'left'>Aesthetic parameters / Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>paths layer</td>\n<td align = 'left'>`_path`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br>`geom_path` draws lines connecting coordinates in the order present in the data frame</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotPath-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=df, aes(y = y, x = x)) +\n    geom_path()\n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\nThe simple line types available are highlighted in the following\nfigure:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotPatht3-1.png){width=864}\n:::\n:::\n\n\n\n### Polygons ![](05_grammar_of_graphics_files/figure-html/ggplotPolygon-s-1.png){class=\"thumb-s\" #Gpolygons}\n\n\n\n\n\n\n\n`geom_polygon` draws polygons with the coordinates ordered\naccording to the order in the data frame.\n\n<details><summary>Show attributes</summary>\n\n\n| Parameter                                                      | `geom_polygon` |\n|----------------------------------------------------------------|----------------|\n| - **`x`** - variable to map to the x-axis                      | ✔              |\n| - **`y`** - variable to map to the y-axis                      | ✔              |\n| - `group` - plot separate series without aesthetic differences | ✔              |\n| - `alpha` - transparency                                       | ✔              |\n| - `colour` - colour of the points/lines                        | ✔              |\n| - `fill` - inner colour of points/shapes                       | ✔              |\n| - `linetype` - type of lines used to construct points/lines    | ✔              |\n| - `shape` - symbol shape for points                            | ✔              |\n| - `size` - size of symbol                                      | ✔              |\n|                                                                |                |\n| _additional parameters_                                        |                |\n| - `rule` - determines how holes in polygons are treated        | 'evenodd'      |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>geom</th>\n<th align = 'left'>stat</th>\n<th align = 'left'>position</th>\n<th align = 'left'>Aesthetic parameters / Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>polygon layer</td>\n<td align = 'left'>`_polygon`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br>`geom_polygon` draws polygons using coordinates in the order present in the data frame</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotPolygon-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=df, aes(y = y, x = x)) +\n    geom_polygon()\n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n\n### Areas ![](05_grammar_of_graphics_files/figure-html/ggplotArea-s-1.png){class=\"thumb-s\" #Gareas}\n\n\n\n\n\n\n\n`geom_area` draws areas under curves with the coordinates ordered\naccording to the order in the data frame.\n\n<details><summary>Show attributes</summary>\n\n| Parameter                                                             | `geom_area` |\n|-----------------------------------------------------------------------|-------------|\n| - **`x`** - variable to map to the x-axis                             | ✔           |\n| - **`y`** - variable to map to the y-axis                             | ✔           |\n| - `group` - plot separate series without aesthetic differences        | ✔           |\n| - `alpha` - transparency                                              | ✔           |\n| - `colour` - colour of the points/lines                               | ✔           |\n| - `fill` - inner colour of points/shapes                              | ✔           |\n| - `linetype` - type of lines used to construct points/lines           | ✔           |\n| - `shape` - symbol shape for points                                   | ✔           |\n| - `size` - size of symbol                                             | ✔           |\n|                                                                       |             |\n| _additional parameters_                                               |             |\n| - `outline.type` - determines the type of outline to draw around area | 'both'      |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>geom</th>\n<th align = 'left'>stat</th>\n<th align = 'left'>position</th>\n<th align = 'left'>Aesthetic parameters / Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>area layer</td>\n<td align = 'left'>`_area`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br>`geom_area` draws areas under a curve using coordinates in the order present in the data frame</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotArea-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=df, aes(y = y, x = x)) +\n    geom_area()\n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n\n### Ribbons ![](05_grammar_of_graphics_files/figure-html/ggplotRibbon-s-1.png){class=\"thumb-s\" #Gribbons}\n\n\n\n\n\n\n\n\n\n`geom_ribbon` draws ribbons (polygons) based on upper (max) and lower\n(min) levels of y associated with each level of x and are typically\nused to represent uncertainty in trends.\n\n<details><summary>Show attributes</summary>\n\n| Parameter                                                             | `geom_ribbon` |\n|-----------------------------------------------------------------------|---------------|\n| - **`x`** - variable to map to the x-axis                             | ✔             |\n| - **`y`** - variable to map to the y-axis                             | ✔             |\n| - `group` - plot separate series without aesthetic differences        | ✔             |\n| - `alpha` - transparency                                              | ✔             |\n| - `colour` - colour of the points/lines                               | ✔             |\n| - `fill` - inner colour of points/shapes                              | ✔             |\n| - `linetype` - type of lines used to construct points/lines           | ✔             |\n| - `shape` - symbol shape for points                                   | ✔             |\n| - `size` - size of symbol                                             | ✔             |\n|                                                                       |               |\n| _additional parameters_                                               |               |\n| - `outline.type` - determines the type of outline to draw around area | 'both'        |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>geom</th>\n<th align = 'left'>stat</th>\n<th align = 'left'>position</th>\n<th align = 'left'>Aesthetic parameters / Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>ribbon layer</td>\n<td align = 'left'>`_ribbon`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br>`geom_ribbon` draws ribbons on a plot - useful for depicting uncertainty (confidence/credibility) intervals</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotRibbon-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=df, aes(ymin = y -1, ymax = y + 1, x = x)) +\n    geom_ribbon()\n```\n:::\n\n\n</td>\n</tr>\n\n<tr class = 'even'>\n<td align = 'left'>ribbon layer</td>\n<td align = 'left'>`_ribbon`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br>`geom_ribbon` draws ribbons on a plot - useful for depicting uncertainty (confidence/credibility) intervals</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotRibbon1-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBOD.lm <- lm(demand ~ Time, data = BOD)\nnewdata <- with(BOD, data.frame(Time = seq(min(Time), max(Time),\n                                           length = 100)))\nnewdata <- newdata %>% cbind(predict(BOD.lm, newdata = newdata,\n                                     interval = 'confidence'))\nggplot(data=newdata) +\n    geom_ribbon(aes(x = Time, ymin = lwr, ymax = upr))\n```\n:::\n\n\n</td>\n</tr>\n\n<tr class = 'odd'>\n<td align = 'left'>ribbon layer</td>\n<td align = 'left'>`_ribbon`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br>`geom_ribbon` draws ribbons on a plot - useful for depicting uncertainty (confidence/credibility) intervals</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotRibbon2-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBOD.lm <- lm(demand ~ Time, data = BOD)\nnewdata <- with(BOD, data.frame(Time = seq(min(Time), max(Time),\n                                           length = 100)))\nnewdata <- newdata %>% cbind(predict(BOD.lm, newdata = newdata,\n                                     interval = 'confidence'))\nggplot(data=newdata, aes(x = Time)) +\n    geom_ribbon(aes(x = Time, ymin = lwr, ymax = upr),\n                fill='orange') +\n    geom_line(aes(y = fit)) +\n    geom_point(data = BOD, aes(y=demand))\n```\n:::\n\n\n</td>\n</tr>\n\n</tbody>\n</table>\n\n:::\n\n## Visualising distributions \n\n::: {.panel-tabset}\n\n### Boxplots<br><br> ![](05_grammar_of_graphics_files/figure-html/ggplotBoxplot-s-1.png){class=\"thumb-s\" #Gboxplots}\n\n`geom_boxplot` constructs boxplots. The values of the various elements\nof the boxplot (quantiles, whiskers etc) are calculated by its main\npairing function (`stat_boxplot`). The following list describes the\nmapping aesthetic properties associated with `geom_boxplot`. The\nentries in bold are compulsory. Note that boxplots are usually\nspecified via the `geom_boxplot` _function_ which will engage the\n`stat_boxplot` to calculate the quantiles, whiskers and\noutliers. Therefore, confusingly, when calling `geom_boxplot`, the\ncompulsory parameters are actually those required by `stat_boxplot`\n(unless you indicated to use `stat_identity`).\n\n\n\n\n\n\n\n\n \n<details><summary>Show attributes</summary>\n\n\n| Parameter                                                     | `geom_boxplot` | `stat_boxplot` |\n|---------------------------------------------------------------|----------------|----------------|\n| _aesthetics_                                                  |                |                |\n| **`x`** - variable to map to the x-axis                       | ✔              | ✔              |\n| `y` - variable to map to the other axis                       | ✔              | ✔              |\n| **`lower`** - value of the lower box line (25th percentile)   | ✔              |                |\n| **`middle`** - value of the middle box line (50th percentile) | ✔              |                |\n| **`upper`** - value of the upper box line (75th percentile)   | ✔              |                |\n| **`ymin`** - value of lower whisker                           | ✔              |                |\n| **`ymax`** - value of upper whisker                           | ✔              |                |\n| `group` - plot separate series without aesthetic differences  | ✔              | ✔              |\n| `alpha` - transparency                                        | ✔              | ✔              |\n| `colour` - colour of the points/lines                         | ✔              | ✔              |\n| `fill` - inner colour of points/shapes                        | ✔              | ✔              |\n| `linetype` - type of lines used to construct points/lines     | ✔              | ✔              |\n| `size` - thickness of the line                                | ✔              | ✔              |\n| `weight` - weightings of values                               | ✔              | ✔              |\n|                                                               |                |                |\n| _additional parameters_                                       |                |                |\n| `outlier.colour` - color of symbols for outliers              | NULL           | NULL           |\n| `outlier.fill` - fill of symbols for outliers                 | NULL           | NULL           |\n| `outlier.shape` - shape of symbols for outliers               | NULL           | NULL           |\n| `outlier.size` - size of symbols for outliers                 | NULL           | NULL           |\n| `outlier.stroke` - colour of lines in symbols for outliers    | NULL           | NULL           |\n| `outlier.alpha` - transparency of symbols for outliers        | NULL           | NULL           |\n| `notch` - whether to notch the boxplots                       | FALSE          | FALSE          |\n| `notchwidth` - width of notch                                 | 0.5            | 0.5            |\n|                                                               |                |                |\n| _Computed variables_                                          |                |                |\n| **`lower`** - value of the lower box line (25th percentile)   | ✔              |                |\n| **`middle`** - value of the middle box line (50th percentile) | ✔              |                |\n| **`upper`** - value of the upper box line (75th percentile)   | ✔              |                |\n| **`ymin`** - value of lower whisker                           | ✔              |                |\n| **`ymax`** - value of upper whisker                           | ✔              |                |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>geom</th>\n<th align = 'left'>stat</th>\n<th align = 'left'>position</th>\n<th align = 'left'>Aesthetic parameters / Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>boxplot</td>\n<td align = 'left'>`_boxplot`</td>\n<td align = 'left'>`_boxplot`</td>\n<td align = 'left'>dodge</td>\n<td align = 'left'>x<br><br>plot of quantiles, whiskers and outliers.</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotBoxplot-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=diamonds, aes(x = carat)) +\n    geom_boxplot()\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>boxplot</td>\n<td align = 'left'>`_boxplot`</td>\n<td align = 'left'>`_boxplot`</td>\n<td align = 'left'>dodge</td>\n<td align = 'left'>y<br><br>plot of quantiles, whiskers and outliers.</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotBoxplot1-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=diamonds, aes(y = carat)) +\n    geom_boxplot()\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'odd'>\n<td align = 'left'>conditional boxplot</td>\n<td align = 'left'>`_boxplot`</td>\n<td align = 'left'>`_boxplot`</td>\n<td align = 'left'>dodge</td>\n<td align = 'left'>y,x<br><br>plot of quantiles, whiskers and outliers.</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotBoxplot2-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=diamonds, aes(y = carat, x = cut)) +\n    geom_boxplot()\n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n\n### Histograms<br><br> ![](05_grammar_of_graphics_files/figure-html/ggplotHistogram-s-1.png){class=\"thumb-s\" #Ghistograms}\n\n\n\n\n\n\n\n`geom_histogram` draws histograms of continuous data after binning the data,\n\nThe following list describes the mapping aesthetic properties\nassociated with `geom_histogram`. The entries in bold are compulsory.\n\n<details><summary>Show attributes</summary>\n\n\n| Parameter                                                    | `geom_histogram` | `stat_bin`        |\n|--------------------------------------------------------------|------------------|-------------------|\n| _aesthetics_                                                 |                  |                   |\n| **`x`** - variable to map to the x-axis                      | ✔                | ✔                 |\n| `group` - plot separate series without aesthetic differences | ✔                | ✔                 |\n| `alpha` - transparency                                       | ✔                | ✔                 |\n| `colour` - colour of the points/lines                        | ✔                | ✔                 |\n| `fill` - inner colour of points/shapes                       | ✔                | ✔                 |\n| `linetype` - type of lines used to construct points/lines    | ✔                | ✔                 |\n| `size` - thickness of the line                               | ✔                | ✔                 |\n| `weight` - weightings of values                              | ✔                | ✔                 |\n|                                                              |                  |                   |\n| _additional parameters_                                      |                  |                   |\n| `binwidth` - width of the bins                               | NULL             | NULL              |\n| `bins` - number of bins                                      | NULL             | NULL              |\n| `breaks` - vector of bin boundaries                          |                  | NULL              |\n| `center` - bin position specifier                            |                  | NULL              |\n| `boundary` - bin position specifier                          |                  | NULL              |\n| `closed` - which bin edge is included                        |                  | c('right','left') |\n| `pad` - whether to include empty bins at either end of x     |                  | FALSE             |\n| `orientation` - which axis (x or y) to operate on            | NA               | NA                |\n|                                                              |                  |                   |\n| _Computed variables_                                         |                  |                   |\n| `count` - number of points in bin                            | ✔                |                   |\n| `density` - density of points in bin                         | ✔                |                   |\n| `ncount` - counts scaled to max of 1                         | ✔                |                   |\n| `ndensity` - density scaled to max of 1                      | ✔                |                   |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<!--\n:::: {.plainTable}\n\n| aesthetics                                                   | additional arguments                              | Computed variables                      |\n|--------------------------------------------------------------|---------------------------------------------------|-----------------------------------------|\n| **`x`** - variable to map to the x-axis                      | `binwidth` - width of the bins                    | `count` - number of points in bin       |\n| `group` - plot separate series without aesthetic differences | `bins` - number of bins                           | `density` - density of points in bin    |\n| `alpha` - transparency                                       | `orientation` - which axis (x or y) to operate on | `ncount` - counts scaled to max of 1    |\n| `colour` - colour of the points/lines                        |                                                   | `ndensity` - density scaled to max of 1 |\n| `fill` - inner colour of points/shapes                       |                                                   |                                         |\n| `linetype` - type of lines used to construct points/lines    |                                                   |                                         |\n| `size` - thickness of the line                               |                                                   |                                         |\n| `weight` - weightings of values                              |                                                   |                                         |\n\n\n::::\n-->\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>geom</th>\n<th align = 'left'>stat</th>\n<th align = 'left'>position</th>\n<th align = 'left'>Aesthetic parameters / Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>histogram layer</td>\n<td align = 'left'>`_histogram`</td>\n<td align = 'left'>`_bin`</td>\n<td align = 'left'>stack</td>\n<td align = 'left'>x or y<br><br>`geom_histogram` bins continuous data and uses the number of cases in each bin as the height of a set of rectangles.<br><br>Computed variables:<br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotHistogram-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = diamonds, aes(x = carat)) +\n    geom_histogram()\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>histogram layer</td>\n<td align = 'left'>`_histogram`</td>\n<td align = 'left'>`_bin`</td>\n<td align = 'left'>stack</td>\n<td align = 'left'>x or y<br><br>the granularity of the histogram can be altered by changing the binwidth.</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotHistogram1a-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = diamonds, aes(x = carat)) +\n    geom_histogram(binwidth = 0.05)\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'odd'>\n<td align = 'left'>histogram layer</td>\n<td align = 'left'>`_histogram`</td>\n<td align = 'left'>`_bin`</td>\n<td align = 'left'>stack</td>\n<td align = 'left'>x or y<br><br>the granularity of the histogram can be altered by changing the number of bins.</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotHistogram1b-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = diamonds, aes(x = carat)) +\n    geom_histogram(bins = 10)\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>histogram layer</td>\n<td align = 'left'>`_histogram`</td>\n<td align = 'left'>`_bin`</td>\n<td align = 'left'>stack</td>\n<td align = 'left'>x or y<br><br>`geom_histogram` bins continuous data and uses the number of cases in each bin as the height of a set of rectangles.<br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotHistogramP-1.png){width=528 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = diamonds, aes(x = carat)) +\n    geom_histogram(aes(fill = cut))\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'odd'>\n<td align = 'left'>histogram layer</td>\n<td align = 'left'>`_histogram`</td>\n<td align = 'left'>`_bin`</td>\n<td align = 'left'>dodge</td>\n<td align = 'left'>x or y<br><br>`geom_histogram` bins continuous data and uses the number of cases in each bin as the height of a set of rectangles.<br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotHistogram2-1.png){width=528 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = diamonds, aes(x = carat)) +\n    geom_histogram(aes(fill = cut), position = 'dodge')\n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n### Density<br>plots ![](05_grammar_of_graphics_files/figure-html/ggplotDensity-s-1.png){class=\"thumb-s\" #Gdensity-plots}\n\n`geom_density` constructs smooth density distributions from continuous\nvectors. The actual smoothed densities are calculated by its main\npairing function (`stat_density`). The following list describes the\nmapping aesthetic properties associated with `geom_density` and\n`stat_density`. The entries in bold are compulsory. Note that density\nplots are usually specified via the `geom_density` _function_ which\nwill engage the `stat_density`. Therefore, confusingly, when calling\n`geom_density`, the compulsory paramaters are actually those required\nby `stat_density` (unless you indicated to use `stat_identity`).\n\n\n\n\n\n\n<details><summary>Show attributes</summary>\n\n| Parameter                                                            | `geom_density` | `stat_density` |\n|----------------------------------------------------------------------|----------------|----------------|\n| _aesthetics_                                                         |                |                |\n| **`x`** - variable to map to the x-axis                              | ✔              | ✔              |\n| `group` - plot separate series without aesthetic differences         | ✔              | ✔              |\n| `alpha` - transparency                                               | ✔              | ✔              |\n| `colour` - colour of the points/lines                                | ✔              | ✔              |\n| `fill` - inner colour of points/shapes                               | ✔              | ✔              |\n| `linetype` - type of lines used to construct points/lines            | ✔              | ✔              |\n| `size` - thickness of the line                                       | ✔              | ✔              |\n| `weight` - weightings of values                                      | ✔              | ✔              |\n|                                                                      |                |                |\n| _additional parameters_                                              |                |                |\n| `bw` - bandwidth smoothing (either sd of kernel or name of function) | \"nrd0\"         | \"nrd0\"         |\n| `adjust` - multiplicate bandwidth adjustment                         | 1              | 1              |\n| `kernel` - `density()` kernel to use                                 | \"gaussian\"     | \"gaussian\"     |\n| `n` - number of equ-spaced points to estimate density                | 512            | 512            |\n| `trim` - whether to trim the range of data                           | FALSE          | FALSE          |\n| `orientation` - which axis (x or y) to operate on                    | NA             | NA             |\n|                                                                      |                |                |\n| _Computed variables_                                                 |                |                |\n| `density` - density of points in bin                                 | ✔              |                |\n| `count` - density * number of points                                 | ✔              |                |\n| `scaled density` - density scaled to max of 1                        | ✔              |                |\n| `ndensity` - density scaled to max of 1                              | ✔              |                |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>geom</th>\n<th align = 'left'>stat</th>\n<th align = 'left'>position</th>\n<th align = 'left'>Aesthetic parameters / Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>density layer</td>\n<td align = 'left'>`_density`</td>\n<td align = 'left'>`_density`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x or y<br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotDensity-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = diamonds, aes(x = carat)) +\n    geom_density()\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>density layer</td>\n<td align = 'left'>`_density`</td>\n<td align = 'left'>`_density`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x or y<br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotDensity1-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = diamonds, aes(x = carat)) +\n    geom_density(bw=0.1)\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'odd'>\n<td align = 'left'>density layer</td>\n<td align = 'left'>`_density`</td>\n<td align = 'left'>`_density`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x or y, fill or other grouping<br><br>Multiple densities with overlapping ranges</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotDensityP-1.png){width=528 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = diamonds, aes(x = carat)) +\n    geom_density(aes(fill = cut), alpha=0.5)\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'odd'>\n<td align = 'left'>density layer</td>\n<td align = 'left'>`_density`</td>\n<td align = 'left'>`_density`</td>\n<td align = 'left'>stack</td>\n<td align = 'left'>x or y, fill or other grouping<br><br>Multiple densities stacked on top of one another</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotDensityP1-1.png){width=528 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = diamonds, aes(x = carat)) +\n    geom_density(aes(fill = cut), position = 'stack')\n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n\n### Violin<br>plots ![](05_grammar_of_graphics_files/figure-html/ggplotViolin-s-1.png){class=\"thumb-s\" #Gviolin-plots} \n\n`geom_violin` constructs violin plots.  Violin plots are a blend on\nboxplot and density plots in that they are a density plot mirrored\nacross a central axis and displayed similarly to a boxplot.  Since\nthey are derived from density plots, `geom_violin` and its stat\n(`stat_ydensity`) have most of the same parameters as\n`geom_density`/`stat_density`.  Violin plots are a useful way to\npresent continuous distributions that have greater granularity than\nboxplots.\n\n\n\n\n\n\n\n<details><summary>Show attributes</summary>\n\n| Parameter                                                            | `geom_violin` | `stat_ydensity` |\n|----------------------------------------------------------------------|----------------|----------------|\n| _aesthetics_                                                         |                |                |\n| **`x`** - variable to map to the x-axis                              | ✔              | ✔              |\n| `group` - plot separate series without aesthetic differences         | ✔              | ✔              |\n| `alpha` - transparency                                               | ✔              | ✔              |\n| `colour` - colour of the points/lines                                | ✔              | ✔              |\n| `fill` - inner colour of points/shapes                               | ✔              | ✔              |\n| `linetype` - type of lines used to construct points/lines            | ✔              | ✔              |\n| `size` - thickness of the line                                       | ✔              | ✔              |\n| `weight` - weightings of values                                      | ✔              | ✔              |\n|                                                                      |                |                |\n| _additional parameters_                                              |                |                |\n| `bw` - bandwidth smoothing (either sd of kernel or name of function) | \"nrd0\"         | \"nrd0\"         |\n| `adjust` - multiplicate bandwidth adjustment                         | 1              | 1              |\n| `kernel` - `density()` kernel to use                                 | \"gaussian\"     | \"gaussian\"     |\n| `n` - number of equ-spaced points to estimate density                | 512            | 512            |\n| `trim` - whether to trim the range of data                           | FALSE          | FALSE          |\n| `orientation` - which axis (x or y) to operate on                    | NA             | NA             |\n|                                                                      |                |                |\n| _Computed variables_                                                 |                |                |\n| `density` - density of points in bin                                 | ✔              |                |\n| `count` - density * number of points                                 | ✔              |                |\n| `scaled density` - density scaled to max of 1                        | ✔              |                |\n| `ndensity` - density scaled to max of 1                              | ✔              |                |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n\n\n\n\n\n \n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>geom</th>\n<th align = 'left'>stat</th>\n<th align = 'left'>position</th>\n<th align = 'left'>Aesthetic parameters / Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>violin</td>\n<td align = 'left'>`_violin`</td>\n<td align = 'left'>`_ydensity`</td>\n<td align = 'left'>dodge</td>\n<td align = 'left'>x<br><br>plot of quantiles, whiskers and outliers.</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotViolin-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diamonds) +\n    geom_violin(aes(y = carat, x = carat), orientation = 'x')\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>violin</td>\n<td align = 'left'>`_violin`</td>\n<td align = 'left'>`_ydensity`</td>\n<td align = 'left'>dodge</td>\n<td align = 'left'>y<br><br>plot of quantiles, whiskers and outliers.</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotViolin1-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diamonds) +\n    geom_violin(aes(y = carat, x = carat), orientation = 'y')\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'odd'>\n<td align = 'left'>conditional violin</td>\n<td align = 'left'>`_violin`</td>\n<td align = 'left'>`_ydensity`</td>\n<td align = 'left'>dodge</td>\n<td align = 'left'>y,x<br><br>plot of quantiles, whiskers and outliers.</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotViolinP-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diamonds) +\n    geom_violin(aes(y = carat, x = cut))\n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n\n### QQ<br>plots ![](05_grammar_of_graphics_files/figure-html/ggplotQQ-s-1.png){class=\"thumb-s\" #Gqq-plots} \n\n`geom_qq` constructs quantile-quantile (QQ) plots.  QQ plots\nillustrate the quantiles of the sample distribution against the\nquantiles expected for the theoretical distribution.  A straight line\nimplies that the sample distribution matches the theoretical\ndistribution well.  Deviations (typically at the tails) imply a lack\nof match.  To help assess deviations from linearity, the\n`geom_qq_line`/`stat_qq_line` _function_ depicts the ideal match as a\nstraight line for comparison.\n\n<!-- the following generates the small thumbnail to use in the tab icon-->\n\n\n\n\n\n\n<!-- the following two plots generate the thumbnails to use in the gallery-->\n\n\n\n\n\n\n\n \n<details><summary>Show attributes</summary>\n\n| Parameter                                                              | `geom_qq`    | `stat_qq`    |\n|------------------------------------------------------------------------|--------------|--------------|\n| _aesthetics_                                                           |              |              |\n| **`sample`** - variable to map to the x-axis                           | ✔            | ✔            |\n| `group` - plot separate series without aesthetic differences           | ✔            | ✔            |\n| `alpha` - transparency                                                 | ✔            | ✔            |\n| `colour` - colour of the points/lines                                  | ✔            | ✔            |\n| `fill` - inner colour of points/shapes                                 | ✔            | ✔            |\n| `linetype` - type of lines used to construct points/lines              | ✔            | ✔            |\n| `size` - thickness of the line                                         | ✔            | ✔            |\n| `weight` - weightings of values                                        | ✔            | ✔            |\n|                                                                        |              |              |\n| _additional parameters_                                                |              |              |\n| `distribution` - function that calculates quantiles for a distribution | stats::qnorm | stats::qnorm |\n| `dparams` - additional parameters for the distribution                 | list()       | list()       |\n| `orientation` - which axis (x or y) to operate on                      | NA           | NA           |\n|                                                                        |              |              |\n| _Computed variables_                                                   |              |              |\n| `sample` - sample quantiles                                            | ✔            |              |\n| `theoretical` - theoretical quantiles                                  | ✔            |              |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>geom</th>\n<th align = 'left'>stat</th>\n<th align = 'left'>position</th>\n<th align = 'left'>Aesthetic parameters / Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>QQ plot</td>\n<td align = 'left'>`_qq`</td>\n<td align = 'left'>`_qq`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>sample<br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotQQ1-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diamonds, aes(sample = carat)) +\n    geom_qq() +\n    geom_qq_line()\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>QQ plot</td>\n<td align = 'left'>`_qq`</td>\n<td align = 'left'>`_qq`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>sample<br><br>this example will explore a Gamma theoretical distribution (rather than the default Gaussian).  When specifying an alternative distribution, it may be necessary to supply certain distribution parameters.  In this case, the appropriate shape parameter for the Gamma distribution is required.  This is first estimated via the `fitdistr()` _function_ from the `MASS` _package`.</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotQQ2-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshape <- MASS::fitdistr(diamonds$carat,\n                        densfun = \"gamma\")$estimate[\"shape\"]\nggplot(diamonds, aes(sample = carat)) +\n    geom_qq(distribution = stats::qgamma,\n            dparams = list(shape = shape)) +\n    geom_qq_line(distribution = stats::qgamma,\n                 dparams = list(shape = shape))\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'odd'>\n<td align = 'left'>QQ plot</td>\n<td align = 'left'>`_qq`</td>\n<td align = 'left'>`_qq`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>sample<br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotQQ3-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diamonds, aes(sample = carat, colour = cut)) +\n    geom_qq() +\n    geom_qq_line()\n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n\n### Bar<br>plots ![](05_grammar_of_graphics_files/figure-html/ggplotBar-s-1.png){class=\"thumb-s\" #Gbar-plots} \n\n`geom_bar` constructs barcharts. By default, the bins of each bar along with the associated bar heights are calculated by the `stats_count` function. The following list describes the mapping aesthetic properties associated with `geom_bar` and `stats_count`. The entries in bold are compulsory.\n\n<!-- the following generates the small thumbnail to use in the tab icon-->\n\n\n\n\n\n\n<!-- the following three plots generate the thumbnails to use in the gallery-->\n\n\n\n\n\n\n\n\n\n \n<details><summary>Show attributes</summary>\n\n\n| Parameter                                                    | `geom_bar` | `stat_count` |\n|--------------------------------------------------------------|------------|--------------|\n| _aesthetics_                                                 |            |              |\n| **`x`** or **`y`** - variable to map to the x/y-axis         | ✔          | ✔            |\n| `group` - plot separate series without aesthetic differences | ✔          | ✔            |\n| `alpha` - transparency                                       | ✔          | ✔            |\n| `colour` - colour of the points/lines                        | ✔          | ✔            |\n| `fill` - inner colour of points/shapes                       | ✔          | ✔            |\n| `linetype` - type of lines used to construct points/lines    | ✔          | ✔            |\n| `size` - thickness of the line                               | ✔          | ✔            |\n| `weight` - weightings of values                              | ✔          | ✔            |\n|                                                              |            |              |\n| _additional parameters_                                      |            |              |\n| `width` -  width of the bars                                 | NULL       | NULL         |\n| `orientation` - which axis (x or y) to operate on            | NA         | NA           |\n|                                                              |            |              |\n| _Computed variables_                                         |            |              |\n| `count` - number of points to bin                            | ✔          |              |\n| `prop` - groupwise proportion                                | ✔          |              |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>geom</th>\n<th align = 'left'>stat</th>\n<th align = 'left'>position</th>\n<th align = 'left'>Aesthetic parameters / Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>Bar plot</td>\n<td align = 'left'>`_bar`</td>\n<td align = 'left'>`_count`</td>\n<td align = 'left'>stack</td>\n<td align = 'left'>sample<br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotBar1-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diamonds, aes(x = cut)) +\n    geom_bar()\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>Stacked bar plot</td>\n<td align = 'left'>`_bar`</td>\n<td align = 'left'>`_count`</td>\n<td align = 'left'>stack</td>\n<td align = 'left'>sample<br><br>by default a _viridis_ colour blind safe palette is applied.</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotBar2-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diamonds, aes(x = cut, fill = clarity)) +\n    geom_bar()\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'odd'>\n<td align = 'left'>Conditional bar plot</td>\n<td align = 'left'>`_bar`</td>\n<td align = 'left'>`_count`</td>\n<td align = 'left'>dodge2</td>\n<td align = 'left'>sample<br><br>by default a _viridis_ colour blind safe palette is applied.</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotBar3-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diamonds, aes(x = cut, fill = clarity)) +\n    geom_bar(position = \"dodge2\")\n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n \n### Dot<br>plots ![](05_grammar_of_graphics_files/figure-html/ggplotDot-s-1.png){class=\"thumb-s\" #Gdot-plots}\n\n<!-- the following generates the small thumbnail to use in the tab icon-->\n\n\n\n\n\n\n<!-- the following two plots generate the thumbnails to use in the gallery-->\n\n\n\n\n\n\n\n \n`geom_dotplot` draws dotplots of continuous data after binning the\ndata.  This geom is unusual in that it does not have an associated\n`stat`.  Instead, it calls its own density function.  Dotplots are\nreally only useful for small datasets.  The reason for this is that\nthe counts in each bin are represented by circles (the size of which\nis determined by the bin width) and thus if the counts are high, the\nstack of circles will extend beyond the y-axis (unless the stack ratio\nis altered).  Moreover, the y-axis scale is meaningless.\n\nThe following list describes the mapping aesthetic properties\nassociated with `geom_dotplot`. The entries in bold are compulsory.\n\n<details><summary>Show attributes</summary>\n\n| Parameter                                                                  | `geom_histogram` |\n|----------------------------------------------------------------------------|------------------|\n| _aesthetics_                                                               |                  |\n| **`x`** - variable to map to the x-axis                                    | ✔                |\n| `group` - plot separate series without aesthetic differences               | ✔                |\n| `alpha` - transparency                                                     | ✔                |\n| `colour` - colour of the points/lines                                      | ✔                |\n| `fill` - inner colour of points/shapes                                     | ✔                |\n| `linetype` - type of lines used to construct points/lines                  | ✔                |\n| `size` - thickness of the line                                             | ✔                |\n| `weight` - weightings of values                                            | ✔                |\n|                                                                            |                  |\n| _additional parameters_                                                    |                  |\n| `binwidth` - (maximum) bin width                                           | NULL             |\n| `binaxis` - the axis to bin along                                          | \"x\"              |\n| `method` - method for binning                                              | \"dotdensity\"     |\n| `binpositions` - method for determining the position of dots               | \"bygroup\"        |\n| `stackdir` - which direction to stack dots                                 | \"up\"             |\n| `stackratio` - how close to stack dots                                     | 1                |\n| `dotsize` - diameter of dot relative to binwidth                           | 1                |\n| `stackgroups` - whether to stack dots across groups                        | FALSE            |\n| `origin` - origin of first bin                                             | NULL             |\n| `right` - should bin intervals be closed on the right (a, b] or not [a, b) | TRUE             |\n| `width` - when `binaxis` is \"y\", the spacing of dot stacks for dodging     | 0.9              |\n| `drop` - whether to remove bins with zero counts                           | FALSE            |\n|                                                                            |                  |\n| _Computed variables_                                                       |                  |\n| `count` - number of points in bin                                          | ✔                |\n| `density` - density of points in bin                                       | ✔                |\n| `ncount` - counts scaled to max of 1                                       | ✔                |\n| `ndensity` - density scaled to max of 1                                    | ✔                |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>geom</th>\n<th align = 'left'>stat</th>\n<th align = 'left'>position</th>\n<th align = 'left'>Aesthetic parameters / Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>dotplot layer</td>\n<td align = 'left'>`_dotplot`</td>\n<td align = 'left'></td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x or y<br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotDot1-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = uptake)) +\n    geom_dotplot()\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>dotplot layer</td>\n<td align = 'left'>`_dotplot`</td>\n<td align = 'left'></td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x or y<br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotDot2-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = uptake)) +\n    geom_dotplot(binwidth = 3)\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'odd'>\n<td align = 'left'>dotplot layer</td>\n<td align = 'left'>`_dotplot`</td>\n<td align = 'left'></td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x or y<br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotDot3-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = uptake, fill = Type)) +\n    geom_dotplot(stackgroups = TRUE,\n                 binpositions = 'all',\n                 binwidth=3, dotsize=1) \n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n### Scatterplot<br>matrix ![](05_grammar_of_graphics_files/figure-html/ggplotSPLOM-s-1.png){class=\"thumb-s\" #Gscatterplot-matrix}\n\nThe `ggpairs()` _function_ is not actually part of the `ggplot2`\n_package_.  Rather it is part of its own package (`GGally`).\nNevertheless, this graphic, in which all pairs of variables are\nplotted in a matrix of panels can be a very useful way to explore the\nindividual and relational characteristics of multiple variables\nsimultaneously.\n\n<!-- the following generates the small thumbnail to use in the tab icon-->\n\n\n\n\n\n\n<!-- the following plot generates the thumbnails to use in the gallery-->\n\n\n\n\n\n\n<details><summary>Show attributes</summary>\n\n| Parameter                                                                   | `geom_histogram`              |\n|-----------------------------------------------------------------------------|-------------------------------|\n| _aesthetics_                                                                |                               |\n| `group` - plot separate series without aesthetic differences                | ✔                             |\n| `alpha` - transparency                                                      | ✔                             |\n| `colour` - colour of the points/lines                                       | ✔                             |\n| `fill` - inner colour of points/shapes                                      | ✔                             |\n| `linetype` - type of lines used to construct points/lines                   | ✔                             |\n| `size` - thickness of the line                                              | ✔                             |\n| `weight` - weightings of values                                             | ✔                             |\n|                                                                             |                               |\n| _additional parameters_                                                     |                               |\n| `columns` - which columns to include                                        | 1:ncol(data)                  |\n| `title,xlab,ylab` - titles                                                  | NULL                          |\n| `upper,lower` - functions for plots to appear in off diagonal panels        | ...                           |\n| `diag` - function for plots to appear in diagonal panels                    | ...                           |\n| `axisLabels` - whether and how to display axis labels                       | c(\"show\", \"internal\", \"none\") |\n| `columnLabels` - label names to display                                     | colnames(data[columns])       |\n| `labeller` - facet labeller function                                        | \"label_value\"                 |\n| `switch` - which (if any) facet labels to switch position                   | NULL                          |\n| `showStrips` - whether to display all strips (panel banners)                | NULL                          |\n| `legend` - whether or position of legend                                    | NULL                          |\n| `cardinality_threshold` - max number of factor levels permitted             | 15                            |\n| `progress` - whether to show a progress bar while computing (if >15 panels) | NULL                          |\n| `proportions` - amount of area given to each plot                           | NULL                          |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>geom</th>\n<th align = 'left'>stat</th>\n<th align = 'left'>position</th>\n<th align = 'left'>Aesthetic parameters / Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>dotplot layer</td>\n<td align = 'left'>`_dotplot`</td>\n<td align = 'left'></td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x or y<br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotdotplot1-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggpairs(iris, colour = \"Species\", upper = list(continuous = \"density\",\n    combo = \"box\"), diag = list(continuous = \"density\"),\n    lower = list(continuous = \"smooth\"), axisLabels = \"show\")\n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n:::\n\n\n## Visualising trends \n\n::: {.panel-tabset}\n\n### Scatterplots<br><br> ![](05_grammar_of_graphics_files/figure-html/ggplotScatterplot-s-1.png){class=\"thumb-s\" #Gscatterplots}\n\n\n\n\n\n\n\n\n \n[see points](#Gpoints)\n\n\n### Line<br>plots ![](05_grammar_of_graphics_files/figure-html/ggplotLines-s-1.png){class=\"thumb-s\" #Gline-plots}\n\n`geom_line` draws lines joining coordinates. Typically the _stat_ used\nis `stat_identity` as we wish to use the values in two continuous\nvectors as the coordinates of each line segment.  `geom_line` differs\nfrom `geom_path` in that the former first orders the data according to\nthe x-axis.\n\n\n\n\n\n\n\n\n \n<details><summary>Show attributes</summary>\n\n| Parameter                                                     | `geom_line` |\n|---------------------------------------------------------------|-------------|\n| _aesthetics_                                                  |             |\n| **`x`** - variable to map to the x-axis                       | ✔           |\n| **`y`** - variable to map to the other axis                   | ✔           |\n| `group` - plot separate series without aesthetic differences  | ✔           |\n| `alpha` - transparency                                        | ✔           |\n| `colour` - colour of the points/lines                         | ✔           |\n| `fill` - inner colour of points/shapes                        | ✔           |\n| `linetype` - type of lines used to construct points/lines     | ✔           |\n| `size` - thickness of the line                                | ✔           |\n| `weight` - weightings of values                               | ✔           |\n|                                                               |             |\n| _additional parameters_                                       |             |\n|                                                               |             |\n| _Computed variables_                                          |             |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>geom</th>\n<th align = 'left'>stat</th>\n<th align = 'left'>position</th>\n<th align = 'left'>Aesthetic parameters / Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>line plot</td>\n<td align = 'left'>`_line`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br>scatterplot on only the first level of `Plant`.</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScatterplot1-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(filter(CO2, Plant == first(Plant))) +\n    geom_line(aes(x = conc, y = uptake)) \n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>line plot</td>\n<td align = 'left'>`_line`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br>scatterplot of each `Plant` level.</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScatterplot2-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_line(aes(group = Plant))\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'odd'>\n<td align = 'left'>line plot</td>\n<td align = 'left'>`_line`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br>scatterplot of each `Plant` level coloured separately.</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScatterplot3-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_line(aes(colour = Plant))\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>line plot</td>\n<td align = 'left'>`_line`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br>scatterplot of mean across all `Plant`s.</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScatterplot4-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_line(stat = \"summary\", fun = mean)\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'odd'>\n<td align = 'left'>line plot</td>\n<td align = 'left'>`_line`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br>scatterplot of mean across all `Plant`s.</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScatterplot6-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_line(stat = \"summary\", fun = mean, aes(color = Type))\n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n\n### Smoother<br>plots ![](05_grammar_of_graphics_files/figure-html/ggplotSmoother-s-1.png){class=\"thumb-s\" #Gsmoother-plots}\n\n`geom_smooth` draws smooths lines (and 95% confidence intervals)\nthrough data clouds. Typically the stat used is `stat_smooth` which in\nturn engages one of the available smoothing methods (e.g. `lm`, `glm`,\n`gam`, `loess` or `rlm`).\n\n\n\n\n\n\n\n\n\n<details><summary>Show attributes</summary>\n \n\n| Parameter                                                            | `geom_smooth` | `geom_smooth` |\n|----------------------------------------------------------------------|---------------|---------------|\n| _aesthetics_                                                         |               |               |\n| **`x`** - variable to map to the x-axis                              | ✔             | ✔             |\n| **`y`** - variable to map to the other axis                          | ✔             | ✔             |\n| `group` - plot separate series without aesthetic differences         | ✔             | ✔             |\n| `alpha` - transparency                                               | ✔             | ✔             |\n| `colour` - colour of the points/lines                                | ✔             | ✔             |\n| `fill` - inner colour of points/shapes                               | ✔             | ✔             |\n| `linetype` - type of lines used to construct points/lines            | ✔             | ✔             |\n| `size` - thickness of the line                                       | ✔             | ✔             |\n| `weight` - weightings of values                                      | ✔             | ✔             |\n|                                                                      |               |               |\n| _additional parameters_                                              |               |               |\n| `method` - smoothing method (modelling function)                     | NULL          | NULL          |\n| `formula` - formula to use in smoothing function                     | NULL          | NULL          |\n| `se` - whether to display confidence intervals                       | TRUE          | TRUE          |\n| `n` - number of points at which to evaluate the smoother             |               | 80            |\n| `span` - degree of smoothing for loess smoother                      |               | 0.75          |\n| `fullrange` - whether the fit should span full range (or just data)  |               | FALSE         |\n| `method.args` - additional arguments passed on to modelling function |               | list()        |\n|                                                                      |               |               |\n| _Computed variables_                                                 |               |               |\n| `y` or `x` - the predicted value                                     | ✔             |               |\n| `ymin` or `xmin` - lower confidence interval                         | ✔             |               |\n| `ymax` or `xmax` - upper confidence interval                         | ✔             |               |\n| `se` - standard error                                                | ✔             |               |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>geom</th>\n<th align = 'left'>stat</th>\n<th align = 'left'>position</th>\n<th align = 'left'>Aesthetic parameters / Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>line plot</td>\n<td align = 'left'>`_line`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br>scatterplot on only the first level of `Plant`.</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotSmoother1-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(filter(CO2, Plant == first(Plant))) +\n    geom_smooth(aes(x = conc, y = uptake)) \n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>line plot</td>\n<td align = 'left'>`_line`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br>scatterplot of each `Plant` level.</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotSmoother2-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_smooth(aes(colour = Type))\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'odd'>\n<td align = 'left'>line plot</td>\n<td align = 'left'>`_line`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br>scatterplot of each `Plant` level coloured separately.</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotSmoother3-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = BOD, aes(x = Time, y = demand)) +\n    geom_smooth(method = \"lm\", formula = \"y ~ x\")\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>line plot</td>\n<td align = 'left'>`_line`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br>scatterplot of each `Plant` level coloured separately.</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotSmoother4-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = BOD, aes(x = Time, y = demand)) +\n    geom_smooth(method = \"lm\", formula = \"y ~ x\")\n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n### Tiles<br><br> ![](05_grammar_of_graphics_files/figure-html/ggplotTiles-s-1.png){class=\"thumb-s\" #Gtiles}\n\n`geom_tile` constructs heat maps given x,y coordinates and a z value\nto associate with the fill of each tile. Note, the data must be a\ncomplete grid.\n\n\n\n\n\n\n\n\n\n<details><summary>Show attributes</summary>\n \n| Parameter                                                    | `geom_tile` |\n|--------------------------------------------------------------|-------------|\n| _aesthetics_                                                 |             |\n| **`x`** - variable to map to the x-axis                      | ✔           |\n| **`y`** - variable to map to the other axis                  | ✔           |\n| `group` - plot separate series without aesthetic differences | ✔           |\n| `alpha` - transparency                                       | ✔           |\n| `colour` - colour of the points/lines                        | ✔           |\n| `fill` - inner colour of points/shapes                       | ✔           |\n| `linetype` - type of lines used to construct points/lines    | ✔           |\n| `size` - thickness of the line                               | ✔           |\n| `weight` - weightings of values                              | ✔           |\n|                                                              |             |\n| _additional parameters_                                      |             |\n| `linejoin` - line join style                                 | \"mitre\"     |\n|                                                              |             |\n| _Computed variables_                                         |             |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>geom</th>\n<th align = 'left'>stat</th>\n<th align = 'left'>position</th>\n<th align = 'left'>Aesthetic parameters / Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>tile plot</td>\n<td align = 'left'>`_tile`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br>heatmap of 2d density.</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotTiles1-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(faithfuld, aes(y = eruptions, x = waiting)) +\n    geom_tile(aes(fill = density)) \n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n\n### Raster<br><br> ![](05_grammar_of_graphics_files/figure-html/ggplotRasters-s-1.png){class=\"thumb-s\" #Grasters}\n\n`geom_raster` is similar to `geom_tile` in that it constructs heat\nmaps given x,y coordinates and a z value to associate with the fill of\neach tile. However, unlike `geom_tile`, a full grid is not required as\n`geom_raster` is able to interpolate over the grid.  The interpolation\ncan also smooth out the grid surface. This interpolation does make\n`geom_raster` slower than `geom_tile`.\n\n\n\n\n\n\n\n\n\n<details><summary>Show attributes</summary>\n \n| Parameter                                                    | `geom_raster` |\n|--------------------------------------------------------------|---------------|\n| _aesthetics_                                                 |               |\n| **`x`** - variable to map to the x-axis                      | ✔             |\n| **`y`** - variable to map to the other axis                  | ✔             |\n| `group` - plot separate series without aesthetic differences | ✔             |\n| `alpha` - transparency                                       | ✔             |\n| `colour` - colour of the points/lines                        | ✔             |\n| `fill` - inner colour of points/shapes                       | ✔             |\n| `linetype` - type of lines used to construct points/lines    | ✔             |\n| `size` - thickness of the line                               | ✔             |\n| `weight` - weightings of values                              | ✔             |\n|                                                              |               |\n| _additional parameters_                                      |               |\n| `hjust` - line join style                                    | 0.5           |\n| `vjust` - line join style                                    | 0.5           |\n| `interpolate` - line join style                              | FALSE         |\n|                                                              |               |\n| _Computed variables_                                         |               |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>geom</th>\n<th align = 'left'>stat</th>\n<th align = 'left'>position</th>\n<th align = 'left'>Aesthetic parameters / Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>raster plot</td>\n<td align = 'left'>`_raster`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br>heatmap of 2d density.</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotRasters1-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(faithfuld, aes(y = eruptions, x = waiting)) +\n    geom_raster(aes(fill = density)) \n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n\n### Contours<br><br> ![](05_grammar_of_graphics_files/figure-html/ggplotContours-s-1.png){class=\"thumb-s\" #Gcontours}\n\n`geom_contour` constructs contour maps given x,y coordinates and a z\nvalue from which to calculate each contour.\n\n\n\n\n\n\n\n\n\n<details><summary>Show attributes</summary>\n \n| Parameter                                                    | `geom_contour` | `stat_contour` |\n|--------------------------------------------------------------|----------------|----------------|\n| _aesthetics_                                                 |                |                |\n| **`x`** - variable to map to the x-axis                      | ✔              | ✔              |\n| **`y`** - variable to map to the y axis                      | ✔              | ✔              |\n| **`z`** - variable to map to the z axis                      | ✔              | ✔              |\n| `group` - plot separate series without aesthetic differences | ✔              | ✔              |\n| `alpha` - transparency                                       | ✔              | ✔              |\n| `colour` - colour of the points/lines                        | ✔              | ✔              |\n| `fill` - inner colour of points/shapes                       | ✔              | ✔              |\n| `linetype` - type of lines used to construct points/lines    | ✔              | ✔              |\n| `size` - thickness of the line                               | ✔              | ✔              |\n| `weight` - weightings of values                              | ✔              | ✔              |\n|                                                              |                |                |\n| _additional parameters_                                      |                |                |\n| `bins` - number of contour bins                              | NULL           | NULL           |\n| `binwidth` - width of contour bins                           | NULL           | NULL           |\n| `breaks` - numer of contour bins (alternative to bins)       | NULL           | NULL           |\n| `lineend` - line end style                                   | \"butt\"         | \"butt\"         |\n| `linejoin` - line join style                                 | \"round\"        | \"round\"        |\n| `linemitre` - line mitre style                               | 10             | 10             |\n|                                                              |                |                |\n| _Computed variables_                                         |                |                |\n| `level` - bin boundaries                                     | ✔              |                |\n| `level_low, level_high, level_mid` - bin boundaries per band | ✔              |                |\n| `nlevel` - height of contour, scaled to max of 1             | ✔              |                |\n| `piece` - contour piece                                      | ✔              |                |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>geom</th>\n<th align = 'left'>stat</th>\n<th align = 'left'>position</th>\n<th align = 'left'>Aesthetic parameters / Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>contour plot</td>\n<td align = 'left'>`_contour`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br>contour plot of 2d density in relation to eruption and waiting times.</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotContours1-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(faithfuld, aes(y = eruptions, x = waiting)) +\n    geom_contour(aes(z = density)) \n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n\n### Filled<br>contour ![](05_grammar_of_graphics_files/figure-html/ggplotFilledContours-s-1.png){class=\"thumb-s\" #Gfilled-contour}\n\n`geom_contour` constructs contour maps given x,y coordinates and a z\nvalue from which to calculate each contour.\n\n\n\n\n\n\n\n\n\n<details><summary>Show attributes</summary>\n \n| Parameter                                                    | `geom_contour_filled` | `stat_contour_filled` |\n|--------------------------------------------------------------|-----------------------|-----------------------|\n| _aesthetics_                                                 |                       |                       |\n| **`x`** - variable to map to the x-axis                      | ✔                     | ✔                     |\n| **`y`** - variable to map to the y axis                      | ✔                     | ✔                     |\n| **`z`** - variable to map to the z axis                      | ✔                     | ✔                     |\n| `group` - plot separate series without aesthetic differences | ✔                     | ✔                     |\n| `alpha` - transparency                                       | ✔                     | ✔                     |\n| `colour` - colour of the points/lines                        | ✔                     | ✔                     |\n| `fill` - inner colour of points/shapes                       | ✔                     | ✔                     |\n| `linetype` - type of lines used to construct points/lines    | ✔                     | ✔                     |\n| `size` - thickness of the line                               | ✔                     | ✔                     |\n| `weight` - weightings of values                              | ✔                     | ✔                     |\n|                                                              |                       |                       |\n| _additional parameters_                                      |                       |                       |\n| `bins` - number of contour bins                              | NULL                  | NULL                  |\n| `binwidth` - width of contours                               | NULL                  | NULL                  |\n| `breaks` - sets contour breaks (alternative to bins)         | NULL                  | NULL                  |\n| `lineend` - line end style                                  | \"butt\"                | \"butt\"                |\n| `linejoin` - line join style                                 | \"round\"               | \"round\"               |\n| `linemitre` - line mitre style                                | 10                    | 10                    |\n|                                                              |                       |                       |\n| _Computed variables_                                         |                       |                       |\n| `level` - bin boundaries                                     | ✔                     |                       |\n| `nlevel` - height of filled_contour, scaled to max of 1      | ✔                     |                       |\n| `piece` - filled_contour piece                               | ✔                     |                       |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>geom</th>\n<th align = 'left'>stat</th>\n<th align = 'left'>position</th>\n<th align = 'left'>Aesthetic parameters / Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>filled_contour plot</td>\n<td align = 'left'>`_filled_contour`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br>filled contour plot of 2d density in relation to eruption and waiting times.</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotFilled_Contours1-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(faithfuld, aes(y = eruptions, x = waiting)) +\n    geom_contour_filled(aes(z = density)) \n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n:::\n\n\n## Visualising uncertainty \n\n::: {.panel-tabset}\n\n### Error<br>bars ![](05_grammar_of_graphics_files/figure-html/ggplotErrorbars-s-1.png){class=\"thumb-s\" #Gerror-bars}\n\n`geom_errorbar` draws error bars based on upper and lower levels of y\nassociated with each level of x.\n\n\n\n\n\n\n\n\n\n<details><summary>Show attributes</summary>\n \n| Parameter                                                    | `geom_errorbar` |\n|--------------------------------------------------------------|-----------------|\n| _aesthetics_                                                 |                 |\n| **`x`** - variable to map to the x-axis                      | ✔               |\n| **`y`** - variable to map to the y axis                      | ✔               |\n| `group` - plot separate series without aesthetic differences | ✔               |\n| `alpha` - transparency                                       | ✔               |\n| `colour` - colour of the points/lines                        | ✔               |\n| `fill` - inner colour of points/shapes                       | ✔               |\n| `linetype` - type of lines used to construct points/lines    | ✔               |\n| `size` - thickness of the line                               | ✔               |\n| `weight` - weightings of values                              | ✔               |\n|                                                              |                 |\n| _additional parameters_                                      |                 |\n| `width` - width of the caps on the bars                      | 1               |\n|                                                              |                 |\n| _Computed variables_                                         |                 |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>geom</th>\n<th align = 'left'>stat</th>\n<th align = 'left'>position</th>\n<th align = 'left'>Aesthetic parameters / Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>error bars</td>\n<td align = 'left'>`_errorbar`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotErrorbars1-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwarpbreaks.sum <- warpbreaks %>%\n    group_by(wool) %>%\n    summarise(mean_se(breaks))\nggplot(warpbreaks.sum, aes(y = y, x = wool, ymin = ymin, ymax = ymax)) +\n    geom_errorbar() \n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>error bars</td>\n<td align = 'left'>`_errorbar`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotErrorbars2-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwarpbreaks.sum <- warpbreaks %>%\n    group_by(wool) %>%\n    summarise(mean_se(breaks))\nggplot(warpbreaks.sum, aes(y = y, x = wool, ymin = ymin, ymax = ymax)) +\n    geom_errorbar(width = 0.25) \n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'odd'>\n<td align = 'left'>error bars</td>\n<td align = 'left'>`_errorbar`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotErrorbars3-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwarpbreaks.sum <- warpbreaks %>%\n    group_by(wool) %>%\n    summarise(mean_se(breaks))\nggplot(warpbreaks.sum, aes(y = y, x = wool, ymin = ymin, ymax = ymax)) +\n    geom_crossbar(width = 0.25) \n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>error bars</td>\n<td align = 'left'>`_errorbar`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotErrorbars4-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwarpbreaks.sum <- warpbreaks %>%\n    group_by(wool, tension) %>%\n    summarise(mean_se(breaks))\nggplot(warpbreaks.sum, aes(y = y, x = tension, ymin = ymin, ymax = ymax)) +\n    geom_errorbar(aes(colour = wool),\n                  position = position_dodge(width = 0.5),\n                  width = 0.25) \n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n\n### Line<br>ranges ![](05_grammar_of_graphics_files/figure-html/ggplotLineranges-s-1.png){class=\"thumb-s\" #Gline-ranges}\n\n`geom_lineranges` draws uncertainty bars based on upper and lower levels of y\nassociated with each level of x.\n\n\n\n\n\n\n\n\n\n<details><summary>Show attributes</summary>\n \n| Parameter                                                    | `geom_linerange` |\n|--------------------------------------------------------------|------------------|\n| _aesthetics_                                                 |                  |\n| **`x`** - variable to map to the x-axis                      | ✔                |\n| **`y`** - variable to map to the y axis                      | ✔                |\n| `group` - plot separate series without aesthetic differences | ✔                |\n| `alpha` - transparency                                       | ✔                |\n| `colour` - colour of the points/lines                        | ✔                |\n| `fill` - inner colour of points/shapes                       | ✔                |\n| `linetype` - type of lines used to construct points/lines    | ✔                |\n| `size` - thickness of the line                               | ✔                |\n| `weight` - weightings of values                              | ✔                |\n|                                                              |                  |\n| _additional parameters_                                      |                  |\n|                                                              |                  |\n| _Computed variables_                                         |                  |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>geom</th>\n<th align = 'left'>stat</th>\n<th align = 'left'>position</th>\n<th align = 'left'>Aesthetic parameters / Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>line range</td>\n<td align = 'left'>`_linerange`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotLineranges1-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwarpbreaks.sum <- warpbreaks %>%\n    group_by(wool) %>%\n    summarise(mean_se(breaks))\nggplot(warpbreaks.sum, aes(y = y, x = wool, ymin = ymin, ymax = ymax)) +\n    geom_linerange() \n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>line ranges</td>\n<td align = 'left'>`_lineranges`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotLineranges2-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwarpbreaks.sum <- warpbreaks %>%\n    group_by(wool, tension) %>%\n    summarise(mean_se(breaks))\nggplot(warpbreaks.sum, aes(y = y, x = tension, ymin = ymin, ymax = ymax)) +\n    geom_linerange(aes(colour = wool),\n                  position = position_dodge(width = 0.5)) \n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n### Point<br>ranges ![](05_grammar_of_graphics_files/figure-html/ggplotPointranges-s-1.png){class=\"thumb-s\" #Gpoint-ranges}\n\n`geom_lineranges` draws uncertainty bars based on upper and lower levels of y\nassociated with each level of x.\n\n\n\n\n\n\n\n\n\n<details><summary>Show attributes</summary>\n \n| Parameter                                                      | `geom_pointrange` |\n|----------------------------------------------------------------|-------------------|\n| _aesthetics_                                                   |                   |\n| **`x`** - variable to map to the x-axis                        | ✔                 |\n| **`y`** - variable to map to the y axis                        | ✔                 |\n| `group` - plot separate series without aesthetic differences   | ✔                 |\n| `alpha` - transparency                                         | ✔                 |\n| `colour` - colour of the points/lines                          | ✔                 |\n| `fill` - inner colour of points/shapes                         | ✔                 |\n| `linetype` - type of lines used to construct points/lines      | ✔                 |\n| `size` - thickness of the line                                 | ✔                 |\n| `weight` - weightings of values                                | ✔                 |\n|                                                                |                   |\n| _additional parameters_                                        |                   |\n| `flatten` - a multiplicative factor to increase the point size | 1                 |\n|                                                                |                   |\n| _Computed variables_                                           |                   |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>geom</th>\n<th align = 'left'>stat</th>\n<th align = 'left'>position</th>\n<th align = 'left'>Aesthetic parameters / Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>point range</td>\n<td align = 'left'>`_pointrange`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotPointranges1-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwarpbreaks.sum <- warpbreaks %>%\n    group_by(wool) %>%\n    summarise(mean_se(breaks))\nggplot(warpbreaks.sum, aes(y = y, x = wool, ymin = ymin, ymax = ymax)) +\n    geom_pointrange() \n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>point ranges</td>\n<td align = 'left'>`_pointranges`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotPointranges2-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwarpbreaks.sum <- warpbreaks %>%\n    group_by(wool) %>%\n    summarise(mean_se(breaks))\nggplot(warpbreaks.sum, aes(y = y, x = wool, ymin = ymin, ymax = ymax)) +\n    geom_pointrange(fatten = 5) \n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'odd'>\n<td align = 'left'>point ranges</td>\n<td align = 'left'>`_pointranges`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotPointranges3-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwarpbreaks.sum <- warpbreaks %>%\n    group_by(wool, tension) %>%\n    summarise(mean_se(breaks))\nggplot(warpbreaks.sum, aes(y = y, x = tension, ymin = ymin, ymax = ymax)) +\n    geom_pointrange(aes(colour = wool),\n                  position = position_dodge(width = 0.5)) \n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n### Ribbons<br><br> ![](05_grammar_of_graphics_files/figure-html/ggplotRibbons-s-1.png){class=\"thumb-s\" #Gribbons}\n\n`geom_ribbon` draws uncertainty envelopes based on upper and lower levels of y\nassociated with each level of x.\n\n\n\n\n\n\n  \n[see ribbons](#Gribbons)\n\n:::\n\n\n## Other features \n\n::: {.panel-tabset}\n\n### Straight<br>lines ![](05_grammar_of_graphics_files/figure-html/ggplotVline-s-1.png){class=\"thumb-s\" #Gstraight-lines}\n\n`geom_vline` and `geom_hline` draw vertical and horizontal lines respectively.  These are particularly useful for:\n\n- marking cross-hairs in ordination plots\n- providing extended guides along either axes.\n\n`geom_abline` is used for adding linear regression lines in the form\nof `y = bx + a` where `b` is the slope and `a` is the intercept (this\nis where the `ab` in `abline` comes from).\n\n\n\n\n\n\n\n\n\n<details><summary>Show attributes</summary>\n \n| Parameter                                                    | `geom_vline` | `geom_hline` | `geom_abline` |\n|--------------------------------------------------------------|--------------|--------------|---------------|\n| _aesthetics_                                                 |              |              |               |\n| **`xintercept`** - x-axis coordinate crossed by vline        | ✔            |              |               |\n| **`yintercept`** - y-axis coordinate crossed by hline        |              | ✔            |               |\n| **`intercept`** - y-axis coordinate crossed by abline        |              |              | ✔             |\n| **`slope`** - slope (gradient) of abline                     |              |              | ✔             |\n| `group` - plot separate series without aesthetic differences | ✔            |              |               |\n| `alpha` - transparency                                       | ✔            |              |               |\n| `colour` - colour of the points/lines                        | ✔            |              |               |\n| `fill` - inner colour of points/shapes                       | ✔            |              |               |\n| `linetype` - type of lines used to construct points/lines    | ✔            |              |               |\n| `size` - thickness of the line                               | ✔            |              |               |\n| `weight` - weightings of values                              | ✔            |              |               |\n|                                                              |              |              |               |\n| _additional parameters_                                      |              |              |               |\n|                                                              |              |              |               |\n| _Computed variables_                                         |              |              |               |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>geom</th>\n<th align = 'left'>stat</th>\n<th align = 'left'>position</th>\n<th align = 'left'>Aesthetic parameters / Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>straight lines</td>\n<td align = 'left'>`_vline`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotVline1-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(filter(CO2, Plant == first(Plant))) +\n    geom_vline(xintercept = 500, linetype = 'dashed') +\n    geom_point(aes(x = conc, y = uptake)) \n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>straight lines</td>\n<td align = 'left'>`_hline`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotVline2-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(filter(CO2, Plant == first(Plant))) +\n    geom_hline(yintercept = 25, linetype = 'dashed') +\n    geom_point(aes(x = conc, y = uptake)) \n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'odd'>\n<td align = 'left'>straight lines</td>\n<td align = 'left'>`_abline`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotVline3-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(filter(CO2, Plant == first(Plant))) +\n    geom_abline(slope = 0.01, intercept = 30, linetype = 'dashed') +\n    geom_point(aes(x = conc, y = uptake)) \n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n### Segments<br><br> ![](05_grammar_of_graphics_files/figure-html/ggplotSegment-s-1.png){class=\"thumb-s\" #Gstraight-segments}\n\n`geom_segment` draws segments (separate lines) joining pairs of\ncoordinates.  These can be useful to represent vectors (e.g. wind\nspeed and direction on a map) or movement, differences etc\n(particularly if given an arrow head).\n\n\n\n\n\n\n\n\n\n<details><summary>Show attributes</summary>\n \n| Parameter                                                    | `geom_segment` |\n|--------------------------------------------------------------|----------------|\n| _aesthetics_                                                 |                |\n| **`x`** - x-axis coordinates for the start of lines          | ✔              |\n| **`y`** - y-axis coordinates for the start of lines          | ✔              |\n| **`xend`** - x-axis coordinates for the end of lines         | ✔              |\n| **`yend`** - y-axis coordinates for the end of lines         | ✔              |\n| `group` - plot separate series without aesthetic differences | ✔              |\n| `alpha` - transparency                                       | ✔              |\n| `colour` - colour of the points/lines                        | ✔              |\n| `fill` - inner colour of points/shapes                       | ✔              |\n| `linetype` - type of lines used to construct points/lines    | ✔              |\n| `size` - thickness of the line                               | ✔              |\n| `weight` - weightings of values                              | ✔              |\n|                                                              |                |\n| _additional parameters_                                      |                |\n| `arrow` - specification of arrow heads                       | NULL           |\n| `arrow.fill` - fill colour of arrow head                     | NULL           |\n| `lineend` - style of line end                                | \"butt\"         |\n| `linejoin` - style of line join                              | \"round\"        |\n|                                                              |                |\n| _Computed variables_                                         |                |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>geom</th>\n<th align = 'left'>stat</th>\n<th align = 'left'>position</th>\n<th align = 'left'>Aesthetic parameters / Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>line segements</td>\n<td align = 'left'>`_segement`</td>\n<td align = 'left'>`_identity`</td>\n<td align = 'left'>identity</td>\n<td align = 'left'>x,y<br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotSegment1-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=5>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBOD.lm <- lm(demand ~ Time, data = BOD)\nBOD$fitted <- fitted(BOD.lm)\nBOD$resid <- resid(BOD.lm)\nggplot(BOD)+\n    geom_segment(aes(x=Time,y=demand, xend=Time,yend=fitted),\n                 arrow = arrow(length=unit(0.5, \"cm\"), ends = \"first\")) \n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n### Text<br><br> ![](05_grammar_of_graphics_files/figure-html/ggplotText-s-1.png){class=\"thumb-s\" #Gtext}\n\n[see text](#Gtext)\n\n:::\n\n\n# Coordinate system \n\nThe coordinate system controls the nature and scale of the axes.\n\n## Types of coordinate systems \n\n::: {.panel-tabset}\n\n### Cartesian<br>coordinates ![](05_grammar_of_graphics_files/figure-html/ggplotCoord-Cartesian-s-1.png){class=\"thumb-s\" #Gcartesian-coordinates}\n\n\n\n\n\n\n\n\n\n\n<details><summary>Show attributes</summary>\n \n| Parameter                                                                                                    | `geom_segment` |\n|--------------------------------------------------------------------------------------------------------------|----------------|\n| `xlim` - limits for the x axis                                                                               | NULL           |\n| `ylim` - limits for the y axis                                                                               | NULL           |\n| `expand` - whether to add a small expansion to the axes to ensure geoms and axes do not overlapp             | TRUE           |\n| `expand` - whether or not to provide a warning when the default coordinate system is being replaced          | FALSE          |\n| `clip` - whether or not to clip plotting to within the plotting margins (\"on\") or to extend into the margins | \"on\"           |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>coord</th>\n<th align = 'left'>Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>Cartesian coordinates</td>\n<td align = 'left'>`_cartesian`</td>\n<td align = 'left'><br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotCoord-Cartesian1-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = BOD, aes(x = Time, y = demand)) +\n    geom_line() +\n    coord_cartesian()\n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n### Polar<br>coordinates ![](05_grammar_of_graphics_files/figure-html/ggplotPolar-Polar-s-1.png){class=\"thumb-s\" #Gpolar-coordinates}\n\n\n\n\n\n\n\n\n\n\n<details><summary>Show attributes</summary>\n \n| Parameter                                                                                                    | `geom_segment` |\n|--------------------------------------------------------------------------------------------------------------|----------------|\n| `theta` - map angle to either 'x' or 'y'                                                                     | 'x'            |\n| `start` - offset (applied clockwise by default) from 12 o'clock in radians                                   | 0              |\n| `direction` - which direction ('clockwise': 1 or 'anticlockwise': -1)                                        | 1              |\n| `clip` - whether or not to clip plotting to within the plotting margins (\"on\") or to extend into the margins | \"on\"           |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>coord</th>\n<th align = 'left'>Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>Polar coordinates</td>\n<td align = 'left'>`_polar`</td>\n<td align = 'left'><br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotCoord-Polar1-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = BOD, aes(x = Time, y = demand)) +\n    geom_line() +\n    coord_polar()\n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n\n### Flip<br>coordinates ![](05_grammar_of_graphics_files/figure-html/ggplotFlip-Flip-s-1.png){class=\"thumb-s\" #Gflip-coordinates}\n\n\n\n\n\n\n\n\n\n\n<details><summary>Show attributes</summary>\n \n| Parameter                                                                                                    | `geom_segment` |\n|--------------------------------------------------------------------------------------------------------------|----------------|\n| `xlim` - limits for the x axis                                                                               | NULL           |\n| `ylim` - limits for the y axis                                                                               | NULL           |\n| `expand` - whether to add a small expansion to the axes to ensure geoms and axes do not overlapp             | TRUE           |\n| `expand` - whether or not to provide a warning when the default coordinate system is being replaced          | FALSE          |\n| `clip` - whether or not to clip plotting to within the plotting margins (\"on\") or to extend into the margins | \"on\"           |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>coord</th>\n<th align = 'left'>Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>Flip coordinates</td>\n<td align = 'left'>`_flip`</td>\n<td align = 'left'><br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotCoord-Flip1-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = BOD, aes(x = Time, y = demand)) +\n    geom_line() +\n    coord_flip()\n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n\n### Fixed<br>coordinates ![](05_grammar_of_graphics_files/figure-html/ggplotCoord-Fixed-s-1.png){class=\"thumb-s\" #Gfixed-coordinates}\n\n\n\n\n\n\n\n\n\n\n<details><summary>Show attributes</summary>\n\n| Parameter                                                                                                    | `geom_segment` |\n|--------------------------------------------------------------------------------------------------------------|----------------|\n| `ratio` - aspect ratio (y/x)                                                                               | 1           |\n| `xlim` - limits for the x axis                                                                               | NULL           |\n| `ylim` - limits for the y axis                                                                               | NULL           |\n| `expand` - whether to add a small expansion to the axes to ensure geoms and axes do not overlapp             | TRUE           |\n| `expand` - whether or not to provide a warning when the default coordinate system is being replaced          | FALSE          |\n| `clip` - whether or not to clip plotting to within the plotting margins (\"on\") or to extend into the margins | \"on\"           |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>coord</th>\n<th align = 'left'>Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>Fixed coordinates</td>\n<td align = 'left'>`_fixed`</td>\n<td align = 'left'><br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotCoord-Fixed1-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = BOD, aes(x = Time, y = demand)) +\n    geom_line() +\n    coord_fixed()\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>Fixed ratio of coordinates</td>\n<td align = 'left'>`_fixed`</td>\n<td align = 'left'><br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotCoord-Fixed2-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = BOD, aes(x = Time, y = demand)) +\n    geom_line() +\n    coord_fixed(ratio = 0.5)\n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n### Transformed<br>coordinates ![](05_grammar_of_graphics_files/figure-html/ggplotCoord-Trans-s-1.png){class=\"thumb-s\" #Gtransformed-coordinates}\n\n\n\n\n\n\n\n\n\n\n<details><summary>Show attributes</summary>\n \n| Parameter                                                                                                    | `geom_segment` |\n|--------------------------------------------------------------------------------------------------------------|----------------|\n| `x` - the transformation to apply to the x-axis                                                              | \"identity\"     |\n| `y` - the transformation to apply to the y-axis                                                              | \"identity\"     |\n| `xlim` - limits for the x axis                                                                               | NULL           |\n| `ylim` - limits for the y axis                                                                               | NULL           |\n| `expand` - whether or not to provide a warning when the default coordinate system is being replaced          | FALSE          |\n| `clip` - whether or not to clip plotting to within the plotting margins (\"on\") or to extend into the margins | \"on\"           |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>coord</th>\n<th align = 'left'>Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>Transformed coordinates</td>\n<td align = 'left'>`_trans`</td>\n<td align = 'left'><br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotCoord-Trans1-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = BOD, aes(x = Time, y = demand)) +\n    geom_line() +\n    coord_trans(x = \"log10\")\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>Trans ratio of coordinates</td>\n<td align = 'left'>`_trans`</td>\n<td align = 'left'><br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotCoord-Trans2-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = BOD, aes(x = Time, y = demand)) +\n    geom_line() +\n    coord_trans(x = scales::exp_trans(2))\n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n\n:::\n\n## Altering axes scales via the coordinate system \n\n### Zooming\nModifying scales with _coords\\__ affects the zoom on the graph. That is,\nit defines the extent and nature of the axes coordinates. By contrast,\naltering limits via _scale\\__ routines will alter the scope of data\nincluded in a manner analogous to operating on a subset of the data.\n\nTo illustrate this, lets produce a linear smoother for the _BOD_ data.\nTo help us appreciate the differences between `coords_` and `scale_`\nwhen altering one axis (_x_ in this case), we will ensure that all\neach plot has the same range of the other axis (_y_) and that the\naspect ratio for the axes are all the same.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- ggplot(data = BOD, aes(x = Time, y = demand)) +\n    geom_smooth(method = \"lm\") +\n    geom_point()\n```\n:::\n\n\n\n<details><summary>Show default plot</summary>\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng + coord_fixed(ratio = 0.1, ylim = c(-5, 35))\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotCoord-CoordAxes1-1.png){width=240}\n:::\n:::\n\n\n</details>\n\n:::: {style='display:flex; place-content: space-between; flex-wrap: wrap;'}\n\n::: {style='width:49%;'}\n\n**Scale via _coords_ scale**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng + coord_fixed(ratio = 0.1,\n                ylim = c(-5, 35),\n                xlim = c(2, 6))\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotCoord-CoordAxes2-1.png){width=240}\n:::\n:::\n\n\n\n:::\n\n::: {style='width:49%;'}\n\n**Scale via _scale_ scale**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng + coord_fixed(ratio = 0.1,\n                ylim = c(-5, 35)) +\n    scale_x_continuous(limits = c(2, 6))\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotCoord-CoordAxes3-1.png){width=240}\n:::\n:::\n\n\n \n:::\n\n::::\n\nNotice that the left hand figure (that restricts the x-axis scale)\nsimply zooms in on the plot thereby cutting some of the data off.  By\ncontrast, `scale_` (right hand figure) removes data that are outside\nthe range and thus also alters the output of the smoother (linear\nmodel).\n\n\n### Geom re-scaling\n\nIn addition to altering the zoom of the axes, axes (coordinate system)\nscales can be transformed to other scales via the `coord_trans`\n_function_. Such transformations of the coordinate system take place\n**after** statistics have been calculated and _geoms_\nderived. Therefore the shape of geoms are altered.\n\nTo illustrate the difference between `coord_trans` and `scale_`, lets\ncreate a fabricated data set of 50 points in which _y_ is an\nexponential function of _x_ (with noise).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\nn<-50\ndat <- data.frame(x = exp((1:n+rnorm(n,sd=2))/10), y = 1:n+rnorm(n,sd=2))\n\ng <- ggplot(data = dat, aes(x = x, y = y))\n```\n:::\n\n\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Linear scales</th>\n<th align = 'left'>`coord_trans`</th>\n<th align = 'left'>`scales_`</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotCoord-Trans1a-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n::: {.cell class='plain'}\n\n```{.r .cell-code}\ng + geom_point()\n```\n:::\n\n\n</td>\n<td align = 'left'>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotCoord-Trans1b-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n::: {.cell class='plain'}\n\n```{.r .cell-code}\ng + geom_point() +\n    coord_trans(x=\"log10\")\n```\n:::\n\n\n</td>\n<td align = 'left'>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotCoord-Trans1c-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n::: {.cell class='plain'}\n\n```{.r .cell-code}\ng + geom_point() +\n    scale_x_continuous(trans=\"log10\")\n```\n:::\n\n\n</td>\n\n</tr>\n<tr class = 'odd'>\n<td align = 'left'>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotCoord-Trans2a-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n::: {.cell class='plain'}\n\n```{.r .cell-code}\ng + geom_point() +\n    geom_smooth(method=\"lm\")\n```\n:::\n\n\n</td>\n<td align = 'left'>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotCoord-Trans2b-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n::: {.cell class='plain'}\n\n```{.r .cell-code}\ng + geom_point() +\n    geom_smooth(method=\"lm\") +\n    coord_trans(x=\"log10\") \n```\n:::\n\n\n</td>\n<td align = 'left'>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotCoord-Trans2c-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n::: {.cell class='plain'}\n\n```{.r .cell-code}\ng + geom_point() +\n    geom_smooth(method=\"lm\") +\n    scale_x_continuous(trans=\"log10\") \n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\nIn the above, the `log10` _transformer_ function was applied to either\nthe coordinates or the axes scales.  More information about this and\nother transformer functions is provided in the [scales\nsection](#scales).\n\n\n# Scales \n\nThe idea of scales is that you present the plotting engine with data\nor characteristics in one scale and use the various `scale_`\n_functions_ to convert those data into another scale. In the grammar\nof graphics, scales are synonymous for units of data, colors, shapes,\nsizes etc of plotting features and the axes and guides (legends)\nprovide a visual cue for what the scales are. For example:\n\n- you might include data that ranges from 10 to 20 units, yet you wish\n  to produce a plot that uses a restricted range of 12-16.\n- you have presented grouped data (data with multiple trends) and\n  instructed the graphing engine to assign different colour codes to\n  each trend. You can then define a colour scale to adjust the exact\n  colours rendered.\n- similarly, you might have indicated how plotting symbol shape and\n  size are to be distinguished in your data set. You can then assign\n  scales that define the exact shapes and symbol sizes rendered.\n\nTechnically, scales determine how attributes of the data are mapped\ninto aesthetic geom properties. The majority of geom's (geometric\nobjects) have the following aesthetic properties:\n\n\n| Parameter                                                                        |\n|----------------------------------------------------------------------------------|\n| `x` - the x position (coordinates) of the geom                                   |\n| `y` - the y position (coordinates) of the geom                                   |\n| `size` - size of the geom (e.g. the size of points, thickness of lines)          |\n| `shape` - the shape of the geom                                                  |\n| `linetype` - the type of line to use for the geom's outline (solid, dashed, etc) |\n| `colour` - the colour of the geom's outline                                      |\n| `fill` - the colour of the geom's fill (inside colour)                           |\n| `alpha` - the transparency of the geom (0 = transparent, through to 1 = opaque)  |\n\n: {.primary .bordered .sm .paramsTable}\n\nIn turn, each of these properties are mapped to a scale - the defaults\nof which are automatically selected according to what is appropriate\nfor the sort of data. For example, if the variable mapped to an axis\nis continuous, the a continuous scale is the default.  If the variable\nmapped to an axis is categorical, then a discrete scale is the\ndefault.  And so on...  \n\nThe following table describes the typical scale associated with each\nof the major variable types:\n\n| Variable type               | Scale                                                        |\n|-----------------------------+--------------------------------------------------------------|\n| `numeric` - continuous data | `_continuous` - data mapped onto a continuous scale          |\n| `numeric` - continuous data | `_log10` - data mapped onto a log (base 10) continuous scale |\n| `numeric` - continuous data | `_sqrt` - data mapped onto a sqrt continuous scale           |\n| `numeric` - continuous data | `_reverse` - data mapped onto a reverse continuous scale     |\n| `numeric` - continuous data | `_binned` - data mapped onto a binned (discretized) scale    |\n|                             |                                                              |\n| `factor` - categorical data | `_discrete` - data mapped onto a categorical scale           |\n|                             |                                                              |\n| `date` - date data          | `_date` - data mapped according to dates                     |\n| `POSIXct` - date/time data  | `_datetime` - data mapped according to date/time             |\n| `POSIXct` - date/time data  | `_time` - data mapped according to date/time                 |\n|                             |                                                              |\n\n: {.primary .bordered .sm .paramsTable}\n\nSome properties, such as colour also have additional scales that are\nspecific to the characteristic. The scales effect not only the\ncharacteristics of the geoms, they also effect the guides (legends)\nthat accompany the geoms.\n\nScaling functions comprise the prefix `scale_`, followed by the name\nof an aesthetic property and suffixed by the type of scale. Hence a\nfunction to manually define a colour scale would be\n`scale_colour_manual`.\n\n- `name` - a title applied to the scale. In the case of scales for x\n  and y (the x,y coordinate of _geoms_), the name is the axis\n  title. For all other scales, the name is the title of the guide\n  (legend).\n  <details><summary>Explore</summary>\n  \n  <table class='table table-primary table-bordered table-sm paramsTable'>\n  <thead>\n  <tr class = 'header'>\n  <th align = 'left'>Feature</th>\n  <th align = 'left'>Notes</th>\n  <th align = 'left'>Example plot</th>\n  </tr>\n  </thead>\n  <tbody>\n  <tr class = 'odd'>\n  <td align = 'left'>Simple axis title</td>\n  <td align = 'left'>Provide a more meaningful axis title for the x-axis</td>\n  <td align = 'left' rowspan = 2>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotExampleScaleName1-1.png){width=288 class=\"thumb-L\"}\n  :::\n  :::\n\n\n  </td>\n  </tr>\n  <tr>\n  <td align = 'left' font-size=2em colspan=2>\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  ggplot(data = CO2, aes(x = conc, y = uptake)) +\n      geom_point() +\n      scale_x_continuous(name = \"CO₂ concentration\") \n  ```\n  :::\n\n\n  </td>\n  </tr>\n  <tr class = 'even'>\n  <td align = 'left'>Math in axis title</td>\n  <td align = 'left'>\n  More elaborate titles that include special characters and mathematical\n  notations are supported via `expression()`'s.  For more info on\n  plotting mathematical expressions, run `demo(plotmath)`.\n  \n  Note the use of the `~` character everywhere that a space would\n  appear.  That is because an _expression_ cannot have spaces.\n  </td>\n  <td align = 'left' rowspan = 2>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotExampleScaleName2-1.png){width=288 class=\"thumb-L\"}\n  :::\n  :::\n\n\n  </td>\n  </tr>\n  <tr>\n  <td align = 'left' font-size=2em colspan=2>\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  ggplot(data = CO2, aes(x = conc, y = uptake)) +\n      geom_point() +\n      scale_x_continuous(\n          name = expression(Ambient~CO[2]~concentration~(mg/l))\n      ) \n  ```\n  :::\n\n\n  </td>\n  </tr>\n  <tr class = 'odd'>\n  <td align = 'left'>Math in axis title</td>\n  <td align = 'left'>\n  Alternatively, _expressions_ can be built up by _pasting_ objects\n  together.\n  </td>\n  <td align = 'left' rowspan = 2>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotExampleScaleName3-1.png){width=288 class=\"thumb-L\"}\n  :::\n  :::\n\n\n  </td>\n  </tr>\n  <tr>\n  <td align = 'left' font-size=2em colspan=2>\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  ggplot(data = CO2, aes(x = conc, y = uptake)) +\n      geom_point() +\n      scale_x_continuous(\n          name = expression(paste(\"Ambient \", CO[2],\n                                  \" concentration (mg/l)\"))) \n  ```\n  :::\n\n\n  </td>\n  </tr>\n  </tbody>\n  </table>\n  </details>\n\n- `breaks` - the increments on the guide. For `scale_x_` and\n  `scale_y_`, breaks are the axis tick locations. For all other\n  scales, the breaks indicate the increments of the characteristic in\n  the legend (e.g. how many point shapes are featured in the legend).\n  <details><summary>Explore</summary>\n\n  By default, _pretty_ breaks will be used for continuous (including\n  dates) data.  It is possible to define your own breaks.\n\n  <table class='table table-primary table-bordered table-sm paramsTable'>\n  <thead>\n  <tr class = 'header'>\n  <th align = 'left'>Feature</th>\n  <th align = 'left'>Notes</th>\n  <th align = 'left'>Example plot</th>\n  </tr>\n  </thead>\n  <tbody>\n  <tr class = 'odd'>\n  <td align = 'left'>User defined breaks</td>\n  <td align = 'left'>Provide a vector of breaks (tick marks)</td>\n  <td align = 'left' rowspan = 2>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotExampleScaleBreaks1-1.png){width=288 class=\"thumb-L\"}\n  :::\n  :::\n\n\n  </td>\n  </tr>\n  <tr>\n  <td align = 'left' font-size=2em colspan=2>\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  ggplot(data = CO2, aes(x = conc, y = uptake)) +\n      geom_point() +\n      scale_x_continuous(breaks = c(200, 500, 800)) \n  ```\n  :::\n\n\n  </td>\n  </tr>\n  <tr class = 'even'>\n  <td align = 'left'>User defined breaks</td>\n  <td align = 'left'>Provide a more useful breaks for log scale axes</td>\n  <td align = 'left' rowspan = 2>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotExampleScaleBreaks2-1.png){width=288 class=\"thumb-L\"}\n  :::\n  :::\n\n\n  </td>\n  </tr>\n  <tr>\n  <td align = 'left' font-size=2em colspan=2>\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  ggplot(data = CO2, aes(x = conc, y = uptake)) +\n      geom_point() +\n      scale_x_log10(breaks = as.vector(c(1,2,5,10) %o% 10^(-1:2)))\n  ```\n  :::\n\n\n  </td>\n  </tr>\n  <tr class = 'odd'>\n  <td align = 'left'>User defined breaks</td>\n  <td align = 'left'>\n  Alternatively, you can apply other functions that define breaks.\n  There are some useful break functions in the `scales` _package_\n  </td>\n  <td align = 'left' rowspan = 2>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotExampleScaleBreaks3-1.png){width=288 class=\"thumb-L\"}\n  :::\n  :::\n\n\n  </td>\n  </tr>\n  <tr>\n  <td align = 'left' font-size=2em colspan=2>\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  ggplot(data = CO2, aes(x = conc, y = uptake)) +\n      geom_point() +\n      scale_x_continuous(breaks = scales::breaks_log(n=7))\n  ```\n  :::\n\n\n  </td>\n  </tr>\n  <tr class = 'even'>\n  <td align = 'left'>User defined breaks</td>\n  <td align = 'left'>\n  For discrete data, breaks should return a vector of values that\n  correspond to categorical levels (in the order of the levels).  In\n  the following example, only one of the Treatment groups has a\n  tick mark.\n  </td>\n  <td align = 'left' rowspan = 2>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotExampleScaleBreaks4-1.png){width=288 class=\"thumb-L\"}\n  :::\n  :::\n\n\n  </td>\n  </tr>\n  <tr>\n  <td align = 'left' font-size=2em colspan=2>\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  ggplot(data = CO2, aes(x = Treatment, y = uptake)) +\n      geom_point() +\n      scale_x_discrete(breaks = c(\"chilled\"))\n  ```\n  :::\n\n\n  </td>\n  </tr>\n  </tbody>\n  </table>\n  </details>\n\n- `labels` - the labels given to the increments on the guide. For\n  `scale_x_` and `scale_y_`, labels are the axis tick labels. For all\n  other scales, the labels are the labels given to items in the\n  legend.\n  <details><summary>Explore</summary>\n\n  The `scales` _package_ has a number of label formatting _functions_.\n  These all start with `label_`\n  \n  <table class='table table-primary table-bordered table-sm paramsTable'>\n  <thead>\n  <tr class = 'header'>\n  <th align = 'left'>Feature</th>\n  <th align = 'left'>Notes</th>\n  <th align = 'left'>Example plot</th>\n  </tr>\n  </thead>\n  <tbody>\n  <tr class = 'odd'>\n  <td align = 'left'>User defined tick labels</td>\n  <td align = 'left'>Format x-axis tick labels to include comma's every multiple of 1000\n  </td>\n  <td align = 'left' rowspan = 2>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotExampleScaleLabels1-1.png){width=288 class=\"thumb-L\"}\n  :::\n  :::\n\n\n  </td>\n  </tr>\n  <tr>\n  <td align = 'left' font-size=2em colspan=2>\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  ggplot(data = CO2, aes(x = conc, y = uptake)) +\n      geom_point() +\n      scale_x_continuous(labels = scales::label_comma()) \n  ```\n  :::\n\n\n  </td>\n  </tr>\n  <tr class = 'odd'>\n  <td align = 'left'>User defined tick labels</td>\n  <td align = 'left'>\n  Format y-axis labels to include percentage sign.\n  By default, the `label_percent` _function_ also assumes that the data mapped to the scale are proportions (that is the values are between 0 and 1).  So by default, the function will multiple (`scale`) the values by 100.  In this case, since the y-axis values are all between 0 and 100, we indicate that they should be multiplied by 1 (e.g. no change).\n  </td>\n  <td align = 'left' rowspan = 2>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotExampleScaleLabels2-1.png){width=288 class=\"thumb-L\"}\n  :::\n  :::\n\n\n  </td>\n  </tr>\n  <tr>\n  <td align = 'left' font-size=2em colspan=2>\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  ggplot(data = CO2, aes(x = conc, y = uptake)) +\n      geom_point() +\n      scale_y_continuous(labels = scales::label_percent(scale=1)) \n  ```\n  :::\n\n\n  </td>\n  </tr>\n  <tr class = 'even'>\n  <td align = 'left'>User defined tick labels</td>\n  <td align = 'left'>\n  \n  Format y-axis labels to include percentage sign.  On this occasion\n  we will derive a new variable to map to the y-axis.  These values\n  are in the range from 0 to 1, so we do want to `scale` (multiply)\n  by 100.  We will also adjust the `accuracy` (number to round to).\n  In this case, we will indicate that it should round to the nearest 1\n  (whole number).\n\n  </td>\n  <td align = 'left' rowspan = 2>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotExampleScaleLabels3-1.png){width=288 class=\"thumb-L\"}\n  :::\n  :::\n\n\n  </td>\n  </tr>\n  <tr>\n  <td align = 'left' font-size=2em colspan=2>\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  CO2 <- CO2 %>% mutate(percent = uptake/100)\n  ggplot(data = CO2, aes(x = conc, y = percent)) +\n      geom_point() +\n      scale_y_continuous(labels = scales::label_percent(accuracy = 1)) \n  ```\n  :::\n\n\n  </td>\n  </tr>\n  <tr class = 'odd'>\n  <td align = 'left'>User defined tick labels</td>\n  <td align = 'left'>\n  Format the x-axis ticks to append '.spp' after each `Type` and make\n  each tick mark italic.  To apply any mathematical notation\n  (including italic formatting) we must use a label formatter that\n  parses expressions.\n  We will define the format of the labels first in the dataset.\n  </td>\n  <td align = 'left' rowspan = 2>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotExampleScaleLabels4-1.png){width=288 class=\"thumb-L\"}\n  :::\n  :::\n\n\n  </td>\n  </tr>\n  <tr>\n  <td align = 'left' font-size=2em colspan=2>\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  CO2 <- CO2 %>% mutate(species = paste0('italic(', Type, '.spp)'))\n  ggplot(data = CO2, aes(x = species, y = uptake)) +\n      geom_point() +\n      scale_x_discrete(labels = scales::label_parse()) \n  ```\n  :::\n\n\n  </td>\n  </tr>\n  <tr class = 'even'>\n  <td align = 'left'>User defined tick labels</td>\n  <td align = 'left'>\n  Or, we can define the formatting on the fly,\n  </td>\n  <td align = 'left' rowspan = 2>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotExampleScaleLabels5-1.png){width=288 class=\"thumb-L\"}\n  :::\n  :::\n\n\n  </td>\n  </tr>\n  <tr>\n  <td align = 'left' font-size=2em colspan=2>\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  ggplot(data = CO2, aes(x = Type, y = uptake)) +\n      geom_point() +\n      scale_x_discrete(\n          labels = scales::label_math(italic(paste(.x, '.spp', sep='')))\n      )\n  ```\n  :::\n\n\n  </td>\n  </tr>\n  </tbody>\n  </table>\n  \n  </details>\n\n- `limits` - the span/range of data represented in the scale. Note, if\n  the range is inside the range of the data, the data are sub-setted.\n  <details><summary>Explore</summary>\n\n  <table class='table table-primary table-bordered table-sm paramsTable'>\n  <thead>\n  <tr class = 'header'>\n  <th align = 'left'>Feature</th>\n  <th align = 'left'>Notes</th>\n  <th align = 'left'>Example plot</th>\n  </tr>\n  </thead>\n  <tbody>\n  <tr class = 'odd'>\n  <td align = 'left'>Range of the scale</td>\n  <td align = 'left'>Extend the range of the x-axis\n  </td>\n  <td align = 'left' rowspan = 2>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotExampleScaleLimits1-1.png){width=288 class=\"thumb-L\"}\n  :::\n  :::\n\n\n  </td>\n  </tr>\n  <tr>\n  <td align = 'left' font-size=2em colspan=2>\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  ggplot(data = CO2, aes(x = conc, y = uptake)) +\n      geom_point() +\n      scale_x_continuous(limits = c(0, 2000)) \n  ```\n  :::\n\n\n  </td>\n  </tr>\n  <tr class = 'even'>\n  <td align = 'left'>Range of the scale</td>\n  <td align = 'left'>Extend the range represented by a colour bar\n  </td>\n  <td align = 'left' rowspan = 2>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotExampleScaleLimits2-1.png){width=288 class=\"thumb-L\"}\n  :::\n  :::\n\n\n  </td>\n  </tr>\n  <tr>\n  <td align = 'left' font-size=2em colspan=2>\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  ggplot(data = CO2, aes(x = conc, y = uptake)) +\n      geom_point(aes(colour=uptake)) +\n      scale_colour_continuous(limits = c(0,60)) \n  ```\n  :::\n\n\n  </td>\n  </tr>\n  <tr class = 'odd'>\n  <td align = 'left'>Range of the scale</td>\n  <td align = 'left'>\n  \n  This can also include categorical data - in this case, we are adding\n  an additional category.  Although this category does not appear in\n  the data, it may appear in other data for which you are producing\n  similar plots and you wish to maintain the same legends and colour\n  palettes.\n  \n  </td>\n  <td align = 'left' rowspan = 2>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotExampleScaleLimits3-1.png){width=288 class=\"thumb-L\"}\n  :::\n  :::\n\n\n  </td>\n  </tr>\n  <tr>\n  <td align = 'left' font-size=2em colspan=2>\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  ggplot(data = CO2, aes(x = Type, y = uptake)) +\n      geom_violin(aes(fill=Treatment)) +\n      scale_fill_discrete(limits = c('nonchilled','chilled','heated')) \n  ```\n  :::\n\n\n  </td>\n  </tr>\n  </tbody>\n  </table>\n\n  </details>\n\n- `trans` - scale transformations applied - obviously this is only\n  relevant to scales that are associated with continuous data.\n\n  <details><summary>Explore</summary>\n\n  <table class='table table-primary table-bordered table-sm paramsTable'>\n  <thead>\n  <tr class = 'header'>\n  <th align = 'left'>Feature</th>\n  <th align = 'left'>Notes</th>\n  <th align = 'left'>Example plot</th>\n  </tr>\n  </thead>\n  <tbody>\n  <tr class = 'odd'>\n  <td align = 'left'>Log (base 10) scale</td>\n  <td align = 'left'>Apply a log (base 10) transformation of the x-axis \n  </td>\n  <td align = 'left' rowspan = 2>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotExampleScaleTrans1-1.png){width=288 class=\"thumb-L\"}\n  :::\n  :::\n\n\n  </td>\n  </tr>\n  <tr>\n  <td align = 'left' font-size=2em colspan=2>\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  ggplot(data = CO2, aes(x = conc, y = uptake)) +\n      geom_point() +\n      scale_x_continuous(trans = \"log10\") \n  ```\n  :::\n\n\n  </td>\n  </tr>\n  <tr class = 'even'>\n  <td align = 'left'>Square-root scale</td>\n  <td align = 'left'>Apply a square-root transformation of the x-axis \n  </td>\n  <td align = 'left' rowspan = 2>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotExampleScaleTrans2-1.png){width=288 class=\"thumb-L\"}\n  :::\n  :::\n\n\n  </td>\n  </tr>\n  <tr>\n  <td align = 'left' font-size=2em colspan=2>\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  ggplot(data = CO2, aes(x = conc, y = uptake)) +\n      geom_point() +\n      scale_x_continuous(trans = \"sqrt\") \n  ```\n  :::\n\n\n  </td>\n  </tr>\n  <tr class = 'odd'>\n  <td align = 'left'>Log (base 2) scale</td>\n  <td align = 'left'>\n  \n  Apply a log (base 2) transformation of the x-axis\n  The `scales` _package_ has a set of functions to achieve common\n  transformation.\n  \n  </td>\n  <td align = 'left' rowspan = 2>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotExampleScaleTrans3-1.png){width=288 class=\"thumb-L\"}\n  :::\n  :::\n\n\n  </td>\n  </tr>\n  <tr>\n  <td align = 'left' font-size=2em colspan=2>\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  ggplot(data = CO2, aes(x = conc, y = uptake)) +\n      geom_point() +\n      scale_x_continuous(trans = scales::log10_trans()) \n  ```\n  :::\n\n\n  </td>\n  </tr>\n  <tr class = 'even'>\n  <td align = 'left'>Log (base 2) scale</td>\n  <td align = 'left'>\n  \n  There is also a general _log_ transform that allows you to indicate\n  the logarithmic base.  When using the `log_trans` _function_, it is\n  a good idea to also use a related function to control the position\n  of tick mark breaks.\n\n  </td>\n  <td align = 'left' rowspan = 2>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotExampleScaleTrans4-1.png){width=288 class=\"thumb-L\"}\n  :::\n  :::\n\n\n  </td>\n  </tr>\n  <tr>\n  <td align = 'left' font-size=2em colspan=2>\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  ggplot(data = CO2, aes(x = conc, y = uptake)) +\n      geom_point() +\n      scale_x_continuous(trans = scales::log_trans(base = 2),\n                         breaks = scales::log_breaks(base = 2)) \n  ```\n  :::\n\n\n  </td>\n  </tr>\n  <tr class = 'odd'>\n  <td align = 'left'>Log (base 2) scale</td>\n  <td align = 'left'>\n  \n  If you wish to apply a logarithmic scale transform, yet also include\n  a tickmark at 0, then the `psuedo_log_trans` is a very useful\n  function.\n  \n  </td>\n  <td align = 'left' rowspan = 2>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotExampleScaleTrans5-1.png){width=288 class=\"thumb-L\"}\n  :::\n  :::\n\n\n  </td>\n  </tr>\n  <tr>\n  <td align = 'left' font-size=2em colspan=2>\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  ggplot(data = CO2, aes(x = conc, y = uptake)) +\n      geom_point() +\n      scale_x_continuous(trans = scales::pseudo_log_trans(),\n                         limits = c(0, 1500)) \n  ```\n  :::\n\n\n  </td>\n  </tr>\n  </tbody>\n  </table>\n  </details>\n\n- `guide` - a function used to create/modify the associated guide (axes or legend).\n\n  <details><summary>Explore</summary>\n\n  <table class='table table-primary table-bordered table-sm paramsTable'>\n  <thead>\n  <tr class = 'header'>\n  <th align = 'left'>Feature</th>\n  <th align = 'left'>Notes</th>\n  <th align = 'left'>Example plot</th>\n  </tr>\n  </thead>\n  <tbody>\n  <tr class = 'odd'>\n  <td align = 'left'>Remove guide</td>\n  <td align = 'left'>\n  \n  Scale the size of the points according to a continuous variable, yet\n  remove the associated legend.\n  \n  </td>\n  <td align = 'left' rowspan = 2>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotExampleScaleGuide1-1.png){width=288 class=\"thumb-L\"}\n  :::\n  :::\n\n\n  </td>\n  </tr>\n  <tr>\n  <td align = 'left' font-size=2em colspan=2>\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  ggplot(data = CO2, aes(x = conc, y = uptake)) +\n      geom_point(aes(size = uptake)) +\n      scale_size(guide = NULL)\n  ```\n  :::\n\n\n  </td>\n  </tr>\n  <tr class = 'even'>\n  <td align = 'left'>Override aethetics\n  </td>\n  <td align = 'left'>\n  \n  Colour the points according to a categorical variable (`Type`), but\n  increase the size of the points in the legend to make them more\n  obvious.\n  \n  </td>\n  <td align = 'left' rowspan = 2>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotExampleScaleGuide3-1.png){width=288 class=\"thumb-L\"}\n  :::\n  :::\n\n\n  </td>\n  </tr>\n  <tr>\n  <td align = 'left' font-size=2em colspan=2>\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  ggplot(data = CO2, aes(x = conc, y = uptake)) +\n      geom_point(aes(colour = Type)) +\n      scale_colour_discrete(\n          guide = guide_legend(override.aes = list(size = 5))\n      )\n  ```\n  :::\n\n\n  </td>\n  </tr>\n  </tbody>\n  </table>\n  </details>\n\n::: {.panel-tabset}\n\n## Axes<br><br> ![](05_grammar_of_graphics_files/figure-html/ggplotScale-Axes-s-1.png){class=\"thumb-s\" #Gaxes}\n\n\n\n\n\n\n\n\n\n\n<details><summary>Show attributes</summary>\n \n| Parameter                                                           |\n|---------------------------------------------------------------------|\n| _All_                                                               |\n| `position` - axis position ('left', 'right, 'top', 'bottom')        |\n| `sec.axis` - secondary axis                                         |\n|                                                                     |\n| _\\_date_, _\\_datetime_                                              |\n| `date_breaks` - distance between breaks (in date units)             |\n| `date_labels` - formatting for labels                               |\n| `date_minor_breaks` - distance between minor breaks (in date units) |\n| `timezone` - timezeone to use when displaying date/datetime         |\n|                                                                     |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>scale</th>\n<th align = 'left'>Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>Linear scaling</td>\n<td align = 'left'>`_continuous`</td>\n<td align = 'left'><br><br></td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScale_Axes1-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_point() +\n    scale_x_continuous()\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>Add a secondary y-axis</td>\n<td align = 'left'>`_continuous`</td>\n<td align = 'left'>\n\nAdd a secondary y-axis and alter its scale.  Note, by design, `ggplot`\nonly permits secondary axes that are derived from the primary axis\n(are pure re-scale) - it is not possible (without unsupported effort)\nto represent an additional variable.\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScale_Axes2-1.png){width=288 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_point() +\n    scale_y_continuous(\n        name = expression(Uptake~(mu*mol/m^3)),\n        sec.axis = sec_axis(\n            name = expression(Uptake~(mg/m^3)),\n            trans = ~ .*44/1000)\n    )\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'odd'>\n<td align = 'left'>Add a secondary y-axis</td>\n<td align = 'left'>`_continuous`</td>\n<td align = 'left'>Add a secondary y-axis, except put the derived axis on the left side and the standard axis on the right\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScale_Axes3-1.png){width=288 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_point() +\n    scale_y_continuous(\n        name = expression(Uptake~(mu*mol/m^3)),\n        position = \"right\",\n        sec.axis = sec_axis(\n            name = expression(Uptake~(mg/m^3)),\n            trans = ~ .*44/1000)\n    )\n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n## Size<br><br> ![](05_grammar_of_graphics_files/figure-html/ggplotScale-Size-s-1.png){class=\"thumb-s\" #Gsize}\n\nThe `scale_size_` scales control the size of geoms (such as the size of points).\n\n\n\n\n\n\n\n\n\n<details><summary>Show attributes</summary>\n \n| Parameter                                       | `_size` | `_size_area` | `_size_binned` |\n|-------------------------------------------------|---------|--------------|----------------|\n| `range` - range (min, max) of symbol sizes      | c(1, 6) |              | c(1,6)         |\n| `max_size` - maximum size of symbols            |         | 6            |                |\n| `n.breaks` - approximate number of major breaks |         |              | NULL           |\n| `nice.breaks` - whether to use nice breaks      |         |              | TRUE           |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>scale</th>\n<th align = 'left'>Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>Scale size</td>\n<td align = 'left'>`_size`</td>\n<td align = 'left'>Scale the size according to a continuous variable.  The size of the symbols will be proportional to the value in the variable and the guide (legend) will provide an indication of the symbol sizes correspondingto a set of values. </td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScale_Size1-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_point(aes(size = uptake)) +\n    scale_size()\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>Scale size</td>\n<td align = 'left'>`_size`</td>\n<td align = 'left'>Scale the size according to a continuous variable</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScale_Size2-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_point(aes(size = uptake)) +\n    scale_size(range = c(0.5,3))\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'odd'>\n<td align = 'left'>Scale size</td>\n<td align = 'left'>`_size_binned`</td>\n<td align = 'left'>Scale the size according to a continuous variable that has been binned.  In this case, as there are five bins, the symbols will be of one of five sizes (rather than a continuum).</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScale_Size3-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_point(aes(size = uptake)) +\n    scale_size_binned()\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>Scale size</td>\n<td align = 'left'>`_size_discrete`</td>\n<td align = 'left'>Scale the size according to the levels of a categorical variable </td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScale_Size4-1.png){width=240 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-size=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_point(aes(size = Type)) +\n    scale_size_discrete()\n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n## Shape<br><br> ![](05_grammar_of_graphics_files/figure-html/ggplotScale-Shape-s-1.png){class=\"thumb-s\" #Gshape}\n\nThe `scale_shape_` scales control the shape of geoms (such as the\nshape of the plotting point)\n\n\n\n\n\n\n\n\n\n<details><summary>Show attributes</summary>\n \n| Parameter                                                               | `_shape` | `_shape_binned` |\n|-------------------------------------------------------------------------|----------|-----------------|\n| `solid` - whether the plotting symbols should be solid (TRUE) or hollow | TRUE     | TRUE            |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>scale</th>\n<th align = 'left'>Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>Scale shape</td>\n<td align = 'left'>`_shape`</td>\n<td align = 'left'>\n\nUse hollow shapes.\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScale_Shape1-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_point(aes(shape = Type)) +\n    scale_shape(solid = FALSE)\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>Scale shape</td>\n<td align = 'left'>`_shape_manual`</td>\n<td align = 'left'>\n\nManually defined the symbol shapes.\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScale_Shape2-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_point(aes(shape = Type)) +\n    scale_shape_manual(values = c(16, 21))\n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n## Linetype<br><br> ![](05_grammar_of_graphics_files/figure-html/ggplotScale-Linetype-s-1.png){class=\"thumb-s\" #Glinetype}\n\nThe `scale_linetype_` scales control the linetype of geoms. \n\n\n\n\n\n\n\n\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>scale</th>\n<th align = 'left'>Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>Scale line type</td>\n<td align = 'left'>`_linetype`</td>\n<td align = 'left'>\n\nManually define the line types and alter the associated legend labels.\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScale_Linetype1-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_smooth(aes(linetype = Treatment)) +\n    scale_linetype_manual(name = \"Temperature\",\n                       values = c('solid', 'dotted'),\n                       labels = c('Chilled', 'Non-chilled'))\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>Scale line type</td>\n<td align = 'left'>`_linetype`</td>\n<td align = 'left'>\n\nManually define the line types and alter the associated legend labels\nand remove the ribbon from the legend.\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScale_Linetype2-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_smooth(aes(linetype = Treatment)) +\n    scale_linetype_manual(name = \"Temperature\",\n                       values = c('solid', 'dotted'),\n                       labels = c('Chilled', 'Non-chilled'),\n                       guide = guide_legend(override.aes = list(fill = NA))\n                       )\n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n## Colour<br>fill ![](05_grammar_of_graphics_files/figure-html/ggplotScale-Color-s-1.png){class=\"thumb-s\" #colour-fillA}\n\n\n\n\n\n\n  \n_Colour_ (or color) is used to represent the colour of lines and solid\nsymbols (e.g. the outer color of shapes).  By contrast, _fill_ is used\nto represent the filling (inner) colour of shapes.\n\nColors can be specified by either:\n\n- a name of one of the 657 named colors\n  <details><summary>Color names</summary>\n  \n  The names of all the available colors can be obtained via:\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  colors()\n  ```\n  :::\n\n\n  \n  Below is a visual representation of those colours and their names\n  (although you are going to need exceptional eye sight to read the\n  names ;)).\n  \n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotScale_ColorG-1.png){width=650px height=650px}\n  :::\n  :::\n\n\n\n  </details>\n\n- hexedecimal codes (e.g. `#FF0000` is 'red').  This can also be an\n  eight digit code in which case the last two digits represent alpha\n  (e.g. `#FF000050` is 50% transparent red).\n- RGB color codes\n- a colour palette\n  <details><summary>Palettes</summary>\n\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  colorspace::hcl_palettes(plot = TRUE, n = 5)\n  ```\n  \n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/unnamed-chunk-2-1.png){width=750px}\n  :::\n  \n  ```{.r .cell-code}\n  RColorBrewer::display.brewer.all()\n  ```\n  \n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/unnamed-chunk-2-2.png){width=750px}\n  :::\n  :::\n\n\n  </details>\n\n<details><summary>Show attributes</summary>\n \n| Parameter                                                  | default       | default      |\n|------------------------------------------------------------|---------------|--------------|\n|                                                            | `_continuous` | `_binned`    |\n| `type` - the type of colour scale                          | 'gradient'    |              |\n| ('gradient', 'viridis')                                    |               |              |\n|                                                            |               |              |\n|                                                            | `_gradient`   | `gradient2`  |\n| `low` - colour of low end of gradient                      | '#132B43'     | muted(\"red\") |\n| `high` - colour of high end of gradient                    | '#56B1F7'     | muted(\"blue\" |\n| `space` - colour space                                     | 'Lab'         | 'Lab'        |\n| `mid` - colour of mid point in gradient                    |               | 'white'      |\n| `midpoint` - data value associated with middle of gradient |               | 0            |\n|                                                            |               |              |\n|                                                            | `_gradientn`  |              |\n| `colours` - vector of colours                              |               |              |\n| `values` - position associated with eaah colour            |               |              |\n|                                                            |               |              |\n|                                                            | `_brewer`     | `_distiller` |\n| `type` - type of color scale ('div', 'seq' or 'qual')      | 'seq'         | 'seq'        |\n| `palette` - name or number of colorbrewer palette          | 1             | 1            |\n| `direction` - order of colours from the palette            | 1             | -1           |\n|                                                            |               |              |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>scale</th>\n<th align = 'left'>Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>Scale colour type</td>\n<td align = 'left'>`_colour_gradient`</td>\n<td align = 'left'>\n\nManually define a colour scale that gradually transitions from red to blue.\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScale_Colour1-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_point(aes(colour = uptake)) +\n    scale_colour_gradient(low = 'red', high = 'blue')\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>Scale colour type</td>\n<td align = 'left'>`_colour_gradient2`</td>\n<td align = 'left'>\n\nManually define a colour scale that gradually transitions from red to blue via a white middle.\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScale_Colour2-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_point(aes(colour = uptake)) +\n    scale_colour_gradient2(low = 'red', mid = \"white\", high = 'blue',\n                           midpoint = 25)\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'odd'>\n<td align = 'left'>Scale colour type</td>\n<td align = 'left'>`_colour_gradientn`</td>\n<td align = 'left'>\n\nManually define a colour scale that gradually transitions along a pre-defined colour palette.\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScale_Colour3-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_point(aes(colour = uptake)) +\n    scale_colour_gradientn(colours = terrain.colors(12))\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>Scale colour type</td>\n<td align = 'left'>`_colour_distiller`</td>\n<td align = 'left'>\n\nManually define a colour scale that gradually transitions according to a colorbrewer palette on a **continuous** variable.\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScale_Colour4-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_point(aes(colour = uptake)) +\n    scale_colour_distiller(palette = 'Reds')\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'odd'>\n<td align = 'left'>Scale colour type</td>\n<td align = 'left'>`_color_viridis_c`</td>\n<td align = 'left'>\n\nManually define a colour scale that gradually transitions according to a Viridis colourblind safe palette.\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScale_Colour5-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_point(aes(colour = uptake)) +\n    scale_color_viridis_c(option = \"D\")\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>Scale colour type</td>\n<td align = 'left'>`_color_brewer`</td>\n<td align = 'left'>\n\nManually define a colour scale that uses the 'Divergent' (div) `RdYlGr`(palette 2) colorBrewer palette on a **categorical** variable.\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScale_Colour6-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_point(aes(colour = interaction(Treatment, Type))) +\n    scale_color_brewer(type = 'div', palette = 2)\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'odd'>\n<td align = 'left'>Scale colour type</td>\n<td align = 'left'>`_color_distiller`</td>\n<td align = 'left'>\n\nApply an interpolated colorbrewer scale 'Oranges' sequential scale (reverse order).\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScale_Colour7-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_point(aes(colour = uptake)) +\n    scale_color_distiller(type = 'seq', palette = 'Oranges', direction = -1)\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>Scale colour type</td>\n<td align = 'left'>`_color_fermenter`</td>\n<td align = 'left'>\n\nApply an interpolated colorbrewer scale 'Oranges' sequential scale (reverse order) and binned.\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScale_Colour8-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_point(aes(colour = uptake)) +\n    scale_color_fermenter(type = 'seq', palette = 'Oranges', direction = -1)\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'odd'>\n<td align = 'left'>Scale colour type</td>\n<td align = 'left'>`_color_gradientn`</td>\n<td align = 'left'>\n\nApply a user-defined color palette\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScale_Colour9-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_palette = colorRampPalette(colors=c('red','green','blue'))\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_point(aes(colour = uptake)) +\n    scale_color_gradientn(colours = my_palette(5))\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>Scale colour type</td>\n<td align = 'left'>`_color_hue`</td>\n<td align = 'left'>\n\nApply a hue palette to categorical data.\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScale_Colour10-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_point(aes(colour = interaction(Treatment, Type))) +\n    scale_color_hue(l=80, c=130)\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'odd'>\n<td align = 'left'>Scale colour type</td>\n<td align = 'left'>`_colour_grey`</td>\n<td align = 'left'>\n\nApply a hue palette to categorical data.\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScale_Colour11-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_point(aes(colour = interaction(Treatment, Type))) +\n    scale_colour_grey(start = 0.2, end = 0.8)\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>Scale colour type</td>\n<td align = 'left'>`_colour_manual`</td>\n<td align = 'left'>\n\nManually set the colours for a categorical variable.  One of the colours is a named colour, the other is a hex code.\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScale_Colour12-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_point(aes(colour = Type)) +\n    scale_colour_manual(breaks = c('Mississippi','Quebec'),\n                        values = c('red', '#00AA00'))\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'odd'>\n<td align = 'left'>Scale colour type</td>\n<td align = 'left'>`_colour_identity`</td>\n<td align = 'left'>\n\nManually set the colours for a categorical variable.  One of the colours is a named colour, the other is a hex code.\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScale_Colour13-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCO2 <- CO2 %>%\n    mutate(cUptake = cut(uptake,\n                         breaks = c(0,15,30,46),\n                         labels = c(\"red\", \"#00AA00\", 1)))\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_point(aes(colour = cUptake)) +\n    scale_colour_identity(labels = c('Low', 'Medium', 'High'),\n                          guide = 'legend')\n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n## Alpha<br><br> ![](05_grammar_of_graphics_files/figure-html/ggplotScale-Alpha-s-1.png){class=\"thumb-s\" #alpha-fillA}\n\n\n\n\n\n\n\n  \n_alpha_ is used to represent the opacity of lines and solid\nsymbols. An _alpha_ value of 0 is transparent and an _alpha_ value of\n1 is fully opaque.\n\n<details><summary>Show attributes</summary>\n \n| Parameter                              | default  |\n|----------------------------------------+----------|\n| `range` - output range of alpha values | c(0.1,1) |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>scale</th>\n<th align = 'left'>Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>Scale alpha type</td>\n<td align = 'left'>`_alpha_continuous`</td>\n<td align = 'left'>\n\nManually define a narrower alpha scale.\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScale_Alpha1-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_point(aes(alpha = uptake)) +\n    scale_alpha_continuous(range = c(0.5, 1))\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>Scale alpha type</td>\n<td align = 'left'>`_alpha_discrete`</td>\n<td align = 'left'>\n\nAlpha (transparency) determined by categorical variable(s).\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScale_Alpha2-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_point(aes(alpha = interaction(Treatment, Type))) +\n    scale_alpha_discrete()\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'odd'>\n<td align = 'left'>Scale alpha type</td>\n<td align = 'left'>`_alpha_manual`</td>\n<td align = 'left'>\n\nAlpha (transparency) determined manually for a categorical variable(s).\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScale_Alpha3-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCO2 <- CO2 %>%\n    mutate(cUptake = cut(uptake,\n                         breaks = c(0,15,30,46),\n                         labels = c(\"red\", \"#00AA00\", 1)))\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_point(aes(alpha = cUptake)) +\n    scale_alpha_manual(values = c(0.3, 0.6, 0.95))\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>Scale alpha type</td>\n<td align = 'left'>`_alpha_identity`</td>\n<td align = 'left'>\n\nAlpha (transparency) determined manually for a categorical variable(s).\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotScale_Alpha4-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCO2 <- CO2 %>%\n    mutate(cUptake = cut(uptake,\n                         breaks = c(0,15,30,46),\n                         labels = c(0.3, 0.6, 0.95)),\n           cUptake = as.numeric(as.character(cUptake)))\nggplot(data = CO2, aes(x = conc, y = uptake)) +\n    geom_point(aes(alpha = cUptake)) +\n    scale_alpha_identity()\n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\n:::\n\n\n# Facets (panels) \n\nFaceting splits the data up into a matrix of panels on the basis of\none or more categorical vectors. Since facets display subsets of the\ndata, they are very useful for examining trends in hierarchical\ndesigns.  There are two faceting function, that reflect two\nalternative approaches:\n\n- `facet_wrap(~cell)` - creates a set of panels based on a factor and\n  wraps the panels into a 2-d matrix. cell represents a categorical\n  vector or set of categorical vectors\n- `facet_wrap(row~column)` - creates a set of panels based on a factor\n  and wraps the panels into a 2-d matrix. row and column represents\n  the categorical vectors used to define the rows and columns of the\n  matrix respectively\n\nWrapped and gridded facets share a number of parameters:\n\n- **`facet`** - variables defining rows/columns of the grid.  This can\n  be either a formula or vector. **Note, this is not deprecated for\n  `facet_grid`**\n- `nrow` - number of grid rows\n- `ncol` - number of grid columns\n- `scales` - one of \"fixed\" (default, axes the same across all\n  panels), \"free\" (axes unique per panel), \"free_x\" (x-axes free),\n  \"free-y\" (y-axes free)\n\n  <details><summary>Explore</summary>\n  \n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  g <- ggplot(data = CO2, aes(x = conc, y = uptake)) +\n      geom_point()\n  ```\n  :::\n\n\n  \n  <table class='table table-primary table-bordered table-sm paramsTable'>\n  <thead>\n  <tr class = 'header'>\n  <th align = 'left'>Fixed axes scales</th>\n  <th align = 'left'>Free axes scales</th>\n  </tr>\n  </thead>\n  <tbody>\n  <tr class = 'odd'>\n  <td align = 'left'>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotStrip-scales1a-1.png){width=480 class=\"thumb-L\" style=\"width:250px;height:250px;\"}\n  :::\n  :::\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  g + facet_wrap(~Plant, scales='fixed')\n  ```\n  :::\n\n\n  </td>\n  <td align = 'left'>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotStrip-scales1b-1.png){width=480 class=\"thumb-L\" style=\"width:250px;height:250px;\"}\n  :::\n  :::\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  g + facet_wrap(~Plant, scales='free')\n  ```\n  :::\n\n\n  </td>\n  </tr>\n  </tbody>\n  </table>\n  \n  </details>\n  \n- `as.table` - if TRUE (default), arranged from top left to bottom right, otherwise, from bottom left to top right\n- `drop` - whether to drop factor combinations that lack data (default TRUE)\n- `shrink` - whether to shrink axes scales to match applied statistics (TRUE, default) or raw data (FALSE)\n- `labeller` - a function that determines the format of facet (strip) labels (default, 'label_value')\n  \n  <details><summary>Explore</summary>\n  \n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  g <- ggplot(data = CO2, aes(x = conc, y = uptake)) +\n      geom_point()\n  ```\n  :::\n\n\n  \n  <table class='table table-primary table-bordered table-sm paramsTable'>\n  <thead>\n  <tr class = 'header'>\n  <th align = 'left'>Default labelling</th>\n  <th align = 'left'>Append variable name to labels</th>\n  </tr>\n  </thead>\n  <tbody>\n  <tr class = 'odd'>\n  <td align = 'left'>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotStrip-labeller1a-1.png){width=480 class=\"thumb-L\" style=\"width:250px;height:250px;\"}\n  :::\n  :::\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  g + facet_wrap(~Plant,\n                 labeller = 'label_value')\n  ```\n  :::\n\n\n  </td>\n  <td align = 'left'>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotStrip-labeller1b-1.png){width=480 class=\"thumb-L\" style=\"width:250px;height:250px;\"}\n  :::\n  :::\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  g + facet_wrap(~Plant,\n                 labeller = 'label_both')\n  ```\n  :::\n\n\n  </td>\n  </tr>\n  <tr class = 'header'>\n  <th align = 'left'>Wrap long labels</th>\n  <th align = 'left'>Add special characters/formatting to labels</th>\n  </tr>\n  <tr class = 'odd'>\n  <td align = 'left'>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotStrip-labeller1c-1.png){width=480 class=\"thumb-L\" style=\"width:250px;height:250px;\"}\n  :::\n  :::\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  CO2 <- CO2 %>%\n      mutate(Species = paste0('Plant from ',\n                              Type))\n  g <- ggplot(data = CO2,\n         aes(x = conc, y = uptake)) +\n      geom_point()\n  g + facet_wrap(~Species,\n         labeller = label_wrap_gen(5))\n  ```\n  :::\n\n\n  </td>\n  <td align = 'left'>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotStrip-labeller1d-1.png){width=480 class=\"thumb-L\" style=\"width:250px;height:250px;\"}\n  :::\n  :::\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  CO2 <- CO2 %>%\n      mutate(species = paste0('italic(', Type,\n                              '.spp)'))\n  g <- ggplot(data = CO2,\n              aes(x = conc, y = uptake)) +\n      geom_point()\n  g + facet_wrap(~species,\n                 labeller = 'label_parsed')\n  ```\n  :::\n\n\n  </td>\n  </tr>\n  </tbody>\n  </table>\n  \n  </details>\n\n- `switch` - alternative positions for the panel strips ('x': move top labels to bottom, 'y': move right labels to left, 'both': move both top and right labels to bottom and left) \n- `dir` - direction in which to wrap panels ('h': horizontally', 'v': vertically)\n\n  <details><summary>Explore</summary>\n  \n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  g <- ggplot(data = CO2, aes(x = conc, y = uptake)) +\n      geom_point()\n  ```\n  :::\n\n\n  \n  <table class='table table-primary table-bordered table-sm paramsTable'>\n  <thead>\n  <tr class = 'header'>\n  <th align = 'left'>Wrap panels horizontally</th>\n  <th align = 'left'>Wrap panels vertically</th>\n  </tr>\n  </thead>\n  <tbody>\n  <tr class = 'odd'>\n  <td align = 'left'>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotStrip-direction1a-1.png){width=480 class=\"thumb-L\" style=\"width:250px;height:250px;\"}\n  :::\n  :::\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  g + facet_wrap(~Plant)\n  ```\n  :::\n\n\n  </td>\n  <td align = 'left'>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotStrip-direction1b-1.png){width=480 class=\"thumb-L\" style=\"width:250px;height:250px;\"}\n  :::\n  :::\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  g + facet_wrap(~Plant, dir = 'v')\n  ```\n  :::\n\n\n  </td>\n  </tbody>\n  </table>\n  \n  </details>\n  \n- `strip.position` - position of the panel label ('top','bottom', 'left', 'right')\n\n  <details><summary>Explore</summary>\n  \n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  g <- ggplot(data = CO2, aes(x = conc, y = uptake)) +\n      geom_point()\n  ```\n  :::\n\n\n  \n  <table class='table table-primary table-bordered table-sm paramsTable'>\n  <thead>\n  <tr class = 'header'>\n  <th align = 'left'>Strip labels on top</th>\n  <th align = 'left'>Strip labels on right</th>\n  </tr>\n  </thead>\n  <tbody>\n  <tr class = 'odd'>\n  <td align = 'left'>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotStrip-position1a-1.png){width=480 class=\"thumb-L\" style=\"width:250px;height:250px;\"}\n  :::\n  :::\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  g + facet_wrap(~Plant)\n  ```\n  :::\n\n\n  </td>\n  <td align = 'left'>\n\n\n  ::: {.cell}\n  ::: {.cell-output-display}\n  ![](05_grammar_of_graphics_files/figure-html/ggplotStrip-position1b-1.png){width=480 class=\"thumb-L\" style=\"width:250px;height:250px;\"}\n  :::\n  :::\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  g + facet_wrap(~Plant, strip.position = 'right')\n  ```\n  :::\n\n\n  </td>\n  </body>\n  </table>\n  \n  </details>\n \n::: {.panel-tabset}\n\n## Facet wrap ![](05_grammar_of_graphics_files/figure-html/ggplotFacet-wrap-s-1.png){class=\"thumb-s\" style=\"width:80px; height:80px;\" #facet-wrapA}\n\n\n\n\n\n\n  \n<details><summary>Show attributes</summary>\n \n| Parameter                                                                        | default |\n|----------------------------------------------------------------------------------|---------|\n| `nrow` - number of grid rows                                                     | NULL    |\n| `ncol` - number of grid columns                                                  | NULL    |\n| `dir` - direction in which to wrap panels ('h': horizontally', 'v': vertically)  | 'h'     |\n| `strip.position` - position of the panel label ('top','bottom', 'left', 'right') | 'top'   |\n|                                                                                  |         |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>facet</th>\n<th align = 'left'>Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>Facet wrap</td>\n<td align = 'left'>`_wrap`</td>\n<td align = 'left'>\n\nMatrix of panels split by a single categorical vector\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotFacet_wrap1-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(CO2, aes(y=uptake, x=conc)) +\n  geom_smooth() +\n  geom_point() +\n  facet_wrap(~Plant)\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>Facet wrap</td>\n<td align = 'left'>`_wrap`</td>\n<td align = 'left'>\n\nMatrix of panels split by a single categorical vector and wrap the panels vertically\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotFacet_wrap4-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(CO2, aes(y=uptake, x=conc)) +\n  geom_smooth() +\n  geom_point() +\n  facet_wrap(~Plant, dir = 'v')\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>Facet wrap</td>\n<td align = 'left'>`_wrap`</td>\n<td align = 'left'>\n\nMatrix of panels split by two categorical vectors\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotFacet_wrap2-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(CO2, aes(y=uptake, x=conc)) +\n  geom_smooth() +\n  geom_point() +\n  facet_wrap(~Treatment + Type,\n             labeller = labeller(Treatment = label_both,\n                                 Type = label_both,\n                                 multi_line = FALSE))\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'odd'>\n<td align = 'left'>Facet wrap</td>\n<td align = 'left'>`_wrap`</td>\n<td align = 'left'>\n\nMatrix of panels split by a single categorical vector with strip labels moved right of panels\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotFacet_wrap3-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(CO2, aes(y=uptake, x=conc)) +\n  geom_smooth() +\n  geom_point() +\n  facet_wrap(~Plant, strip.position = 'right')\n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\t\n\n## Facet grid ![](05_grammar_of_graphics_files/figure-html/ggplotFacet-grid-s-1.png){class=\"thumb-s\" style=\"width:80px; height:80px;\" #facet-gridA}\n\n\n\n\n\n\n  \n<details><summary>Show attributes</summary>\n \n| Parameter                                                                                                                             | default |\n|---------------------------------------------------------------------------------------------------------------------------------------|---------|\n| `rows` - variables used to faceting for the rows                                                                                      | NULL    |\n| `cols` - variables used to faceting for the columns                                                                                   | NULL    |\n| `space` - whether all panels are the same size ('fixed') or proportional to the scale of associated data ('free', 'free_x', 'free_y') | 'fixed' |\n| `margins` - whether to include marginal summaries or which variables to associate marginal summaries for                              | FALSE   |\n|                                                                                                                                       |         |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>facet</th>\n<th align = 'left'>Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>Facet wrap</td>\n<td align = 'left'>`_wrap`</td>\n<td align = 'left'>\n\nMatrix of panels split by two categorical vectors\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotFacet_grid1-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(CO2, aes(y=uptake, x=conc)) +\n  geom_smooth() +\n  geom_point() +\n    facet_grid(rows = vars(Treatment),\n               cols = vars(Type))\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>Facet grid</td>\n<td align = 'left'>`_grid`</td>\n<td align = 'left'>\n\nMatrix of panels split by two categorical vectors\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotFacet_grid2-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(CO2, aes(y=uptake, x=conc)) +\n    geom_smooth() +\n    geom_point() +\n    facet_grid(rows = vars(Treatment),\n               cols = vars(Type),\n               margins = TRUE)\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'odd'>\n<td align = 'left'>Facet grid</td>\n<td align = 'left'>`_grid`</td>\n<td align = 'left'>\n\nMatrix of panels split by two categorical vectors\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotFacet_grid3-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(CO2, aes(y=uptake, x=conc)) +\n    geom_smooth() +\n    geom_point() +\n    facet_grid(rows = vars(Type),\n               cols = vars(Treatment),\n               space = 'free')\n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\t\n\n:::\n\n# Themes \n\n\n\n\n\n\n\nThemes govern the overall style of the graphic. In particular, they\ncontrol:\n\n- the look and positioning of the axes (and their ticks, titles and\n  labels)\n- the look and positioning of the legends (size,alignment, font,\n  direction)\n- the look of plots (spacing and titles)\n- the look of panels (background, grid lines)\n- the look of panels strips (background, alignment, font)\n\n<table class='table table-primary table-bordered table-sm paramsTable'>\n<thead>\n<tr class = 'header'>\n<th align = 'left'>Feature</th>\n<th align = 'left'>Theme</th>\n<th align = 'left'>Notes</th>\n<th align = 'left'>Example plot</th>\n</tr>\n</thead>\n<tbody>\n<tr class = 'odd'>\n<td align = 'left'>Black and white theme</td>\n<td align = 'left'>`_bw`</td>\n<td align = 'left'>\n\nBlack and white theme\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotTheme1-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(CO2, aes(y=uptake, x=conc)) +\n    geom_point() +\n    theme_bw()\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>Classic theme</td>\n<td align = 'left'>`_classic`</td>\n<td align = 'left'>\n\nBlack and white theme\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotTheme2-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(CO2, aes(y=uptake, x=conc)) +\n    geom_point() +\n    theme_classic()\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'odd'>\n<td align = 'left'>Classic theme</td>\n<td align = 'left'>`_grey`</td>\n<td align = 'left'>\n\nGrey theme\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotTheme3-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(CO2, aes(y=uptake, x=conc)) +\n    geom_point() +\n    theme_grey()\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'even'>\n<td align = 'left'>Minimal theme</td>\n<td align = 'left'>`_grey`</td>\n<td align = 'left'>\n\nMinimal theme\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotTheme4-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(CO2, aes(y=uptake, x=conc)) +\n    geom_point() +\n    theme_minimal()\n```\n:::\n\n\n</td>\n</tr>\n<tr class = 'odd'>\n<td align = 'left'>Empty (void) theme</td>\n<td align = 'left'>`_void`</td>\n<td align = 'left'>\n\nMinimal theme\n\n</td>\n<td align = 'left' rowspan = 2>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_grammar_of_graphics_files/figure-html/ggplotTheme5-1.png){width=480 class=\"thumb-L\"}\n:::\n:::\n\n\n</td>\n</tr>\n<tr>\n<td align = 'left' font-shape=2em colspan=3>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(CO2, aes(y=uptake, x=conc)) +\n    geom_point() +\n    theme_void()\n```\n:::\n\n\n</td>\n</tr>\n</tbody>\n</table>\n\nAlong with these pre-fabricated themes, it is possible to create your\nown theme. This is done via the `theme()` function. Non-data themable\nelements comprise of either a line, rectangle or text. Therefore, they\ncan all be modified via one of the following functions:\n\n- `element_blank()` - remove the element\n- `element_line()` - set the properties of a line\n- `element_rect()` - set the properties of a rectangle\n- `element_text()` - set the properties of text\n\nThe spacing around elements is defined by `margin()`.  The sizes of\nelements can be directly supplied or defined relative to the size of\nthe parent element via the `rel()` function.\n\n<details><summary>Show attributes</summary>\n \n| Parameter                                                             | `_line` | `_rect` | `_text` |\n|-----------------------------------------------------------------------|---------|---------|---------|\n| `inherit.blank` -                                                     | FALSE   | FALSE   | FALSE   |\n| `fill` - element fill colour                                          |         | NULL    |         |\n| `colour` - line/border colour                                         | NULL    | NULL    | NULL    |\n| `size` - line/border line size (mm) or font size (pt)                 | NULL    | NULL    | NULL    |\n| `linetype` - line type (1:8, name or hex string)                      | NULL    | NULL    |         |\n| `lineend` - line end style (round, butt, square)                      | NULL    |         |         |\n| `arrow` - arrow specification                                         | NULL    |         |         |\n| `family` - font family                                                |         |         | NULL    |\n| `face` - font face (plain, italic, bold, bold.italic)                 |         |         | NULL    |\n| `hjust` - horizontal justification (in [0, 1])                        |         |         | NULL    |\n| `vjust` - vertical justification (in [0, 1])                          |         |         | NULL    |\n| `angle` - angle (in [0, 360])                                         |         |         | NULL    |\n| `lineheight` - height of a line of text                               |         |         | NULL    |\n| `margin` - spacing around text (see `margin()`)                       |         |         | NULL    |\n| `debug` - if TRUE draws a rectangle behind text and a point at anchor |         |         | NULL    |\n|                                                                       |         |         |         |\n\n: {.primary .bordered .sm .paramsTable}\n\n</details>\n\n\nTo get an appreciation of the theme elements controlled by a theme,\nenter the associated function at the command prompt (note, most themes\nbuild upon the default 'grey' theme):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_grey()\n```\n:::\n\n\n<details><summary>see output</summary>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 136\n $ line                            :List of 6\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : num 1\n  ..$ lineend      : chr \"butt\"\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ rect                            :List of 5\n  ..$ fill         : chr \"white\"\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : num 1\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ text                            :List of 11\n  ..$ family       : chr \"\"\n  ..$ face         : chr \"plain\"\n  ..$ colour       : chr \"black\"\n  ..$ size         : num 11\n  ..$ hjust        : num 0.5\n  ..$ vjust        : num 0.5\n  ..$ angle        : num 0\n  ..$ lineheight   : num 0.9\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ title                           : NULL\n $ aspect.ratio                    : NULL\n $ axis.title                      : NULL\n $ axis.title.x                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.75points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.top                :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.75points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.bottom             : NULL\n $ axis.title.y                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num 90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.75points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.y.left               : NULL\n $ axis.title.y.right              :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num -90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.75points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text                       :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : chr \"grey30\"\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.2points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.top                 :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.2points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.bottom              : NULL\n $ axis.text.y                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 1\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.y.left                : NULL\n $ axis.text.y.right               :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.2points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.theta                 : NULL\n $ axis.text.r                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0.5\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 2.2points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.ticks                      :List of 6\n  ..$ colour       : chr \"grey20\"\n  ..$ linewidth    : NULL\n  ..$ linetype     : NULL\n  ..$ lineend      : NULL\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ axis.ticks.x                    : NULL\n $ axis.ticks.x.top                : NULL\n $ axis.ticks.x.bottom             : NULL\n $ axis.ticks.y                    : NULL\n $ axis.ticks.y.left               : NULL\n $ axis.ticks.y.right              : NULL\n $ axis.ticks.theta                : NULL\n $ axis.ticks.r                    : NULL\n $ axis.minor.ticks.x.top          : NULL\n $ axis.minor.ticks.x.bottom       : NULL\n $ axis.minor.ticks.y.left         : NULL\n $ axis.minor.ticks.y.right        : NULL\n $ axis.minor.ticks.theta          : NULL\n $ axis.minor.ticks.r              : NULL\n $ axis.ticks.length               : 'simpleUnit' num 2.75points\n  ..- attr(*, \"unit\")= int 8\n $ axis.ticks.length.x             : NULL\n $ axis.ticks.length.x.top         : NULL\n $ axis.ticks.length.x.bottom      : NULL\n $ axis.ticks.length.y             : NULL\n $ axis.ticks.length.y.left        : NULL\n $ axis.ticks.length.y.right       : NULL\n $ axis.ticks.length.theta         : NULL\n $ axis.ticks.length.r             : NULL\n $ axis.minor.ticks.length         : 'rel' num 0.75\n $ axis.minor.ticks.length.x       : NULL\n $ axis.minor.ticks.length.x.top   : NULL\n $ axis.minor.ticks.length.x.bottom: NULL\n $ axis.minor.ticks.length.y       : NULL\n $ axis.minor.ticks.length.y.left  : NULL\n $ axis.minor.ticks.length.y.right : NULL\n $ axis.minor.ticks.length.theta   : NULL\n $ axis.minor.ticks.length.r       : NULL\n $ axis.line                       : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.line.x                     : NULL\n $ axis.line.x.top                 : NULL\n $ axis.line.x.bottom              : NULL\n $ axis.line.y                     : NULL\n $ axis.line.y.left                : NULL\n $ axis.line.y.right               : NULL\n $ axis.line.theta                 : NULL\n $ axis.line.r                     : NULL\n $ legend.background               :List of 5\n  ..$ fill         : NULL\n  ..$ colour       : logi NA\n  ..$ linewidth    : NULL\n  ..$ linetype     : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ legend.margin                   : 'margin' num [1:4] 5.5points 5.5points 5.5points 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing                  : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing.x                : NULL\n $ legend.spacing.y                : NULL\n $ legend.key                      : NULL\n $ legend.key.size                 : 'simpleUnit' num 1.2lines\n  ..- attr(*, \"unit\")= int 3\n $ legend.key.height               : NULL\n $ legend.key.width                : NULL\n $ legend.key.spacing              : 'simpleUnit' num 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.key.spacing.x            : NULL\n $ legend.key.spacing.y            : NULL\n $ legend.frame                    : NULL\n $ legend.ticks                    : NULL\n $ legend.ticks.length             : 'rel' num 0.2\n $ legend.axis.line                : NULL\n $ legend.text                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.text.position            : NULL\n $ legend.title                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.title.position           : NULL\n $ legend.position                 : chr \"right\"\n $ legend.position.inside          : NULL\n $ legend.direction                : NULL\n $ legend.byrow                    : NULL\n $ legend.justification            : chr \"center\"\n $ legend.justification.top        : NULL\n $ legend.justification.bottom     : NULL\n $ legend.justification.left       : NULL\n $ legend.justification.right      : NULL\n $ legend.justification.inside     : NULL\n $ legend.location                 : NULL\n $ legend.box                      : NULL\n $ legend.box.just                 : NULL\n $ legend.box.margin               : 'margin' num [1:4] 0cm 0cm 0cm 0cm\n  ..- attr(*, \"unit\")= int 1\n $ legend.box.background           : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.box.spacing              : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n  [list output truncated]\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi TRUE\n - attr(*, \"validate\")= logi TRUE\n```\n\n\n:::\n:::\n\n\n</details>\n \n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}