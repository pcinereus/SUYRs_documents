---
title: Containerisation - docker and singularity
author: "Murray Logan"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    toc: true
    toc-float: true
    page-layout: full
    number-sections: true
    number-depth: 3
    embed-resources: true
    code-fold: false
    code-tools: true
    code-summary: "Show the code"
    code-line-numbers: true
    code-block-border-left: "#ccc"
    code-copy: true
    highlight-style: atom-one
    theme: [default, ../resources/tut-style.scss]
    css: ../resources/tut-style.css
crossref:
  fig-title: '**Figure**'
  fig-labels: arabic
  tbl-title: '**Table**'
  tbl-labels: arabic
engine: knitr
bibliography: ../resources/references.bib
output_dir: "docs"
---

```{r setup, include=FALSE,warning=FALSE, cache=FALSE, message=FALSE}
knitr::opts_chunk$set(echo = TRUE,warning=FALSE, message=FALSE, cache = TRUE, comment = "")
options(tinytex.engine = 'xelatex')
cleanRmdInput <- function(x) {
#x <- gsub("```\\{r","```markdown\n`r ''```\\{r",x)
x <- gsub("^```$","`` `",x)  # the Makefile will then change this back to ``` after pandoc
x
}
library(tidyverse)
library(pander)
FIG_PATH <- '12_docker_files/figure-html/'

# save the built-in output hook
hook_output <- knitr::knit_hooks$get("output")

# set a new output hook to truncate text output
knitr::knit_hooks$set(output = function(x, options) {
  if (!is.null(n <- options$out.lines)) {
    x <- xfun::split_lines(x)
    more <- "..."
    n <- eval(parse(text=n))
    if (length(n) == 1) {
      if (length(x) > n) {
        # truncate the output
        x <- c(head(x, n), "....\n")
        }
    } else {
        x <- c(more, x[n], more)
    }    
    x <- paste(x, collapse = "\n")
  }
  hook_output(x, options)
})
```

# Background information

In the previous tutorial, we discussed why it is important that your
codebase is under version control and backed up to help ensure that
your analyses can be evaluated and replicated by you and others both
now and into the future.  However, having access to the code (and
data) does not always guarantee full reproducibility - this can also
be effected by the exact software environment in which the code is
run.

In the context of statistical analyses performed in R for example, R
as well as the various packages that you have elected to use in
support your analyses can (and do) evolve over time.  Some functions
get modified and some even get depreciated.  Hence, over time, code
that once worked perfectly (or at least adequately) can become _broken_.

Early solutions to this facet of reproducibility focused on **virtual
machines**.  Virtual machines (VM) build entire software environments on
top of a software layer that mimics a physical computer such that each
VM runs on a _host_ computer is a completely separate self-contained
entity.  Whilst VMs do permit great flexibility (as virtually any
operating system can be installed on a VM), they are considerably
slower and less efficient than physical machines.  Moreover, it is
typically necessary to allocate a fixed amount of computer resources
(particularly CPU) to the VM in advance.

More modern solutions focus instead on **Containers**.  In contrast to
VMs, containers do not mimic a physical computer, rather they only
virtualise layers on top of the host operating system.  Indeed,
containers share (read only) the host OS kernel and binaries/libraries
and thus containers and the applications contained therein can be very
"light" and are typically are almost as performant as applications run
natively on the host.

Time for some container terminology:

- **Container image** is a static (unchangeable) file (or collection of
  files) that bundles code and all its dependencies (such as the
  necessary system libraries, code, runtime and system
  tools). Essentially, the image has all the information required to
  reproduce an software environment on any compatible machine.
  However, an image is just a snapshot which serves as a template to
  build a **container**. In other words, a container is a running image,
  and cannot exist without the image, whereas an image can exist
  without a container.

- **Container** is a standard (linux) process whose software environment
  is defined by the contents of a container image and that runs on top
  of the host's OS.

# Preparations
