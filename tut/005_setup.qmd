---
title: Setup instructions 
author: "Murray Logan"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    toc: true
    toc-float: true
    page-layout: full
    number-sections: true
    number-depth: 3
    embed-resources: true
    code-fold: false
    code-tools: true
    code-summary: "Show the code"
    code-line-numbers: true
    code-block-border-left: "#ccc"
    code-copy: true
    highlight-style: atom-one
    theme: [default, ../resources/tut-style.scss]
    css: ../resources/tut-style.css
crossref:
  fig-title: '**Figure**'
  fig-labels: arabic
  tbl-title: '**Table**'
  tbl-labels: arabic
engine: knitr
bibliography: ../resources/references.bib
output_dir: "docs"
---


# Installing R

The latest version of an R installation binary (or source code) can be
downloaded from one of the [Comprehensive R Archive Network (or CRAN)
mirrors](https://cran.r-project.org/mirrors.html). Having selected one
of the (Australian) mirrors, follow one of the sets of instructions
below (depending on your operating system).

::: panel-tabset 

## Windows

- **Download R:** 
  - Go to the CRAN R-project website <https://cran.r-project.org/> and
  click on "Download R for Windows".
  - Select the "base" subdirectory
  - Select the "Download R-X.X.X for Windows" option (where X.X.X are
  a series of version and release numbers) to download.

- **Run the installer:** Double-click the downloaded .exe file and
  follow the installation wizard. Accept the default settings unless
  you have specific needs.

- **Optional:** Set R as the default: Check the checkbox to set R as
  the default for R scripts during installation. This allows you to
  run R scripts by double-clicking them.

- **Verify installation:** 
  - Open a new command prompt (Start > Run > cmd) and type `R`. If the R
  console opens, the installation was successful.
  - Alternatively, search for R in the Start menu

## MacOSx

- **Download R:** 
  - Go to the CRAN R-project website (https://cran.r-project.org/) and
    click on "Download R for macOS".
  - Choose the latest stable version that is appropriate for your
    architecture.
- **Open the disk image:** Double-click the downloaded .pkg file and
  drag the R application icon to your Applications folder.
  
- **Verify installation:**
  - Open Terminal: Go to Applications > Utilities and open Terminal.
  - Type `R` in the Terminal window. If the R console opens, the
  installation was successful.

## Linux

- **Open Terminal:** You can access Terminal through your application
  launcher or search bar.

- **Install R:** The commands vary slightly depending on your Linux distribution. Here are common examples:
  - Debian/Ubuntu: `sudo apt install r-base`
  - Fedora/CentOS: `sudo yum install R`
  - Arch Linux: `sudo pacman -S R`

- **Verify installation:** Type `R` in the Terminal window. If the R
  console opens, the installation was successful.

:::

# Installing Rstudio

:::: panel-tabset

#### Installing RStudio on Windows:

1. **Download R:** 
    - RStudio requires R to be installed. If you have not already done
      so, download and install R from the official CRAN website.

2. **Download RStudio:** 
    - Visit the [RStudio Download
    page](https://www.rstudio.com/products/rstudio/download/) and
    select the "RStudio Desktop" version compatible with your Windows
    operating system.

3. **Install RStudio:** 
    - Run the downloaded RStudio installer and follow the installation
      wizard. 
    - Accept the default settings unless you have specific
      preferences. 

4. **Launch RStudio:**
    - After installation, launch RStudio from the Start menu or
      desktop shortcut.

#### Installing RStudio on macOS:

1. **Download R:**
    - If you have not already done so, download and install R on macOS
      from the official CRAN website.

2. **Download RStudio:**
    - Navigate to the [RStudio Download
      page](https://www.rstudio.com/products/rstudio/download/) and
      choose the "RStudio Desktop" version for macOS.

3. **Install RStudio:**
    - Run the downloaded RStudio package, and macOS will guide you
      through the installation process.

4. **Launch RStudio:**
    - Open RStudio from the Applications folder or use Spotlight to
      search for it.
      
#### Installing RStudio on Linux:

1. **Download R:**
    - If you have not already done so, install R on your Linux
      distribution using the package manager. For example, on Ubuntu,
      run:

```{bash}
#| eval: false
#| engine: bash
#| classes: bash
sudo apt-get install r-base
```

2. **Download RStudio:**
    - Visit the RStudio Download page and choose the appropriate
      RStudio Desktop version for your Linux distribution.

3. **Install RStudio:**
    - Run the downloaded RStudio package, and follow any additional instructions based on your Linux distribution.

4. **Launch RStudio:**
    - Open a terminal and type rstudio to launch RStudio.

::::


# Installating git

::: panel-tabset 

## Windows

Git Bash (Command Line Version):

1. Download the Git for Windows installer from [Git for Windows](https://gitforwindows.org/)
   - Click the Download button
   - Select the latest version from the list of `Assets`
2. Run the installer and follow the installation prompts.
3. Choose the default options unless you have specific preferences.
4. Select the default text editor (usually Vim) or choose another
   editor like Nano or Notepad++.
5. Choose to use Git from the Windows Command Prompt (recommended).
6. Complete the installation.

## MacOSx

Using Homebrew:

1. Open Terminal.
2. Install Homebrew if not installed:

:::: {.indented}
```{bash}
#| label: install1
#| echo: true
#| eval: false
#| cache: false
#| engine: bash
#| classes: bash
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
```
:::

3. Install Git using Homebrew:

:::: {.indented}

```{bash}
#| label: install2
#| echo: true
#| eval: false
#| cache: false
#| engine: bash
#| classes: bash
brew install git
```
::::

## Linux

1. Open Terminal.

:::: {.indented}
Ubuntu/Debian:

```{bash}
#| label: install3a
#| echo: true
#| eval: false
#| cache: false
#| engine: bash
#| classes: bash
sudo apt update
sudo apt install git
```
::::

:::: {.indented}
Fedora:

```{bash}
#| label: install3b
#| echo: true
#| eval: false
#| cache: false
#| engine: bash
#| classes: bash
sudo dnf install git
```
::::

:::: {.indented}
Arch Linux:

```{bash}
#| label: install3c
#| echo: true
#| eval: false
#| cache: false
#| engine: bash
#| classes: bash
sudo pacman -S git
```
::::

:::: {.indented}
Linux (Red Hat/CentOS):

```{bash}
#| label: install3d
#| echo: true
#| eval: false
#| cache: false
#| engine: bash
#| classes: bash
sudo yum install git
```
::::
:::


To verify that the software is installed and accessible, open a
terminal and issue the following:

```{bash}
#| label: install4a
#| echo: true
#| eval: true
#| cache: false
#| engine: bash
#| classes: bash
git --version
```

::: {.callout-tip collapse="true"}
## Unsure how to open a terminal?

**Windows:**

On Windows, you can access a terminal via one of the following: 

- via the command Prompt:
  - Press `Win + R` to open the Run dialog.
  - Type `cmd` and press `Enter`.

- via PowerShell:
  - Press `Win + X` and select "Windows PowerShell."

- Git Bash (Optional):
  - if Git is installed (which we are hoping it is!), open "Git Bash" for a Unix-like terminal experience.

**MacOS:**

- via Terminal:
  - Press `Cmd + Space` to open Spotlight.
  - Type `terminal` and press `Enter`.

**Linux:**

Oh please. You cannot seriously tell me that you are using Linux and
don't know how to access a terminal.
:::

In the command above, pay particular attention to the number of
hyphens in the above command - there are two in a row and no spaces
between the `--` and the word `version`.

If you get output similar to above (an indication of what version of
git you have on your system), then it is likely to be properly
installed. If instead you get an error message, then it is likely that
git is not properly installed and you should try again.


# Setup a free github account

To create a **free** github account:

1. visit <https://github.com> and click "Sign up for github"
2. register by providing your prefered email address, a username and
   a password when prompted
3. to complete the account activation, you will need to verify your 
   details via an email sent to your nominated email address

As of the start of 2024, github now requires Two-Factor Authentication
(2FA) for enhanced security.  Whenever you login to github (or are
prompted for a password, you will also need to use 2FA. To setup 2FA:

1. click on your profile picture in the top right corner.
2. select "Settings" from the dropdown menu.
3. select "Password and authentication" in the left sidebar.
4. under "Two-factor authentication" section, click "Enable".
5. choose your preferred method (authenticator app or SMS) and follow 
   the prompts to set it up.

Passwords and Two-Factor Authentication (2FA) are used when you (as a
human) securely login and interact directly with the GitHub website.
However, it is also possible to have other tools (such as `git`)
interact with Github on your behalf via an Application Programming
Interfacet (API).  Passwords/2FA are not appropriate to authenticate 
these machine to machine communications.  Instead, Github requires the
use of a Personal Access Token (PAT). PATs offer a more secure and granular 
approach, allowing users to control access without exposing their
account password.

To generate a Personal Access Token (PAT):

1. click on your profile picture in the top right corner.
2. select "Settings" from the dropdown menu.
3. select "Developer settings" from the bottom of the left sidebar.
4. select "Personal access tokens" from the left sidebar.
5. select "Tokens (classic)" from the dropdown menu
6. click "Generate new token"
7. select "Generate new token (classic)" from the dropdown menu
8. at this point you will likely be prompted for your password
9. provide a "note" - this is more of a short description of what the
   token is to be used for (in the example below, I have entered "git push/pull"
   to remind me that this is a simple token for regular push/pull interaction
   between my local and remote repositories).

    ![](../resources/rstudio_githubtoken1.png)

   You also need to provide an expiration. Although not secure or recommended,
   I have selected "No expiration" as I don't want to have to re-do my PAT
   across multiple machines too regularly.

   Finally, you also need to indicate **scope** (what activities you are granting permission
   for the tools to be able to perform).  In this case, I have ticked the 
   "repo" box.  This grants general rea/write access to my repositories.  I have 
   not granted permission for more administration like activities such as 
   managing teams, deleting repositories, etc - these activities I am happy to 
   perform myself via the website.
10. click "Generate token" and securely copy the generated token.  Until this is stored
    safely (see below) do not close the page, because Github will never show you this
    PAT again.

:::: {.indented}
::: {.callout-important collapse="false"}

Important: Store your PAT safely as you won't be able to see it again!
Ideally, you should store this PAT in a digital wallet. Digital
wallets vary according to operating systems. R users might like to use
the `r` function from the `asdf` package (which you will need to
install prior) as follows in order to store the PAT.

**In an R console, enter:**

```{r}
#| label: PAT
#| cache: false
#| echo: true
#| eval: false
gitcreds::gitcreds_set()
```

When propted for a password, paste in the copied PAT that hopefully is still in your
clipboard - else you might need to re-copy it.

To confirm that you have successfully stored your PAT in your wallet, you can:
```{r}
#| label: PAT2
#| cache: false
#| echo: true
#| eval: false
gitcreds::gitcreds_get()
```

and confirm that it indicates that there is a hidden password.


:::
::::


# Installing stan (for Bayesian modelling)

::: panel-tabset 

## Windows

1. Install and setup **Rtools** (a collection of R focused build tools
   for windows)
   - go to CRAN Rtools website
     <https://cran.r-project.org/bin/windows/Rtools/>
   - click on the Rtools version that matches the major version of R
     you are using.
   - click on the installer link (midway down the page) to download the installer
   - run the installer
   - follow all defaults during the installation process
2. Install **cmdstan** (an implementation of the STAN language)
   - using selected instructions from <https://mc-stan.org/cmdstanr/articles/cmdstanr.html>
     - open a new R session and issue the following
       ```{r}
       #| label: install_cmdstan1
       #| eval: false
       install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
       ```
     - make sure the package loads
       ```{r}
       #| label: install_cmdstan2
       #| eval: true
       library(cmdstanr)
       ```
     - ensure that the c++ toolchain (from Rtools) is correctly
       installed and configured
       ```{r}
       #| label: install_cmdstan3
       #| eval: false
       check_cmdstan_toolchain()
       ```
     - if the toolchain is correctly configured, install cmdstan
       ```{r}
       #| label: install_cmdstan4
       #| eval: false
       install_cmdstan(cores = 2)
       ```
3. Ensure that cmdstan is properly configured by compiling a built in example
   ```{r}
   #| label: install_cmdstan5
   #| eval: true
   #| cache: true
   file <- file.path(cmdstan_path(), "examples", "bernoulli", "bernoulli.stan")
   mod <- cmdstan_model(file)
   data_list <- list(N = 10, y = c(0,1,0,0,0,0,0,0,0,1))

   fit <- mod$sample(
     data = data_list,
     seed = 123,
     chains = 4,
     parallel_chains = 4,
     refresh = 500 # print update every 500 iters
   )
   ```
   If you get output resembling the above, then cmdstan is setup correctly.
4. Install the **brms** - an R package that provides a more familiar R
   model fitting interface to `STAN`.
   - install the package
     ```{r}
     #| label: install_cmdstan6
     #| eval: false
     install.packages("brms")
     ```
     ```{r}
     #| label: test
     #| results: markup
     #| eval: true
     #| echo: true
     #| cache: false
     cmdstanr:::get_cmdstan_flags("STANCFLAGS")
     cmdstanr:::cmdstan_path()
     Sys.getenv("HOME")
     cmdstan_path <- cmdstanr:::cmdstan_path()
     withr::with_envvar(
       c("HOME" = Sys.getenv("HOME")),
     flags <- cmdstanr:::wsl_compatible_run(
      command = "make",
      args = c("-s", paste0("print-", STANCFLAGS)),
      wd = cmdstan_path
     )$stdout
     )

     flags <- gsub("\n", "", flags, fixed = TRUE)
     print(flags)
     ```

     
   - test whether the whole tool chain works
     ```{r}
     #| label: install_cmdstan7
     #| eval: true
     #| cache: true
     library(cmdstanr)
     library(brms)
     dat <- data.frame(y = rnorm(10), x = rnorm(10))
     brm(y ~ x, data = dat, backend = "rstan")
     ```

     Again, if you get output similar to that above, then the complete
     Bayesian toolchain is correctly configured and ready for use.

## MacOSx

1. Install and setup **Xcode** (a collection of build tools for
   MacOSX)
   - open a terminal and enter
   ```{bash}
   #| label: install_xcode
   #| eval: false
   #| engine: bash
   #| classes: bash
   xcode-select --install
   ```

2. Install **cmdstan** (an implementation of the STAN language)
   - using selected instructions from <https://mc-stan.org/cmdstanr/articles/cmdstanr.html>
     - open a new R session and issue the following
       ```{r}
       #| label: install_cmdstan1
       #| eval: false
       #| cache: true
       ```
     - make sure the package loads
       ```{r}
       #| label: install_cmdstan2
       #| eval: true
       #| cache: true
       ```
     - ensure that the c++ toolchain (from Rtools) is correctly
       installed and configured
       ```{r}
       #| label: install_cmdstan3
       #| eval: false
       ```
     - if the toolchain is correctly configured, install cmdstan
       ```{r}
       #| label: install_cmdstan4
       #| eval: false
       ```
3. Ensure that cmdstan is properly configured by compiling a built in example
   ```{r}
   #| label: install_cmdstan5
   #| eval: true
   #| cache: true
   ```
   If you get output resembling the above, then cmdstan is setup correctly.
4. Install the **brms** - an R package that provides a more familiar R
   model fitting interface to `STAN`.
   - install the package
     ```{r}
     #| label: install_cmdstan6
     #| eval: false
     ```
   - test whether the whole tool chain works
     ```{r}
     #| label: install_cmdstan7
     #| eval: true
     #| cache: true
     ```

     Again, if you get output similar to that above, then the complete
     Bayesian toolchain is correctly configured and ready for use.
     
## Linux

1. Ensure that you have installed (via your package manager) the
   following dependencies:
   - build-essential
   - g++
   - gcc
   - curl
   - libcurl4-openssl-dev

2. Install **cmdstan** (an implementation of the STAN language)
   - using selected instructions from <https://mc-stan.org/cmdstanr/articles/cmdstanr.html>
     - open a new R session and issue the following
       ```{r}
       #| label: install_cmdstan1
       #| eval: false
       ```
     - make sure the package loads
       ```{r}
       #| label: install_cmdstan2
       #| eval: true
       #| cache: true
       ```
     - ensure that the c++ toolchain (from Rtools) is correctly
       installed and configured
       ```{r}
       #| label: install_cmdstan3
       #| eval: false
       ```
     - if the toolchain is correctly configured, install cmdstan
       ```{r}
       #| label: install_cmdstan4
       #| eval: false
       ```
3. Ensure that cmdstan is properly configured by compiling a built in example
   ```{r}
   #| label: install_cmdstan5
   #| eval: true
   #| cache: true
   ```
   If you get output resembling the above, then cmdstan is setup correctly.
4. Install the **brms** - an R package that provides a more familiar R
   model fitting interface to `STAN`.
   - install the package
     ```{r}
     #| label: install_cmdstan6
     #| eval: false
     ```
   - test whether the whole tool chain works
     ```{r}
     #| label: install_cmdstan7
     #| eval: true
     #| cache: true
     ```

     Again, if you get output similar to that above, then the complete
     Bayesian toolchain is correctly configured and ready for use.
:::



