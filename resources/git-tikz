#!/bin/bash

# Defaults
filename=image.pdf
sha1length=5
messagelength=10
internal_commit_text=true

export GIT_DIR=$(git rev-parse --git-dir)

# command line options
while test $# -gt 0
do
	case $1 in
		--filename)
			filename=$2
			shift
			;;
		--image-filename)
			imgfilename=$2
			shift
			;;
		--message-length)
			messagelength=$2
			shift
			;;
		--internal_commit_text)
			internal_commit_text=$2
			shift
			;;
		-g | --git-dir)
			GIT_DIR=$2
			shift
			;;
	esac
	
	shift
done

abbreviate_sha1() {
  # BUG: in a blob or commit-msg, would also replace what looks like a sha1
  perl -pe 's/([0-9a-f]{40})/substr(`git rev-parse --short='$sha1length' $1`,0,-1)/eg'
}

ls_all_objects() {
  # packed objects
  # note that the .idx is not always present
  find $GIT_DIR/objects/pack/ -iname '*.idx' | while read idxfile; do
   cat $idxfile | git show-index | sort -nr | 
     perl -pe 's@^.*?([a-f0-9]{40}).*$@$1@'
  done

  # unpacked objects
  find $GIT_DIR/objects/ -type f |
    perl -ne 'print "$1$2\n" if m@^.*/([a-f0-9]{2})/([a-f0-9]{38})@' 

}

ls_all_objects_short() {
  ls_all_objects | while read sha1; do
    git rev-parse --short=$sha1length $sha1
  done
}

all_commits() {
	#git log --oneline --reverse -all | sed -E "s/^(.{7}).*/\1/"
	#git reflog | perl -ne 'print unless /checkout/;' | sed -E "s/^(.{7}).*/\1/"
	git rev-list --all --reverse
	
}

just_message() {
		perl -ne 'print unless /author/ or /committer/ or /parent/ or /tree/;'
}

ls_all_refs() {
  # todo: refs like MERGE_HEAD are still not printed
	#git show-ref --abbrev=$sha1length
	##git show-ref --abbrev=$sha1length | perl -ne 'if (m@(\S+)\s+refs/heads/(\S+?)$@) { $ref = $2; $commit = $1; print "$commit $ref\n";}' | awk '{print $0 " " int(a[$1]) " " v; v=$2; a[$1]++}'
	#git show-ref --abbrev=$sha1length | perl -ne 'if (m@(\S+)\s+refs/heads/(\S+?)$@) { $ref = $2; $commit = $1; print "$commit $ref\n";}' | awk '{if (int(a[$1])>0) {print v" "$2} else {print $1" "$2} ; v=$2; a[$1]++}'
	#git show-ref --abbrev=$sha1length | awk '{if (int(a[$1])>0) {print v" "$2} else {print $1" "$2} ; v=gsub(/\/refs\/heads\//,"",$2); a[$1]++}'
	
	#git show-ref --abbrev=$sha1length | sort | awk '{if (int(a[$1])>0) {print v" "$2} else {print $1" "$2} ; v=gensub(/refs\/heads\//,"\\1","g",$2); a[$1]++}'
	git show-ref --abbrev=$sha1length | sort 
	
	cat $GIT_DIR/HEAD | perl -ne '
    m/^(?:ref: )?(.*?)$/;
    if ($1 =~ m/([a-f0-9]{40})/) {
      $idshort = substr(`git rev-parse --short='$sha1length' $1`,0,-1);
    }
    else { $idshort = $1 }
    print $idshort . " HEAD\n";'
}

# when head is same as master and Feature
get_HEAD() {
	# #echo "$(ls_all_refs)"
	#echo "$(git rev-parse --short=$sha1length $(cat $GIT_DIR/HEAD))"
	refhead=$(cat $GIT_DIR/HEAD)
	if [[ $refhead =~ ^ref:.* ]]; then
		# ls_all_refs |
		# perl -ne '
        #   if (m@(\S+)\s+(\S+?)$@) {
        #     $ref = $2;
        #     $co = $1;
        #     #print "$1 $2\n";
        #     if ($ref =~ m@^refs/head.@) {
        #     #if ($ref =~ m@^.HEAD@) {
        #       ($commit = $co) ;
        #       print "$commit";
        #     }
        #   }'
		echo "$(echo $refhead | cut -d' ' -f 2 | sed 's/refs\/heads\///g')"
	else	
		echo "$(git rev-parse --short=$sha1length $refhead)"	
	fi
}

get_MASTER() {
	ls_all_refs |
		perl -ne '
          if (m@(\S+)\s+(\S+?)$@) {
            $ref = $2;
            $co = $1;
            #print "$1 $2\n";
            if ($ref =~ m@^refs/head./master@) {
              ($commit = $co) ;
              print "$commit";
            }
          }'
}

get_BRANCHES() {
	ls_all_refs |
		perl -ne '
          if (m@(\S+)\s+refs/heads/(\S+?)$@) {
            $ref = $2;
            $commit = $1;
            print "$commit $ref\n";
          }'
}

get_TAGS() {
	# git show-ref --abbrev=$sha1length | perl -ne '
    #       if (m@(\S+)\s+refs/tags/(\S+?)$@) {
    #         $ref = $2;
    #         $commit = $1;
    #         print "$commit $ref\n";
    #       }'
	#git log --all --reverse --pretty="%H|%P|%s|%d" | perl -ne '
    #   print if /tag:/;' | sed 's/([.]{5}).*/\1/'
	git log --all --reverse --pretty="%H|%P|%s|%d" | perl -ne 'print if /tag:/;' | sed -e 's/\(.\{5\}\).*tag:\(.*\))/\1 \2/'

}

truncate_message() {
	sed -E "s/^(.{$messagelength}).*$/\1\.\.\./"
}
print_content() {
	HEAD=$(get_HEAD)
	MASTER=$(get_MASTER)
	ENDS=""
	CNT=0
	# ls_all_objects_short | while read id; do
	while read id; do
		commit=$(git rev-parse --short=$sha1length "$id")
		#commit="$id"
		object_type=$(git cat-file -t $id)
		objcontent=$(git cat-file -p $id | abbreviate_sha1 | just_message | truncate_message ) #sed 's/\(............\).*/\1\.\.\./')
		case $object_type in
			commit)
				((CNT++))
				ENDS+="]"
				if [ $CNT -eq 1 ]; then
					printf '[, for tree={commentText,circle,grow=0, s sep=3em,l sep=2em,edge={<-,color=black!60,line width=2pt}, line width=2pt, fill=color_inactive,draw=black!40!color_inactive, minimum width={1cm}}, label={[commentText]below:{\parbox{1.5cm}{\centering %s \\\\ \\tiny\\textcolor{gray}{%s}}}} ' "$commit" "$objcontent"
				else
					#printf %s"[, label={[commentText]below:{\parbox{1.5cm}{\centering $commit \\\\\ \\\textcolor{gray}{$objcontent}}}} "
					#printf %s"[, label={below:{\parbox{1.5cm}{\color{red}{$objcontent}}}} "
					printf '[, label={[commentText]below:{\parbox{1.5cm}{\\centering %s \\\\ \\tiny\\textcolor{gray}{%s}}}} ' "$commit" "$objcontent"
				fi
				if [ $MASTER = $commit ]; then
					if [ $HEAD = $commit ]; then
						#printf ',grow=90,for tree={l sep=0.25em, l=0.5},[master,fill=color_branch,rectangle,no edge,grow=90,[HEAD,fill=color_head,rectangle,no edge]]'
						printf ',grow=0, [master,fill=color_branch,rectangle,no edge,before computing xy={s=5ex,l=0em},[HEAD,fill=color_head,rectangle,no edge,before computing xy={s=5ex,l=0em}]]'
					else
						#printf ',grow=90,for tree={l sep=0.25em, l=0.5},[master,fill=color_branch,rectangle,no edge]'
						printf ',grow=0, [master,fill=color_branch,rectangle,no edge,before computing xy={s=5ex,l=0em}]'
					fi
				else
					if [ $HEAD = $commit ]; then
						#printf ',grow=90,[HEAD,fill=color_head,rectangle,no edge]'
						#printf ',grow=90,for tree={l sep=0.25em, l=0.5},[HEAD,fill=color_head,rectangle,no edge]'
						printf ',grow=0, [HEAD,fill=color_head,rectangle,no edge,before computing xy={s=5ex,l=0em}]'
					fi	
				fi
				;;
			esac
	done < <(all_commits) #(ls_all_objects_short)
	#done
	printf %s"$ENDS"
	printf %s" \\n"

}

print_commits(){
	#COMMITS=$(cat $GIT_DIR/logs/HEAD | perl -ne 'print unless /checkout/;')
	#echo "$COMMITS"
	#get_BRANCHES
	#ls_all_refs
	#get_HEAD
	#MASTER=$(get_MASTER)
	#TAGS=$(get_TAGS)
	HEAD=$(get_HEAD)
	commits=()
	parents=()
	messages=()
	PARENTS=()
	while read Rows; do
		id=$(echo $Rows | cut -d'|' -f 1 | abbreviate_sha1)
		message=$(echo $Rows | cut -d'|' -f 3 | truncate_message)
		messages+=("$message")
		#commits+=("[_$id, for tree={commentText,circle,grow=0, s sep=3em,l sep=2em,edge={<-,color=black!60,line width=2pt}, line width=2pt, fill=color_inactive,draw=black!40!color_inactive, minimum width={1cm}}, label={[commentText]below:{\parbox{1.5cm}{\centering \tiny\textcolor{gray}{$message}}}} ${id}_]")
		if [ "$internal_commit_text" = true ]; then
			commits+=("[$id, name=$id, for tree={commentText,circle,grow=0, s sep=3em,l sep=2em,edge={<-,color=black!60,line width=2pt}, line width=2pt, fill=color_inactive,draw=black!40!color_inactive, minimum width={1cm}}, label={[commentText]below:{\parbox{2cm}{\centering \scriptsize\textcolor{gray}{$message}}}} ${id}_]")
		else
			commits+=("[, name=$id, for tree={commentText,circle,grow=0, s sep=3em,l sep=2em,edge={<-,color=black!60,line width=2pt}, line width=2pt, fill=color_inactive,draw=black!40!color_inactive, minimum width={1cm}}, label={[commentText]below:{\parbox{1.5cm}{\centering $id \\\\ \tiny\textcolor{gray}{$message}}}} ${id}_]")
		fi
		p=$(echo $Rows | cut -d'|' -f 2)
		if [ ${#p} -ge 41 ]; then
			#echo "$p"
			p2=$(echo $p | cut -d' ' -f 2 | abbreviate_sha1)
			PARENTS+=("$id $p2")
		fi
		parent=$(echo $Rows | cut -d'|' -f 2 | cut -d' ' -f 1 | abbreviate_sha1)  ## Need to modify this incase there are two parents ##
	    parents+=("$parent")
		
		#printf '[_%s, %s_]' "$id" "$id"
	#done < <(git rev-list --topo-order --reverse --all | abbreviate_sha1)
	done < <(git log --all --reverse --pretty="%H|%P|%s|%d")
  
    #echo "${commits[@]}"
	TREE=""
	CNT=0
	for (( i=0; i<${#commits[@]}; i++ )); do
		#echo "$i"
		if [ $CNT -eq 0 ]; then
			TREE="$TREE ${commits[$i]}"
		else
			commits[$i]=$(echo "${commits[$i]}" | sed 's/\\/\\\\/g')
			TREE=$(echo $TREE | sed "s/${parents[$i]}_/${parents[$i]}_ ${commits[$i]}/g")
		fi
		((CNT++))
	done

	
	## now add the branches
	## if both branches point to the same commit, make one of them point to the other
	while read BRANCH; do
		co=$(echo $BRANCH | cut -d' ' -f 1)
		br=$(echo $BRANCH | cut -d' ' -f 2)
		if [ "$internal_commit_text" = true ]; then
			#TREE=$(echo $TREE | sed "s/${co}_/${co}_ [${br},fill=color_branch,rectangle,edge={<-,color=black!60,line width=1pt},anchor=south,before computing xy={s=6ex,l=0em}, ${br}_]/g")
			#TREE=$(echo $TREE | sed "s/${co}_/${co}_ [${br},fill=color_branch,rectangle,edge={<-,color=black!60,line width=1pt}, before computing xy={s=0ex,l=0em}, ${br}_]/g")
			TREE=$(echo $TREE | sed "s/${co}_/${co}_ [${br},fill=color_branch,rectangle,edge={<-,color=black!60,line width=1pt}, ${br}_]/g")
		else
			TREE=$(echo $TREE | sed "s/${co}_/${co}_ [${br},fill=color_branch,rectangle,no edge,before computing xy={s=5ex,l=0em}, ${br}_]/g")
		fi
	done < <(get_BRANCHES)

	## add the tags
	while read TAG; do
		co=$(echo $TAG | cut -d' ' -f 1)
		br=$(echo $TAG | cut -d' ' -f 2)
		if [ "$internal_commit_text" = true ]; then
			TREE=$(echo $TREE | sed "s/${co}_/${co}_ [${br},fill=color_tag,rectangle,edge={<-,color=black!60,line width=1pt}, ${br}_]/g")
		else
			TREE=$(echo $TREE | sed "s/${co}_/${co}_ [${br},fill=color_tag,rectangle,no edge,before computing xy={s=5ex,l=0em}, ${br}_]/g")
		fi
	done < <(get_TAGS)
	
	##now add master
	#TREE=$(echo $TREE | sed "s/${MASTER}_/${MASTER}_ [master,fill=color_branch,rectangle,no edge,before computing xy={s=5ex,l=0em}, master_]/g")
	# if [ $MASTER = $HEAD ]; then
	# 	HEAD="master"
	# fi
	TREE=$(echo $TREE | sed "s/${HEAD}_/${HEAD}_ [HEAD,fill=color_head,rectangle,edge={<-,color=black!60,line width=1pt},anchor=south,before computing xy={s=6ex,l=0em}]/g")
	#TREE=$(echo $TREE | sed "s/${HEAD}_/${HEAD}_ [HEAD,fill=color_head,rectangle,edge={<-,color=black!60,line width=1pt}]/g")

	# link any additional parents (from mergers)
	for (( j=0; j<${#PARENTS[@]}; j++ )); do
		child=$(echo "${PARENTS[$j]}" | cut -d' ' -f 2)
		par=$(echo "${PARENTS[$j]}" | cut -d' ' -f 1)
		TREE=$(echo "$TREE \draw [->,color=black!60,line width=2pt] ($child) -- ($par);")
	done
	
	
	#echo "$TREE"
	TREE=$(echo "$TREE" | sed "s/master_//g")
	#TREE=$(echo "$TREE" | sed "s/\s[^\s]*_\]/\]/g")
	TREE=$(echo "$TREE" | sed "s/\s[^\s\}]*_\]/\]/g")
	TREE=$(echo "$TREE" | sed "s/\s[^\s\}]*_\s\[/\[/g")
	TREE=$(echo "$TREE" | sed "s/\ [a-z0-9]\{5\}_//g")
	TREE=$(echo "$TREE" | sed "s/\[_/\[/g")
	echo "$TREE"
	#echo "$PARENTS"
}

# print_refs() {
# 	ls_all_refs
# }

print_tikz() {
	#start with the header
	echo "\documentclass{standalone}"
	echo "\usepackage{forest}"
	#echo "\usepackage[paperwidth=35cm,paperheight=10cm,hmargin=0cm,vmargin=0cm]{geometry}"
	echo "\usepackage{fontspec}"
	#echo "\renewcommand{\baselinestretch}{0.75}"
	echo "\usepackage{tikz}"
	#echo "\usetikzlibrary{shapes,arrows,shadows,positioning,mindmap,backgrounds,decorations, calc,fit, decorations.pathreplacing,decorations.pathmorphing, shadings,shapes.geometric,patterns}"
	echo "\tikzstyle{TARGET} = [font={\fontspec[Scale=2]{Cantarell-Regular}}]"
	echo "\tikzstyle{hashText} = [font={\fontspec[Scale=1.5]{Inconsolata}}]"
	echo "\tikzstyle{commentText} = [font={\fontspec[Scale=1.0]{Inconsolata}}]"
	echo "\tikzstyle{commitText} = [font={\fontspec[Scale=0.5]{Inconsolata}}]"
	echo "\tikzstyle{refText} = [font={\fontspec[Scale=1.5]{Inconsolata}}]"

	echo "\definecolor{color_branch}{rgb}{1,0.8,0.4}"
	echo "\definecolor{color_head}{HTML}{6495ED} %"
	echo "\definecolor{color_HEAD}{rgb}{0.26,0.65,0.91}"
	echo "\definecolor{color_commit}{rgb}{0.9,0.9,0.2}"
	echo "\definecolor{color_inactive}{rgb}{0.90,0.9,0.9}"
	echo "\definecolor{color_detached}{rgb}{0.90,0.9,0.9}"
	echo "\definecolor{color_derivative}{rgb}{0.12,0.6,0.51}"
	echo "\definecolor{color_local}{rgb}{0.9,0.9,0.2}"
	echo "\definecolor{color_remote}{rgb}{1,0.55,0.15}"
	echo "\definecolor{color_tag}{rgb}{1,0.55,0.15}"

	echo "\begin{document}"
	#echo "\usetikzlibrary{arrows.meta}"
 

	# echo "% A template for making the storage symbol"
    # echo "\newcommand{\\state}[3]{"
	# echo "\draw (#1) node [draw=none,fill=#2,shape=circle,minimum width=2cm] (#3) {"
	# echo "\begin{tikzpicture}"
	# echo "\node [draw=white, fill=white,shape=cylinder,shape aspect=1.3 ,shape border rotate=90,minimum height=1.6cm,minimum width=1.5cm] at (0,0) (Cylinder) {};				\\draw[draw=#2,very thick,line width=0.1cm,anchor=north west] (\$(Cylinder.north west) +(-0.05cm,-0.1cm)$) arc (-180:0:0.8cm and 0.2cm); "
	# echo "\draw[draw=#2,very thick,line width=0.1cm,anchor=north west] (\$(Cylinder.north west) +(-0.05cm,-0.5cm)$) arc (-180:0:0.8cm and 0.2cm); "
	# echo "\draw[draw=#2,very thick,line width=0.1cm,anchor=north west] (\$(Cylinder.north west) +(-0.05cm,-0.9cm)$) arc (-180:0:0.8cm and 0.2cm); "
	# echo "\end{tikzpicture}"
	# echo "};"
	# echo "}"

	# echo "\newcommand{\\commit}[5]{"
	# echo "\node [#1,inner sep=0,outer sep=0] (#2) {"
	# echo "\begin{tikzpicture}[#1]"
	# echo "\draw [#1] node [draw=black!40!#3,fill=#3,shape=circle,minimum width=1.0cm,line width=3pt] (x) {};"
	# echo "\end{tikzpicture}"
	# echo "};"
	# echo "\node [below,hashText] at (#2.south) {#4};"
	# echo "\node [below,commentText,text=gray] at (\$(#2.south) +(0,-0.5)$) {#5};"
	# echo "}"

	# echo "\newcommand{\\rcommit}[5]{"
	# echo "\node [#1,inner sep=0,outer sep=0] (#2) {"
	# echo "\begin{tikzpicture}[#1]"
	# echo "\draw [#1] node [draw=black!40!#3,fill=#3,shape=rectangle,minimum width=1.0cm,minimum height=1.0cm,line width=3pt] (x) {};"
	# echo "\end{tikzpicture}"
	# echo "};"
	# echo "\node [below,hashText] at (#2.south) {#4};"
	# echo "\node [below,commentText,text=gray] at (\$(#2.south) +(0,-0.5)$) {#5};"
	# echo "}"

	# echo "\newcommand{\\master}[1] {"
	# echo "\node [#1,rectangle,fill=color_branch,draw=black!20!color_branch,line width=2pt,refText,minimum height=0.8cm] (master) {master};"
	# echo "}"
	# echo "\newcommand{\\rmaster}[1] {"
	# echo "\node [#1,rectangle,fill=color_branch,draw=black!20!color_branch,line width=2pt,refText,minimum height=0.8cm] (rmaster) {origin/master};"
	# echo "}"
	# echo "\newcommand{\\branch}[2] {"
	# echo "\node [#1,rectangle,fill=color_branch,draw=black!20!color_branch,line width=2pt,refText,minimum height=0.8cm] (#2) {#2};"
	# echo "}"
	
	# echo "\newcommand{\\HEAD}[1] {"
	# echo "\node [#1,rectangle,fill=color_HEAD,draw=black!20!color_HEAD,line width=2pt,refText,minimum height=0.8cm] (HEAD) {HEAD};"
	# echo "}"
	# echo "\newcommand{\\rHEAD}[1] {"
	# echo "\node [#1,rectangle,fill=color_HEAD,draw=black!20!color_HEAD,line width=2pt,refText,minimum height=0.8cm] (rHEAD) {origin/HEAD};"
	# echo "}"


	# now the middle
	#echo "\begin{tikzpicture}"
	echo "\begin{forest}"
	
	#print_content
	
	print_commits
	#A=($(get_BRANCHES))
	#echo "$A"
	
	#print_refs
	
    echo "\end{forest}"
	#echo "\end{tikzpicture}"
	
	# then the footer
	echo "\end{document} "
}




# Generate the LaTeX document

tex=$(echo "$filename" | sed 's/.pdf/.tex/')
print_tikz >"$tex" || exit 1

#xelatex $filename
xelatex -interaction=batchmode $tex 2>&1> /dev/null
#xelatex $tex
